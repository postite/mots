// Generated by Haxe 4.0.0-rc.3+e3df7a4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Diactrics = function() { };
Diactrics.__name__ = "Diactrics";
Diactrics.clean = function(input) {
	var chars = input.split("");
	var char;
	var _g = 0;
	var _g1 = chars.length;
	while(_g < _g1) {
		var i = _g++;
		var _this = Diactrics.map;
		var key = chars[i];
		char = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(null != char) {
			chars[i] = char;
		}
	}
	return chars.join("");
};
Diactrics.toArray = function(s) {
	return s.split("");
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var Guid = function() { };
Guid.__name__ = "Guid";
Guid.generate = function() {
	var result = "";
	var _g = 0;
	while(_g < 8) {
		var j = _g++;
		if(j == 8 || j == 12 || j == 16 || j == 20) {
			result += "-";
		}
		result += StringTools.hex(Math.floor(Math.random() * 16));
	}
	return result.toUpperCase();
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) a.push(i.next());
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) if(x.next() == elt) {
		return true;
	}
	return false;
};
Math.__name__ = "Math";
var Mots = function() { };
Mots.__name__ = "Mots";
Mots.underclean = function(str,separator) {
	if(separator == null) {
		separator = "_";
	}
	var nonWordChar_r = new RegExp("[\\xC0-\\xFF\\s\\W]","g".split("u").join(""));
	str = Mots.cleanAccents(str);
	str = str.replace(nonWordChar_r,separator);
	return str;
};
Mots.cleanFile = function(str) {
	var extension = haxe_io_Path.extension(str);
	str = haxe_io_Path.withoutExtension(str);
	str = Mots.stripEmoj(str);
	str = Mots.underclean(str," ") + ("." + extension);
	return Mots.camelize(str);
};
Mots.cleanAccents = function(str) {
	return Diactrics.clean(str);
};
Mots.stripExtension = function(n) {
	return haxe_io_Path.withoutExtension(n);
};
Mots.getExtension = function(n) {
	return haxe_io_Path.extension(n);
};
Mots.capitalize = function(str) {
	return str.charAt(0).toUpperCase() + HxOverrides.substr(str,1,null);
};
Mots.cleanPath = function(str) {
	return haxe_io_Path.normalize(str);
};
Mots.camelize = function(str) {
	str = new EReg("\\s(.)","g").map(str,function(reg) {
		return reg.matched(0).toUpperCase();
	});
	var _this_r = new RegExp("\\s","g".split("u").join(""));
	str = str.replace(_this_r,"");
	return str;
};
Mots.endsWith = function(str,ends) {
	return new EReg("(" + ends + "$)","m").match(str);
};
Mots.contains = function(s,test) {
	return s.indexOf(test) >= 0;
};
Mots.firstWord = function(str) {
	var r = new EReg("\\S\\w*","g");
	r.match(str);
	return r.matched(0);
};
Mots.betweenChars = function(str,char) {
	var r = new EReg("(?<=" + char + ")(.*?)(?=" + char + ")","g");
	r.match(str);
	return r.matched(1);
};
Mots.betweenDiffChars = function(str,deb,end) {
	var r = new EReg("([^" + deb + "]*)(" + end + ")","g");
	r.match(str);
	return r.matched(1);
};
Mots.stripEmoj = function(str) {
	return str.replace(Mots.jsReg.r,"");
};
Mots.matchEmoj = function(str) {
	return Mots.jsReg.match(str);
};
Mots.unCamel = function(s) {
	s = new EReg("([A-Z])","g").map(s,function(reg) {
		return " " + reg.matched(0).toLowerCase();
	});
	return s;
};
Mots.uuid = function() {
	var uid_b = "";
	var a = 8;
	uid_b = "" + Std.string(StringTools.hex(new Date().getTime() | 0,8));
	while(a++ < 36) uid_b += Std.string((a * 51 & 52) != 0 ? StringTools.hex((a ^ 15) != 0 ? 8 ^ (Math.random() * ((a ^ 20) != 0 ? 16 : 4) | 0) : 4) : "-");
	return uid_b.toLowerCase();
};
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var RunAll = function() { };
RunAll.__name__ = "RunAll";
RunAll.main = function() {
	haxe_Log.trace("runAll",{ fileName : "tests/RunAll.hx", lineNumber : 6, className : "RunAll", methodName : "main"});
	var runner = new utest_Runner();
	runner.addCase(new TestMots());
	utest_ui_Report.create(runner);
	runner.run();
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var utest_ITest = function() { };
utest_ITest.__name__ = "utest.ITest";
var TestMots = function() {
};
TestMots.__name__ = "TestMots";
TestMots.__interfaces__ = [utest_ITest];
TestMots.prototype = {
	testtest: function() {
		haxe_Log.trace("yo",{ fileName : "tests/TestMots.hx", lineNumber : 11, className : "TestMots", methodName : "testtest"});
		utest_Assert.isTrue(true,null,{ fileName : "tests/TestMots.hx", lineNumber : 12, className : "TestMots", methodName : "testtest"});
	}
	,testUnderClean: function() {
		utest_Assert.equals("Caapture_d_ecra_n_2019_02u_04_a_17_27_05_pngCapatuaereee_d_ecraan_2019_02_04_a_17_27_05_png",Mots.underclean(TestMots.fileName),"not safe emoji",{ fileName : "tests/TestMots.hx", lineNumber : 17, className : "TestMots", methodName : "testUnderClean"});
	}
	,testcleanFile: function() {
		var str = Mots.cleanFile(TestMots.fileName);
		haxe_Log.trace("strrrr" + str,{ fileName : "tests/TestMots.hx", lineNumber : 22, className : "TestMots", methodName : "testcleanFile"});
		utest_Assert.equals("CaaptureDEcran201902u04A172705PngCapatuaereeeDEcraan20190204A172705.png",str,null,{ fileName : "tests/TestMots.hx", lineNumber : 23, className : "TestMots", methodName : "testcleanFile"});
		utest_Assert.equals("png",Mots.getExtension(str),null,{ fileName : "tests/TestMots.hx", lineNumber : 24, className : "TestMots", methodName : "testcleanFile"});
	}
	,testCleanAccents: function() {
		utest_Assert.equals("Caapture d’ecra🐠n 2019-02u-04 a 17.27.05.pngCapatuaereee d’ecraan 2019-02-04 a 17.27.05.png",Mots.cleanAccents(TestMots.fileName),null,{ fileName : "tests/TestMots.hx", lineNumber : 28, className : "TestMots", methodName : "testCleanAccents"});
	}
	,testCapitalize: function() {
		utest_Assert.equals("David",Mots.capitalize("david"),null,{ fileName : "tests/TestMots.hx", lineNumber : 35, className : "TestMots", methodName : "testCapitalize"});
	}
	,testCleanPath: function() {
		utest_Assert.equals("../david/Zelote/magali/lupin.jpg",Mots.cleanPath("..//david/Zelote//magali/lupin.jpg//"),null,{ fileName : "tests/TestMots.hx", lineNumber : 41, className : "TestMots", methodName : "testCleanPath"});
	}
	,testEndWith: function() {
		utest_Assert.isTrue(Mots.endsWith("pur","r"),null,{ fileName : "tests/TestMots.hx", lineNumber : 46, className : "TestMots", methodName : "testEndWith"});
	}
	,firstWord: function() {
		utest_Assert.equals("je",Mots.firstWord("je suis une vache"),null,{ fileName : "tests/TestMots.hx", lineNumber : 51, className : "TestMots", methodName : "firstWord"});
	}
	,testCamel: function() {
		var str = "je suis une vache";
		str = Mots.camelize("je suis une vache");
		utest_Assert.equals("jeSuisUneVache",str,null,{ fileName : "tests/TestMots.hx", lineNumber : 58, className : "TestMots", methodName : "testCamel"});
	}
	,testContain: function() {
		utest_Assert.isTrue("bonjour".indexOf("j") >= 0,null,{ fileName : "tests/TestMots.hx", lineNumber : 63, className : "TestMots", methodName : "testContain"});
	}
	,testExtension: function() {
		["one.png","two.tar.gz",".htaccess","four.jpeg"].map(function(n) {
			utest_Assert.equals(haxe_io_Path.extension(n),Mots.getExtension(n),null,{ fileName : "tests/TestMots.hx", lineNumber : 70, className : "TestMots", methodName : "testExtension"});
			return null;
		});
	}
	,testunCamel: function() {
		var str = "jeSuisUneVache";
		str = Mots.unCamel("jeSuisUneVache");
		utest_Assert.equals("je suis une vache",str,null,{ fileName : "tests/TestMots.hx", lineNumber : 80, className : "TestMots", methodName : "testunCamel"});
	}
	,testMatchEmoj: function() {
		utest_Assert.isTrue(Mots.matchEmoj("👽😬hallowe🐬en"),null,{ fileName : "tests/TestMots.hx", lineNumber : 88, className : "TestMots", methodName : "testMatchEmoj"});
	}
	,testStripEmoj: function() {
		utest_Assert.equals("halloween",Mots.stripEmoj("👽😬hallowe🐬en"),null,{ fileName : "tests/TestMots.hx", lineNumber : 94, className : "TestMots", methodName : "testStripEmoj"});
	}
	,testBetweenchars: function() {
		utest_Assert.equals("bam",Mots.betweenChars("bim_bam_boum","_"),null,{ fileName : "tests/TestMots.hx", lineNumber : 99, className : "TestMots", methodName : "testBetweenchars"});
	}
	,testDifferentBetweenchars: function() {
		utest_Assert.equals("Screen",Mots.betweenDiffChars("./www/uploads/thumb/Screen_ateliernuenSlip.png","/","_"),null,{ fileName : "tests/TestMots.hx", lineNumber : 106, className : "TestMots", methodName : "testDifferentBetweenchars"});
	}
	,testGuid: function() {
		var p = [];
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		p.push(Guid.generate());
		var i = 0;
		var _g = [];
		var x = HxOverrides.iter(p);
		while(x.hasNext()) {
			var x1 = x.next();
			var i1 = i++;
			var _g1 = 0;
			var _g11 = p.length;
			while(_g1 < _g11) {
				var m = _g1++;
				if(m != i1) {
					var gu = p[m];
					haxe_Log.trace("n=" + x1 + " gu=" + gu + " " + i1,{ fileName : "tests/TestMots.hx", lineNumber : 121, className : "TestMots", methodName : "testGuid"});
					utest_Assert.isTrue(gu != x1,null,{ fileName : "tests/TestMots.hx", lineNumber : 122, className : "TestMots", methodName : "testGuid"});
				}
			}
			_g.push(x1);
		}
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = { tests : [], accessories : { }};
		init.tests.push({ name : "testtest", execute : function() {
			_gthis.testtest();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testUnderClean", execute : function() {
			_gthis.testUnderClean();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testcleanFile", execute : function() {
			_gthis.testcleanFile();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testCleanAccents", execute : function() {
			_gthis.testCleanAccents();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testCapitalize", execute : function() {
			_gthis.testCapitalize();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testCleanPath", execute : function() {
			_gthis.testCleanPath();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testEndWith", execute : function() {
			_gthis.testEndWith();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testCamel", execute : function() {
			_gthis.testCamel();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testContain", execute : function() {
			_gthis.testContain();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testExtension", execute : function() {
			_gthis.testExtension();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testunCamel", execute : function() {
			_gthis.testunCamel();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testMatchEmoj", execute : function() {
			_gthis.testMatchEmoj();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testStripEmoj", execute : function() {
			_gthis.testStripEmoj();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testBetweenchars", execute : function() {
			_gthis.testBetweenchars();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testDifferentBetweenchars", execute : function() {
			_gthis.testDifferentBetweenchars();
			return utest_Async.getResolved();
		}});
		init.tests.push({ name : "testGuid", execute : function() {
			_gthis.testGuid();
			return utest_Async.getResolved();
		}});
		return init;
	}
	,__class__: TestMots
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g++];
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var _g = s.m;
		b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
		break;
	case 2:
		var _g4 = s.column;
		var _g3 = s.line;
		var _g2 = s.file;
		var _g1 = s.s;
		if(_g1 != null) {
			haxe_CallStack.itemToString(b,_g1);
			b.b += " (";
		}
		b.b = (b.b += _g2 == null ? "null" : "" + _g2) + " line ";
		b.b += _g3 == null ? "null" : "" + _g3;
		if(_g4 != null) {
			b.b = (b.b += " column ") + (_g4 == null ? "null" : "" + _g4);
		}
		if(_g1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var _g7 = s.method;
		var _g6 = s.classname;
		b.b = (b.b += _g6 == null ? "null" : "" + _g6) + ".";
		b.b += _g7 == null ? "null" : "" + _g7;
		break;
	case 4:
		var _g5 = s.v;
		b.b = (b.b += "local function #") + (_g5 == null ? "null" : "" + _g5);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = target.join(slash);
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
};
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
	}
};
utest_Assert.isFalse = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == false) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
	}
};
utest_Assert.isNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value == null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.notNull = function(value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(value != null) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
	}
};
utest_Assert.is = function(value,type,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(js_Boot.__instanceof(value,type)) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
	}
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected != value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
	}
};
utest_Assert.equals = function(expected,value,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(expected == value) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert.match = function(pattern,value,msg,pos) {
	var cond = pattern.match(value);
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
	}
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	if(utest_Assert.results == null) {
		throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(utest_Assert._floatEquals(expected,value,approx)) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		var c = _g.c;
		return c.__name__;
	case 7:
		var e = _g.e;
		return e.__ename__;
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	if(!Lambda.has(isAnonym ? Reflect.fields(v) : Type.getInstanceFields(v == null ? null : js_Boot.getClass(v)),"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(v == null ? null : js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.sameAs = function(expected,value,status,approx) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields = Reflect.fields(value);
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				HxOverrides.remove(tfields,field);
				status.path = path == "" ? field : path + "." + field;
				if(!Object.prototype.hasOwnProperty.call(value,field)) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				if(!utest_Assert.sameAs(e,Reflect.field(value,field),status,approx)) {
					return false;
				}
			}
			if(tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path1 = status.path;
				var _g2 = 0;
				var _g11 = evalues.length;
				while(_g2 < _g11) {
					var i = _g2++;
					status.path = path1 == "" ? "iterator[" + i + "]" : path1 + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues1 = Lambda.array(expected);
				var vvalues1 = Lambda.array(value);
				if(evalues1.length != vvalues1.length) {
					status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path2 = status.path;
				var _g3 = 0;
				var _g12 = evalues1.length;
				while(_g3 < _g12) {
					var i1 = _g3++;
					status.path = path2 == "" ? "iterable[" + i1 + "]" : path2 + "[" + i1 + "]";
					if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(!Reflect.compareMethods(expected,value)) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		var c = _g.c;
		var cexpected = c.__name__;
		var o = value;
		var c1 = o == null ? null : js_Boot.getClass(o);
		var cvalue = c1.__name__;
		if(cexpected != cvalue) {
			status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string") {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
				return false;
			}
		}
		if(((expected) instanceof Array) && expected.__enum__ == null) {
			if(status.recursive || status.path == "") {
				if(expected.length != value.length) {
					status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path3 = status.path;
				var _g4 = 0;
				var _g13 = expected.length;
				while(_g4 < _g13) {
					var i2 = _g4++;
					status.path = path3 == "" ? "array[" + i2 + "]" : path3 + "[" + i2 + "]";
					if(!utest_Assert.sameAs(expected[i2],value[i2],status,approx)) {
						status.error = "expected array element at [" + i2 + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(((expected) instanceof Date)) {
			if(expected.getTime() != value.getTime()) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(((expected) instanceof haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					return false;
				}
				var _g5 = 0;
				var _g14 = ebytes.length;
				while(_g5 < _g14) {
					var i3 = _g5++;
					if(ebytes.b[i3] != vbytes.b[i3]) {
						status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__instanceof(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g6 = [];
				var k = map.keys();
				while(k.hasNext()) _g6.push(k.next());
				var keys = _g6;
				var _g15 = [];
				var k1 = vmap.keys();
				while(k1.hasNext()) _g15.push(k1.next());
				var vkeys = _g15;
				if(keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path4 = status.path;
				var _g21 = 0;
				while(_g21 < keys.length) {
					var key = keys[_g21];
					++_g21;
					status.path = path4 == "" ? "hash[" + Std.string(key) + "]" : path4 + "[" + Std.string(key) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues2 = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues2 = Lambda.array({ iterator : function() {
					return value;
				}});
				if(evalues2.length != vvalues2.length) {
					status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path5 = status.path;
				var _g7 = 0;
				var _g16 = evalues2.length;
				while(_g7 < _g16) {
					var i4 = _g7++;
					status.path = path5 == "" ? "iterator[" + i4 + "]" : path5 + "[" + i4 + "]";
					if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status,approx)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues3 = Lambda.array(expected);
				var vvalues3 = Lambda.array(value);
				if(evalues3.length != vvalues3.length) {
					status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path6 = status.path;
				var _g8 = 0;
				var _g17 = evalues3.length;
				while(_g8 < _g17) {
					var i5 = _g8++;
					status.path = path6 == "" ? "iterable[" + i5 + "]" : path6 + "[" + i5 + "]";
					if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status,approx)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var o1 = expected;
			var fields1 = Type.getInstanceFields(o1 == null ? null : js_Boot.getClass(o1));
			var path7 = status.path;
			var _g9 = 0;
			while(_g9 < fields1.length) {
				var field1 = fields1[_g9];
				++_g9;
				status.path = path7 == "" ? field1 : path7 + "." + field1;
				var e1 = Reflect.field(expected,field1);
				if(Reflect.isFunction(e1)) {
					continue;
				}
				if(!utest_Assert.sameAs(e1,Reflect.field(value,field1),status,approx)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var e2 = _g.e;
		var eexpected = e2.__ename__;
		var e3 = Type.getEnum(value);
		var evalue = e3.__ename__;
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected._hx_index != value._hx_index) {
				var e4 = expected;
				var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e4.__enum__].__constructs__[e4._hx_index]) + " but it is ";
				var e5 = value;
				status.error = tmp + utest_Assert.q($hxEnums[e5.__enum__].__constructs__[e5._hx_index]) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path8 = status.path;
			var _g10 = 0;
			var _g18 = eparams.length;
			while(_g10 < _g18) {
				var i6 = _g10++;
				status.path = path8 == "" ? "enum[" + i6 + "]" : path8 + "[" + i6 + "]";
				if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status,approx)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw new js__$Boot_HaxeError("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx)) {
		utest_Assert.pass(msg,pos);
	} else {
		utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	var name = type != null ? type.__name__ : "Dynamic";
	try {
		method();
		if(null == msgNotThrown) {
			msgNotThrown = "exception of type " + name + " not raised";
		}
		utest_Assert.fail(msgNotThrown,pos);
	} catch( ex ) {
		haxe_CallStack.lastException = ex;
		var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
		if(null == type) {
			utest_Assert.pass(null,pos);
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex1);
			}
			utest_Assert.isTrue(js_Boot.__instanceof(ex1,type),msgWrongType,pos);
		}
	}
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	if(Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.notContains = function(match,values,msg,pos) {
	if(!Lambda.has(values,match)) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
	}
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		utest_Assert.isTrue(true,msg,pos);
	} else {
		utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
		return;
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			utest_Assert.fail(msg,pos);
			return;
		}
		p = p2 + s.length;
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	return function() {
	};
};
utest_Assert.createEvent = function(f,timeout) {
	return function(e) {
	};
};
utest_Assert.typeToString = function(t) {
	try {
		var o = t;
		var _t = o == null ? null : js_Boot.getClass(o);
		if(_t != null) {
			t = _t;
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		return t.__name__;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
	try {
		var _t1 = Type.getEnum(t);
		if(_t1 != null) {
			t = _t1;
		}
	} catch( e2 ) {
		haxe_CallStack.lastException = e2;
	}
	try {
		return t.__ename__;
	} catch( e3 ) {
		haxe_CallStack.lastException = e3;
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( e4 ) {
		haxe_CallStack.lastException = e4;
	}
	try {
		return Std.string(t);
	} catch( e5 ) {
		haxe_CallStack.lastException = e5;
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__ : "utest.Assertation", __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning","Ignore"]
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["reason"],$_)
};
var utest_Async = function(timeoutMs) {
	if(timeoutMs == null) {
		timeoutMs = 250;
	}
	this.callbacks = [];
	this.timedOut = false;
	this.resolved = false;
	this.startTime = Date.now() / 1000;
	this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
};
utest_Async.__name__ = "utest.Async";
utest_Async.getResolved = function() {
	if(utest_Async.resolvedInstance == null) {
		utest_Async.resolvedInstance = new utest_Async();
		utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 28, className : "utest.Async", methodName : "getResolved"});
	}
	return utest_Async.resolvedInstance;
};
utest_Async.prototype = {
	resolved: null
	,timedOut: null
	,callbacks: null
	,startTime: null
	,timer: null
	,done: function(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			}
		}
		this.resolved = true;
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) _g1[_g++]();
	}
	,setTimeout: function(timeoutMs,pos) {
		if(this.resolved) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		}
		if(this.timedOut) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		}
		this.timer.stop();
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs - Math.round(1000 * (Date.now() / 1000 - this.startTime)));
	}
	,then: function(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	,setTimedOutState: function() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 78, className : "utest.Async", methodName : "setTimedOutState"});
	}
	,__class__: utest_Async
};
var utest__$Dispatcher_EventException = $hxEnums["utest._Dispatcher.EventException"] = { __ename__ : "utest._Dispatcher.EventException", __constructs__ : ["StopPropagation"]
	,StopPropagation: {_hx_index:0,__enum__:"utest._Dispatcher.EventException",toString:$estr}
};
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = "utest.Dispatcher";
utest_Dispatcher.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) list[_g++](e);
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if(js_Boot.__instanceof(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc,utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = "utest.Notifier";
utest_Notifier.stop = function() {
	throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) list[_g++]();
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			if(js_Boot.__instanceof(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc,utest__$Dispatcher_EventException)) {
				return false;
			} else {
				throw exc;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_TestHandler = function(fixture) {
	this.wasBound = false;
	this.finished = false;
	if(fixture == null) {
		throw new js__$Boot_HaxeError("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new haxe_ds_List();
	this.asyncStack = new haxe_ds_List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	if(fixture.ignoringInfo != null) {
		this.results.add(utest_Assertation.Ignore(fixture.ignoringInfo));
	}
};
utest_TestHandler.__name__ = "utest.TestHandler";
utest_TestHandler.exceptionStack = function(pops) {
	if(pops == null) {
		pops = 2;
	}
	var stack = haxe_CallStack.exceptionStack();
	while(pops-- > 0) stack.pop();
	return stack;
};
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,finished: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,execute: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var run = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.executeFixtureMethod();
			_gthis.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync,run);
			if(!expectingAsync) {
				this.executeFixtureMethod();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
		isSync = false;
		if(!expectingAsync) {
			this.executeFinally();
		}
	}
	,executeFixtureMethod: function() {
		try {
			this.executeMethod(this.fixture.method);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
	}
	,executeFinally: function() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	,checkTested: function() {
		if(this.expiration == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(Date.now() / 1000 > this.expiration) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	,expiration: null
	,setTimeout: function(timeout) {
		var newExpire = Date.now() / 1000 + timeout / 1000;
		this.expiration = this.expiration == null ? newExpire : newExpire > this.expiration ? newExpire : this.expiration;
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
		this.wasBound = true;
	}
	,unbindHandler: function() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f1,t1) {
			return function(e) {
			};
		};
		this.wasBound = false;
	}
	,addAsync: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				handler.results.add(utest_Assertation.AsyncError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,addEvent: function(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				handler.results.add(utest_Assertation.AsyncError(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	,executeMethod: function(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[]);
	}
	,executeAsyncMethod: function(name,done) {
		if(name == null) {
			done();
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[done]);
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	,completed: function() {
		var _gthis = this;
		if(this.fixture.ignoringInfo != null) {
			this.completedFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var complete = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync,complete);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(2)));
		}
		isSync = false;
		if(!expectingAsync) {
			this.completedFinally();
		}
	}
	,completedFinally: function() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_ITestHandler = function(fixture) {
	utest_TestHandler.call(this,fixture);
	if(!fixture.isITest) {
		throw new js__$Boot_HaxeError("Invalid fixture type for utest.ITestHandler");
	}
	this.testCase = js_Boot.__cast(fixture.target , utest_ITest);
	this.test = fixture.test;
	if(this.test == null) {
		throw new js__$Boot_HaxeError("Fixture is missing test data");
	}
};
utest_ITestHandler.__name__ = "utest.ITestHandler";
utest_ITestHandler.__super__ = utest_TestHandler;
utest_ITestHandler.prototype = $extend(utest_TestHandler.prototype,{
	testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
	,execute: function() {
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	,runSetup: function() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	,runTest: function() {
		try {
			this.testAsync = this.test.execute();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.runTeardown();
			return;
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	,checkTest: function() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw new js__$Boot_HaxeError("Unexpected test state");
		}
		this.runTeardown();
	}
	,runTeardown: function() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		var msg = " is not allowed in tests extending utest.ITest. Add `async:utest.Async` argument to the test method instead.";
		utest_Assert.createAsync = function(f,t) {
			throw new js__$Boot_HaxeError("Assert.createAsync() " + msg);
		};
		utest_Assert.createEvent = function(f1,t1) {
			throw new js__$Boot_HaxeError("Assert.createEvent() " + msg);
		};
		this.wasBound = true;
	}
	,__class__: utest_ITestHandler
});
var utest__$IgnoredFixture_IgnoredFixture_$Impl_$ = {};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__name__ = "utest._IgnoredFixture.IgnoredFixture_Impl_";
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__properties__ = {get_ignoreReason:"get_ignoreReason",get_isIgnored:"get_isIgnored"};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored = function() {
	return null;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored = function(reason) {
	return reason != null ? reason : "";
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$._new = function(reason) {
	return reason;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_isIgnored = function(this1) {
	return this1 != null;
};
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.get_ignoreReason = function(this1) {
	return this1;
};
var utest_Runner = function() {
	this.executedFixtures = 0;
	this.pos = 0;
	this.globalPattern = null;
	this.iTestFixtures = new haxe_ds_ObjectMap();
	this.fixtures = [];
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
};
utest_Runner.__name__ = "utest.Runner";
utest_Runner.prototype = {
	fixtures: null
	,iTestFixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,addCase: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(js_Boot.__instanceof(test,utest_ITest)) {
			this.addITest(test,pattern);
		} else {
			this.addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync);
		}
	}
	,addITest: function(testCase,pattern) {
		if(this.iTestFixtures.h.__keys__[testCase.__id__] != null) {
			throw new js__$Boot_HaxeError("Cannot add the same test twice.");
		}
		var fixtures = [];
		var init = testCase.__initializeUtest__();
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			var fixture = utest_TestFixture.ofData(testCase,test,init.accessories);
			this.addFixture(fixture);
			fixtures.push(fixture);
		}
		this.iTestFixtures.set(testCase,{ setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), fixtures : fixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)});
	}
	,addCaseOld: function(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw new js__$Boot_HaxeError("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,setupAsync)) {
			setupAsync = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		if(!this.isMethod(test,teardownAsync)) {
			teardownAsync = null;
		}
		var fields = Type.getInstanceFields(test == null ? null : js_Boot.getClass(test));
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(!this.isMethod(test,field)) {
				continue;
			}
			if(!this.isTestFixtureName(field,[prefix],pattern,this.globalPattern)) {
				continue;
			}
			this.addFixture(new utest_TestFixture(test,field,setup,teardown,setupAsync,teardownAsync));
		}
	}
	,isTestFixtureName: function(name,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) if(StringTools.startsWith(name,prefixes[_g++])) {
				return true;
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match(name);
	}
	,addFixture: function(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	,getFixture: function(index) {
		return this.fixtures[index];
	}
	,isMethod: function(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return false;
		}
	}
	,run: function() {
		this.onStart.dispatch(this);
		new utest__$Runner_ITestRunner(this).run();
	}
	,pos: null
	,executedFixtures: null
	,runNext: function(finishedHandler) {
		var _g = this.pos;
		var _g1 = this.fixtures.length;
		while(_g < _g1) {
			++_g;
			var fixture = this.fixtures[this.pos++];
			if(fixture.isITest) {
				continue;
			}
			var handler = this.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runNext));
				return;
			}
		}
		this.onComplete.dispatch(this);
	}
	,runFixture: function(fixture) {
		var handler = fixture.isITest ? new utest_ITestHandler(fixture) : new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	,testComplete: function(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
	,__class__: utest_Runner
};
var utest__$Runner_ITestRunner = function(runner) {
	this.runner = runner;
};
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
utest__$Runner_ITestRunner.prototype = {
	runner: null
	,cases: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
	,run: function() {
		this.cases = this.runner.iTestFixtures.keys();
		this.runCases();
	}
	,runCases: function() {
		while(this.cases.hasNext()) {
			this.currentCase = this.cases.next();
			var data = this.runner.iTestFixtures.h[this.currentCase.__id__];
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.runNext();
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else {
			this.runFixtures();
		}
	}
	,setupFailed: function(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	,runFixtures: function(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var handler = this.runner.runFixture(this.currentCaseFixtures.pop());
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.teardownFailed(utest_Assertation.TeardownError("tearDownClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	,teardownFailed: function(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
	,__class__: utest__$Runner_ITestRunner
};
var utest_AccessoryName = function() { };
utest_AccessoryName.__name__ = "utest.AccessoryName";
var utest_TestFixture = function(target,method,setup,teardown,setupAsync,teardownAsync) {
	this.isITest = false;
	this.target = target;
	this.method = method;
	this.setup = setup;
	this.setupAsync = setupAsync;
	this.teardown = teardown;
	this.teardownAsync = teardownAsync;
	this.ignoringInfo = this.getIgnored();
};
utest_TestFixture.__name__ = "utest.TestFixture";
utest_TestFixture.ofData = function(target,test,accessories) {
	var fixture = new utest_TestFixture(target,test.name);
	fixture.isITest = true;
	fixture.test = test;
	fixture.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
	fixture.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
	return fixture;
};
utest_TestFixture.prototype = {
	target: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,ignoringInfo: null
	,isITest: null
	,test: null
	,setupMethod: null
	,teardownMethod: null
	,checkMethod: function(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a function");
		}
	}
	,getIgnored: function() {
		var o = this.target;
		var metasForTestMetas = Reflect.getProperty(haxe_rtti_Meta.getFields(o == null ? null : js_Boot.getClass(o)),this.method);
		if(metasForTestMetas == null || !Object.prototype.hasOwnProperty.call(metasForTestMetas,"Ignored")) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored();
		}
		var ignoredArgs = Reflect.getProperty(metasForTestMetas,"Ignored");
		if(ignoredArgs == null || ignoredArgs.length == 0 || ignoredArgs[0] == null) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored();
		}
		return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored(Std.string(ignoredArgs[0]));
	}
	,__class__: utest_TestFixture
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = "utest.TestResult";
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var o = handler.fixture.target;
	var c = o == null ? null : js_Boot.getClass(o);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.method;
	r.setup = handler.fixture.setup;
	r.setupAsync = handler.fixture.setupAsync;
	r.teardown = handler.fixture.teardown;
	r.teardownAsync = handler.fixture.teardownAsync;
	r.assertations = handler.results;
	return r;
};
utest_TestResult.ofFailedSetupClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.ofFailedTeardownClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = testCase == null ? null : js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
	,allOk: function() {
		var head = this.assertations.h;
		while(head != null) if(head.item._hx_index == 0) {
			break;
		} else {
			return false;
		}
		return true;
	}
	,__class__: utest_TestResult
};
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = "utest.ui.Report";
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report;
	if(typeof window != 'undefined') {
		report = new utest_ui_text_HtmlReport(runner,null,true);
	} else {
		report = new utest_ui_text_PrintReport(runner);
	}
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = new haxe_ds_StringMap();
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		var key = result.methodName;
		var _this = this.fixtures;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		var key1 = result.methodName;
		var _this1 = this.fixtures;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,result);
		} else {
			_this1.h[key1] = result;
		}
	}
	,get: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.getReserved(method);
		} else {
			return _this.h[method];
		}
	}
	,exists: function(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.existsReserved(method);
		} else {
			return _this.h.hasOwnProperty(method);
		}
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.fixtures.keys();
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName) {
	this.methodName = methodName;
	this.list = new haxe_ds_List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.list.h);
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			this.stats.addSuccesses(1);
			break;
		case 1:
			this.stats.addFailures(1);
			break;
		case 2:
			this.stats.addErrors(1);
			break;
		case 3:
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			this.stats.addWarnings(1);
			break;
		case 8:
			this.stats.addIgnores(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__ : "utest.ui.common.HeaderDisplayMode", __constructs__ : ["AlwaysShowHeader","NeverShowHeader","ShowHeaderWithResults"]
	,AlwaysShowHeader: {_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__ : "utest.ui.common.SuccessResultsDisplayMode", __constructs__ : ["AlwaysShowSuccessResults","NeverShowSuccessResults","ShowSuccessResultsWithNoErrors"]
	,AlwaysShowSuccessResults: {_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.isEmpty = true;
	this.packageName = packageName;
	this.classes = new haxe_ds_StringMap();
	this.packages = new haxe_ds_StringMap();
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.isEmpty = false;
		this.getOrCreateClass(this.getOrCreatePackage(result.pack,flattenPackage,this),result.cls,result.setup,result.teardown).add(this.createFixture(result.method,result.assertations));
	}
	,addClass: function(result) {
		this.isEmpty = false;
		var key = result.className;
		var _this = this.classes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		this.isEmpty = false;
		var key = result.packageName;
		var _this = this.packages;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,existsClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getClass: function(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.classes.keys();
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var name = this.packages.keys();
		while(name.hasNext()) names.push(name.next());
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) f.add(assertation.next());
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) ref = this.getOrCreatePackage(parts[_g++],true,ref);
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 1:
			return false;
		case 0:case 2:
			return true;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw new js__$Boot_HaxeError("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.checkNonITest();
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,checkNonITest: function() {
		var first = null;
		var total = 0;
		var _g = 0;
		var _g1 = this.runner.length;
		while(_g < _g1) {
			var fixture = this.runner.getFixture(_g++);
			if(!fixture.isITest) {
				++total;
				if(first == null) {
					var o = fixture.target;
					var c = o == null ? null : js_Boot.getClass(o);
					first = c.__name__;
				}
			}
		}
		if(total > 0) {
			var baseMsg = "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
			var msg;
			switch(total) {
			case 1:
				msg = "" + first + " doesn't " + baseMsg;
				break;
			case 2:
				msg = "" + first + " and 1 other don't " + baseMsg;
				break;
			default:
				msg = "" + first + " and " + total + " others don't " + baseMsg;
			}
			haxe_Log.trace(msg,{ fileName : "utest/ui/common/ResultAggregator.hx", lineNumber : 54, className : "utest.ui.common.ResultAggregator", methodName : "checkNonITest"});
		}
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) ref = this.getOrCreatePackage(parts[_g++],true,ref);
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			f.add(val);
		}
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	,createNoTestsResult: function() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		result.assertations.add(utest_Assertation.Failure("No tests executed.",{ fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"}));
		return result;
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.ignores = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.hasIgnores = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
	this.onAddIgnores = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addIgnores: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_HtmlReport = function(runner,outputHandler,traceRedirected) {
	if(traceRedirected == null) {
		traceRedirected = true;
	}
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null == outputHandler) {
		this.setHandler($bind(this,this._handler));
	} else {
		this.setHandler(outputHandler);
	}
	if(traceRedirected) {
		this.redirectTrace();
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_HtmlReport.__name__ = "utest.ui.text.HtmlReport";
utest_ui_text_HtmlReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_HtmlReport.prototype = {
	traceRedirected: null
	,displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,oldTrace: null
	,_traces: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,redirectTrace: function() {
		if(this.traceRedirected) {
			return;
		}
		this._traces = [];
		this.oldTrace = haxe_Log.trace;
		haxe_Log.trace = $bind(this,this._trace);
	}
	,restoreTrace: function() {
		if(!this.traceRedirected) {
			return;
		}
		haxe_Log.trace = this.oldTrace;
	}
	,_traceTime: null
	,_trace: function(v,infos) {
		var time = Date.now() / 1000;
		var delta = this._traceTime == null ? 0 : time - this._traceTime;
		this._traces.push({ msg : StringTools.htmlEscape(Std.string(v)), infos : infos, time : time - this.startTime, delta : delta, stack : haxe_CallStack.callStack()});
		this._traceTime = Date.now() / 1000;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = Date.now() / 1000;
	}
	,cls: function(stats) {
		if(stats.hasErrors) {
			return "error";
		} else if(stats.hasFailures) {
			return "failure";
		} else if(stats.hasWarnings) {
			return "warn";
		} else {
			return "ok";
		}
	}
	,resultNumbers: function(buf,stats) {
		var numbers = [];
		if(stats.assertations == 1) {
			numbers.push("<strong>1</strong> test");
		} else {
			numbers.push("<strong>" + stats.assertations + "</strong> tests");
		}
		if(stats.successes != stats.assertations) {
			if(stats.successes == 1) {
				numbers.push("<strong>1</strong> pass");
			} else if(stats.successes > 0) {
				numbers.push("<strong>" + stats.successes + "</strong> passes");
			}
		}
		if(stats.errors == 1) {
			numbers.push("<strong>1</strong> error");
		} else if(stats.errors > 0) {
			numbers.push("<strong>" + stats.errors + "</strong> errors");
		}
		if(stats.failures == 1) {
			numbers.push("<strong>1</strong> failure");
		} else if(stats.failures > 0) {
			numbers.push("<strong>" + stats.failures + "</strong> failures");
		}
		if(stats.warnings == 1) {
			numbers.push("<strong>1</strong> warning");
		} else if(stats.warnings > 0) {
			numbers.push("<strong>" + stats.warnings + "</strong> warnings");
		}
		var x = numbers.join(", ");
		buf.b += Std.string(x);
	}
	,blockNumbers: function(buf,stats) {
		buf.b += Std.string("<div class=\"" + this.cls(stats) + "bg statnumbers\">");
		this.resultNumbers(buf,stats);
		buf.b += "</div>";
	}
	,formatStack: function(stack,addNL) {
		if(addNL == null) {
			addNL = true;
		}
		var parts = [];
		var nl = addNL ? "\n" : "";
		var last = null;
		var count = 1;
		var _g = 0;
		var _g1 = haxe_CallStack.toString(stack).split("\n");
		while(_g < _g1.length) {
			var part = _g1[_g];
			++_g;
			if(StringTools.trim(part) == "") {
				continue;
			}
			if(-1 < part.indexOf("Called from utest.")) {
				continue;
			}
			if(part == last) {
				parts[parts.length - 1] = part + " (#" + ++count + ")";
			} else {
				count = 1;
				last = part;
				parts.push(part);
			}
		}
		return "<div>" + ("<ul><li>" + parts.join("</li>" + nl + "<li>") + "</li></ul>" + nl) + "</div>" + nl;
	}
	,addFixture: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<li class=\"fixture\"><div class=\"li\">";
		buf.b += Std.string("<span class=\"" + this.cls(result.stats) + "bg fixtureresult\">");
		if(result.stats.isOk) {
			buf.b += "OK ";
		} else if(result.stats.hasErrors) {
			buf.b += "ERROR ";
		} else if(result.stats.hasFailures) {
			buf.b += "FAILURE ";
		} else if(result.stats.hasWarnings) {
			buf.b += "WARNING ";
		}
		buf.b = (buf.b += "</span>") + "<div class=\"fixturedetails\">";
		buf.b = (buf.b += Std.string("<strong>" + name + "</strong>")) + ": ";
		this.resultNumbers(buf,result.stats);
		var messages = [];
		var _g = result.iterator();
		while(_g.head != null) {
			var val = _g.head.item;
			_g.head = _g.head.next;
			switch(val._hx_index) {
			case 0:
				break;
			case 1:
				messages.push("<strong>line " + val.pos.lineNumber + "</strong>: <em>" + StringTools.htmlEscape(val.msg) + "</em>");
				break;
			case 2:
				var _g7 = val.e;
				messages.push("<strong>error</strong>: <em>" + this.getErrorDescription(_g7) + "</em>\n<br/><strong>stack</strong>:" + this.getErrorStack(val.stack,_g7));
				break;
			case 3:
				var _g13 = val.e;
				messages.push("<strong>setup error</strong>: " + this.getErrorDescription(_g13) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(val.stack,_g13));
				break;
			case 4:
				var _g4 = val.e;
				messages.push("<strong>tear-down error</strong>: " + this.getErrorDescription(_g4) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(val.stack,_g4));
				break;
			case 5:
				messages.push("<strong>missed async call(s)</strong>: " + val.missedAsyncs);
				break;
			case 6:
				var _g11 = val.e;
				messages.push("<strong>async error</strong>: " + this.getErrorDescription(_g11) + "\n<br/><strong>stack</strong>:" + this.getErrorStack(val.stack,_g11));
				break;
			case 7:
				messages.push(StringTools.htmlEscape(val.msg));
				break;
			case 8:
				messages.push(StringTools.htmlEscape(val.reason));
				break;
			}
		}
		if(messages.length > 0) {
			buf.b += "<div class=\"testoutput\">";
			var x = messages.join("<br/>");
			buf.b += Std.string(x);
			buf.b += "</div>\n";
		}
		buf.b = (buf.b += "</div>\n") + "</div></li>\n";
	}
	,getErrorDescription: function(e) {
		return Std.string(e);
	}
	,getErrorStack: function(s,e) {
		return this.formatStack(s);
	}
	,addClass: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b = (buf.b += "<li>") + Std.string("<h2 class=\"classname\">" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.methodNames();
		while(_g < _g1.length) {
			var mname = _g1[_g];
			++_g;
			this.addFixture(buf,result.get(mname),mname,isOk);
		}
		buf.b = (buf.b += "</ul>\n") + "</li>\n";
	}
	,addPackages: function(buf,result,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		buf.b += "<ul id=\"utest-results-packages\">\n";
		var _g = 0;
		var _g1 = result.packageNames(false);
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.addPackage(buf,result.getPackage(name),name,isOk);
		}
		buf.b += "</ul>\n";
	}
	,addPackage: function(buf,result,name,isOk) {
		if(utest_ui_common_ReportTools.skipResult(this,result.stats,isOk)) {
			return;
		}
		if(name == "" && result.classNames().length == 0) {
			return;
		}
		buf.b = (buf.b += "<li>") + Std.string("<h2>" + name + "</h2>");
		this.blockNumbers(buf,result.stats);
		buf.b += "<ul>\n";
		var _g = 0;
		var _g1 = result.classNames();
		while(_g < _g1.length) {
			var cname = _g1[_g];
			++_g;
			this.addClass(buf,result.getClass(cname),cname,isOk);
		}
		buf.b = (buf.b += "</ul>\n") + "</li>\n";
	}
	,getTextResults: function() {
		var newline = "\n";
		var indents = function(count) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < count) {
				++_g1;
				_g.push("  ");
			}
			return _g.join("");
		};
		var dumpStack = function(stack) {
			if(stack.length == 0) {
				return "";
			}
			var parts = haxe_CallStack.toString(stack).split("\n");
			var r = [];
			var _g2 = 0;
			while(_g2 < parts.length) {
				var part = parts[_g2];
				++_g2;
				if(part.indexOf(" utest.") >= 0) {
					continue;
				}
				r.push(part);
			}
			return r.join(newline);
		};
		var buf_b = "";
		var _g3 = 0;
		var _g11 = this.result.packageNames();
		while(_g3 < _g11.length) {
			var pname = _g11[_g3];
			++_g3;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g4 = 0;
			var _g12 = pack.classNames();
			while(_g4 < _g12.length) {
				var cname = _g12[_g4];
				++_g4;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf_b += Std.string((pname == "" ? "" : pname + ".") + cname + newline);
				var _g5 = 0;
				var _g13 = cls.methodNames();
				while(_g5 < _g13.length) {
					var mname = _g13[_g5];
					++_g5;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf_b += Std.string(indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf_b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf_b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf_b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf_b += "WARNING ";
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.head != null) {
						var val = _g6.head.item;
						_g6.head = _g6.head.next;
						switch(val._hx_index) {
						case 0:
							buf_b += ".";
							break;
						case 1:
							buf_b += "F";
							messages += indents(2) + "line: " + val.pos.lineNumber + ", " + val.msg + newline;
							break;
						case 2:
							buf_b += "E";
							messages += indents(2) + Std.string(val.e) + dumpStack(val.stack) + newline;
							break;
						case 3:
							buf_b += "S";
							messages += indents(2) + Std.string(val.e) + dumpStack(val.stack) + newline;
							break;
						case 4:
							buf_b += "T";
							messages += indents(2) + Std.string(val.e) + dumpStack(val.stack) + newline;
							break;
						case 5:
							buf_b += "O";
							messages += indents(2) + "missed async calls: " + val.missedAsyncs + dumpStack(val.stack) + newline;
							break;
						case 6:
							buf_b += "A";
							messages += indents(2) + Std.string(val.e) + dumpStack(val.stack) + newline;
							break;
						case 7:
							buf_b += "W";
							messages += indents(2) + val.msg + newline;
							break;
						case 8:
							var _g61 = val.reason;
							buf_b += "I";
							if(_g61 != null && _g61 != "") {
								messages += indents(2) + ("With reason: " + _g61) + newline;
							}
							break;
						}
					}
					buf_b += newline == null ? "null" : "" + newline;
					buf_b += messages == null ? "null" : "" + messages;
				}
			}
		}
		return buf_b;
	}
	,getHeader: function() {
		var buf = new StringBuf();
		if(!utest_ui_common_ReportTools.hasHeader(this,this.result.stats)) {
			return "";
		}
		var time = ((Date.now() / 1000 - this.startTime) * 1000 | 0) / 1000;
		var msg = "TEST OK";
		if(this.result.stats.hasErrors) {
			msg = "TEST ERRORS";
		} else if(this.result.stats.hasFailures) {
			msg = "TEST FAILED";
		} else if(this.result.stats.hasWarnings) {
			msg = "WARNING REPORTED";
		}
		buf.b = (buf.b += Std.string("<h1 class=\"" + this.cls(this.result.stats) + "bg header\">" + msg + "</h1>\n")) + "<div class=\"headerinfo\">";
		this.resultNumbers(buf,this.result.stats);
		buf.b += Std.string(" performed on <strong>" + utest_ui_text_HtmlReport.platform + "</strong>, executed in <strong> " + time + " sec. </strong></div >\n ");
		return buf.b;
	}
	,getTrace: function() {
		var buf_b = "";
		if(this._traces == null || this._traces.length == 0) {
			return "";
		}
		buf_b = "<div class=\"trace\"><h2>traces</h2><ol>";
		var _g = 0;
		var _g1 = this._traces;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			buf_b += "<li><div class=\"li\">";
			var stack = StringTools.replace(this.formatStack(t.stack,false),"'","\\'");
			var method = "<span class=\"tracepackage\">" + t.infos.className + "</span><br/>" + t.infos.methodName + "(" + t.infos.lineNumber + ")";
			buf_b += Std.string("<span class=\"tracepos\" onmouseover=\"utestTooltip(this.parentNode, '" + stack + "')\" onmouseout=\"utestRemoveTooltip()\">");
			buf_b += method == null ? "null" : "" + method;
			buf_b += "</span><span class=\"tracetime\">";
			buf_b += Std.string("@ " + this.formatTime(t.time));
			if(Math.round(t.delta * 1000) > 0) {
				buf_b += Std.string(", ~" + this.formatTime(t.delta));
			}
			buf_b += "</span><span class=\"tracemsg\">";
			buf_b += Std.string(StringTools.replace(StringTools.trim(t.msg),"\n","<br/>\n"));
			buf_b += "</span><div class=\"clr\"></div></div></li>";
		}
		buf_b += "</ol></div>";
		return buf_b;
	}
	,getResults: function() {
		var buf = new StringBuf();
		this.addPackages(buf,this.result,this.result.stats.isOk);
		return buf.b;
	}
	,getAll: function() {
		if(!utest_ui_common_ReportTools.hasOutput(this,this.result.stats)) {
			return "";
		} else {
			return this.getHeader() + this.getTrace() + this.getResults();
		}
	}
	,getHtml: function(title) {
		if(null == title) {
			title = "utest: " + utest_ui_text_HtmlReport.platform;
		}
		var s = this.getAll();
		if("" == s) {
			return "";
		} else {
			return this.wrapHtml(title,s);
		}
	}
	,result: null
	,complete: function(result) {
		this.result = result;
		this.handler(this);
		this.restoreTrace();
		var exposedResult = { isOk : result.stats.isOk, message : this.getTextResults()};
		if('undefined' != typeof window) {
			window.utest_result = exposedResult;
		}
	}
	,formatTime: function(t) {
		return Math.round(t * 1000) + " ms";
	}
	,cssStyle: function() {
		return "body, dd, dt {\n  font-family: Verdana, Arial, Sans-serif;\n  font-size: 12px;\n}\ndl {\n  width: 180px;\n}\ndd, dt {\n  margin : 0;\n  padding : 2px 5px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n}\ndd.value {\n  text-align: center;\n  background-color: #eeeeee;\n}\ndt {\n  text-align: left;\n  background-color: #e6e6e6;\n  float: left;\n  width: 100px;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  text-align: center;\n  font-weight: bold;\n  padding: 5px 0 4px 0;\n  font-family: Arial, Sans-serif;\n  font-size: 18px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 2px 0px 2px;\n}\n\nh2 {\n  font-weight: bold;\n  padding: 2px 0 2px 8px;\n  font-family: Arial, Sans-serif;\n  font-size: 13px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  margin: 0 0 0px 0;\n  background-color: #FFFFFF;\n  color: #777777;\n}\n\nh2.classname {\n  color: #000000;\n}\n\n.okbg {\n  background-color: #66FF55;\n}\n.errorbg {\n  background-color: #CC1100;\n}\n.failurebg {\n  background-color: #EE3322;\n}\n.warnbg {\n  background-color: #FFCC99;\n}\n.headerinfo {\n  text-align: right;\n  font-size: 11px;\n  font - color: 0xCCCCCC;\n  margin: 0 2px 5px 2px;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  padding: 2px;\n}\n\nli {\n  padding: 4px;\n  margin: 2px;\n  border-top: 1px solid #f0f0f0;\n  border-left: 1px solid #f0f0f0;\n  border-right: 1px solid #CCCCCC;\n  border-bottom: 1px solid #CCCCCC;\n  background-color: #e6e6e6;\n}\n\nli.fixture {\n  background-color: #f6f6f6;\n  padding-bottom: 6px;\n}\n\ndiv.fixturedetails {\n  padding-left: 108px;\n}\n\nul {\n  padding: 0;\n  margin: 6px 0 0 0;\n  list-style-type: none;\n}\n\nol {\n  padding: 0 0 0 28px;\n  margin: 0px 0 0 0;\n}\n\n.statnumbers {\n  padding: 2px 8px;\n}\n\n.fixtureresult {\n  width: 100px;\n  text-align: center;\n  display: block;\n  float: left;\n  font-weight: bold;\n  padding: 1px;\n  margin: 0 0 0 0;\n}\n\n.testoutput {\n  border: 1px dashed #CCCCCC;\n  margin: 4px 0 0 0;\n  padding: 4px 8px;\n  background-color: #eeeeee;\n}\n\nspan.tracepos, span.traceposempty {\n  display: block;\n  float: left;\n  font-weight: bold;\n  font-size: 9px;\n  width: 170px;\n  margin: 2px 0 0 2px;\n}\n\nspan.tracepos:hover {\n  cursor : pointer;\n  background-color: #ffff99;\n}\n\nspan.tracemsg {\n  display: block;\n  margin-left: 180px;\n  background-color: #eeeeee;\n  padding: 7px;\n}\n\nspan.tracetime {\n  display: block;\n  float: right;\n  margin: 2px;\n  font-size: 9px;\n  color: #777777;\n}\n\n\ndiv.trace ol {\n  padding: 0 0 0 40px;\n  color: #777777;\n}\n\ndiv.trace li {\n  padding: 0;\n}\n\ndiv.trace li div.li {\n  color: #000000;\n}\n\ndiv.trace h2 {\n  margin: 0 2px 0px 2px;\n  padding-left: 4px;\n}\n\n.tracepackage {\n  color: #777777;\n  font-weight: normal;\n}\n\n.clr {\n  clear: both;\n}\n\n#utesttip {\n  margin-top: -3px;\n  margin-left: 170px;\n  font-size: 9px;\n}\n\n#utesttip li {\n  margin: 0;\n  background-color: #ffff99;\n  padding: 2px 4px;\n  border: 0;\n  border-bottom: 1px dashed #ffff33;\n}";
	}
	,jsScript: function() {
		return "function utestTooltip(ref, text) {\n  var el = document.getElementById(\"utesttip\");\n  if(!el) {\n    var el = document.createElement(\"div\")\n    el.id = \"utesttip\";\n    el.style.position = \"absolute\";\n    document.body.appendChild(el)\n  }\n  var p = utestFindPos(ref);\n  el.style.left = (4 + p[0]) + \"px\";\n  el.style.top = (p[1] - 1) + \"px\";\n  el.innerHTML =  text;\n}\n\nfunction utestFindPos(el) {\n  var left = 0;\n  var top = 0;\n  do {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n  } while(el = el.offsetParent)\n  return [left, top];\n}\n\nfunction utestRemoveTooltip() {\n  var el = document.getElementById(\"utesttip\")\n  if(el)\n    document.body.removeChild(el)\n}";
	}
	,wrapHtml: function(title,s) {
		return "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>" + title + "</title>\n      <style type=\"text/css\">" + this.cssStyle() + "</style>\n      <script type=\"text/javascript\">\n" + this.jsScript() + "\n</" + "script>\n</head>\n      <body>\n" + s + "\n</body>\n</html>";
	}
	,_handler: function(report) {
		var _gthis = this;
		if(window.document.readyState == "loading") {
			var onReadyStateChange = null;
			onReadyStateChange = function() {
				if(window.document.readyState != "loading") {
					window.document.removeEventListener("readystatechange",onReadyStateChange);
					_gthis._handler(report);
				}
			};
			window.document.addEventListener("readystatechange",onReadyStateChange);
			return;
		}
		var isDef = function(v) {
			return typeof v != 'undefined';
		};
		var hasProcess = typeof process != 'undefined';
		if(hasProcess) {
			process.stdout.write(report.getHtml());
			return;
		}
		var head = window.document.getElementsByTagName("head")[0];
		var script = window.document.createElement("script");
		script.type = "text/javascript";
		var sjs = report.jsScript();
		if(isDef(script.text)) {
			script.text = sjs;
		} else {
			script.innerHTML = sjs;
		}
		head.appendChild(script);
		var style = window.document.createElement("style");
		style.type = "text/css";
		var scss = report.cssStyle();
		if(isDef(style.styleSheet)) {
			style.styleSheet.cssText = scss;
		} else if(isDef(style.cssText)) {
			style.cssText = scss;
		} else if(isDef(style.innerText)) {
			style.innerText = scss;
		} else {
			style.innerHTML = scss;
		}
		head.appendChild(style);
		var el = window.document.getElementById("utest-results");
		if(null == el) {
			el = window.document.createElement("div");
			el.id = "utest-results";
			window.document.body.appendChild(el);
		}
		el.innerHTML = report.getAll();
	}
	,__class__: utest_ui_text_HtmlReport
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		return Date.now() / 1000;
	}
	,indents: function(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var time = ((this.getTime() - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g11 = pack.classNames();
			while(_g2 < _g11.length) {
				var cname = _g11[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g3 = 0;
				var _g12 = cls.methodNames();
				while(_g3 < _g12.length) {
					var mname = _g12[_g3];
					++_g3;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					buf.b += Std.string(this.indents(1) + mname + ": ");
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g4 = fix.iterator();
					while(_g4.head != null) {
						var val = _g4.head.item;
						_g4.head = _g4.head.next;
						switch(val._hx_index) {
						case 0:
							buf.b += ".";
							break;
						case 1:
							buf.b += "F";
							messages += this.indents(2) + "line: " + val.pos.lineNumber + ", " + val.msg + this.newline;
							break;
						case 2:
							buf.b += "E";
							messages += this.indents(2) + Std.string(val.e) + this.dumpStack(val.stack) + this.newline;
							break;
						case 3:
							buf.b += "S";
							messages += this.indents(2) + Std.string(val.e) + this.dumpStack(val.stack) + this.newline;
							break;
						case 4:
							buf.b += "T";
							messages += this.indents(2) + Std.string(val.e) + this.dumpStack(val.stack) + this.newline;
							break;
						case 5:
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + val.missedAsyncs + this.dumpStack(val.stack) + this.newline;
							break;
						case 6:
							buf.b += "A";
							messages += this.indents(2) + Std.string(val.e) + this.dumpStack(val.stack) + this.newline;
							break;
						case 7:
							buf.b += "W";
							messages += this.indents(2) + val.msg + this.newline;
							break;
						case 8:
							var _g6 = val.reason;
							buf.b += "I";
							if(_g6 != null && _g6 != "") {
								messages += this.indents(2) + ("With reason: " + _g6) + this.newline;
							}
							break;
						}
					}
					buf.b = (buf.b += Std.string(this.newline)) + (messages == null ? "null" : "" + messages);
				}
			}
		}
		return buf.b;
	}
	,complete: function(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		if(typeof phantom != "undefined") {
			phantom.exit(result.stats.isOk ? 0 : 1);
		}
		if(typeof process != "undefined") {
			process.exit(result.stats.isOk ? 0 : 1);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
var utest_utils_AccessoriesUtils = function() { };
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
utest_utils_AccessoriesUtils.getSetupClass = function(accessories) {
	if(accessories.setupClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setupClass;
	}
};
utest_utils_AccessoriesUtils.getSetup = function(accessories) {
	if(accessories.setup == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setup;
	}
};
utest_utils_AccessoriesUtils.getTeardown = function(accessories) {
	if(accessories.teardown == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardown;
	}
};
utest_utils_AccessoriesUtils.getTeardownClass = function(accessories) {
	if(accessories.teardownClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardownClass;
	}
};
var utest_utils_AsyncUtils = function() { };
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
utest_utils_AsyncUtils.orResolved = function(async) {
	if(async == null) {
		return utest_Async.getResolved();
	} else {
		return async;
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Diactrics.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved[" "] != null) {
		_g.setReserved(" "," ");
	} else {
		_g.h[" "] = " ";
	}
	if(__map_reserved["A"] != null) {
		_g.setReserved("A","A");
	} else {
		_g.h["A"] = "A";
	}
	if(__map_reserved["Ⓐ"] != null) {
		_g.setReserved("Ⓐ","A");
	} else {
		_g.h["Ⓐ"] = "A";
	}
	if(__map_reserved["Ａ"] != null) {
		_g.setReserved("Ａ","A");
	} else {
		_g.h["Ａ"] = "A";
	}
	if(__map_reserved["À"] != null) {
		_g.setReserved("À","A");
	} else {
		_g.h["À"] = "A";
	}
	if(__map_reserved["Á"] != null) {
		_g.setReserved("Á","A");
	} else {
		_g.h["Á"] = "A";
	}
	if(__map_reserved["Â"] != null) {
		_g.setReserved("Â","A");
	} else {
		_g.h["Â"] = "A";
	}
	if(__map_reserved["Ầ"] != null) {
		_g.setReserved("Ầ","A");
	} else {
		_g.h["Ầ"] = "A";
	}
	if(__map_reserved["Ấ"] != null) {
		_g.setReserved("Ấ","A");
	} else {
		_g.h["Ấ"] = "A";
	}
	if(__map_reserved["Ẫ"] != null) {
		_g.setReserved("Ẫ","A");
	} else {
		_g.h["Ẫ"] = "A";
	}
	if(__map_reserved["Ẩ"] != null) {
		_g.setReserved("Ẩ","A");
	} else {
		_g.h["Ẩ"] = "A";
	}
	if(__map_reserved["Ã"] != null) {
		_g.setReserved("Ã","A");
	} else {
		_g.h["Ã"] = "A";
	}
	if(__map_reserved["Ā"] != null) {
		_g.setReserved("Ā","A");
	} else {
		_g.h["Ā"] = "A";
	}
	if(__map_reserved["Ă"] != null) {
		_g.setReserved("Ă","A");
	} else {
		_g.h["Ă"] = "A";
	}
	if(__map_reserved["Ằ"] != null) {
		_g.setReserved("Ằ","A");
	} else {
		_g.h["Ằ"] = "A";
	}
	if(__map_reserved["Ắ"] != null) {
		_g.setReserved("Ắ","A");
	} else {
		_g.h["Ắ"] = "A";
	}
	if(__map_reserved["Ẵ"] != null) {
		_g.setReserved("Ẵ","A");
	} else {
		_g.h["Ẵ"] = "A";
	}
	if(__map_reserved["Ẳ"] != null) {
		_g.setReserved("Ẳ","A");
	} else {
		_g.h["Ẳ"] = "A";
	}
	if(__map_reserved["Ȧ"] != null) {
		_g.setReserved("Ȧ","A");
	} else {
		_g.h["Ȧ"] = "A";
	}
	if(__map_reserved["Ǡ"] != null) {
		_g.setReserved("Ǡ","A");
	} else {
		_g.h["Ǡ"] = "A";
	}
	if(__map_reserved["Ä"] != null) {
		_g.setReserved("Ä","A");
	} else {
		_g.h["Ä"] = "A";
	}
	if(__map_reserved["Ǟ"] != null) {
		_g.setReserved("Ǟ","A");
	} else {
		_g.h["Ǟ"] = "A";
	}
	if(__map_reserved["Ả"] != null) {
		_g.setReserved("Ả","A");
	} else {
		_g.h["Ả"] = "A";
	}
	if(__map_reserved["Å"] != null) {
		_g.setReserved("Å","A");
	} else {
		_g.h["Å"] = "A";
	}
	if(__map_reserved["Ǻ"] != null) {
		_g.setReserved("Ǻ","A");
	} else {
		_g.h["Ǻ"] = "A";
	}
	if(__map_reserved["Ǎ"] != null) {
		_g.setReserved("Ǎ","A");
	} else {
		_g.h["Ǎ"] = "A";
	}
	if(__map_reserved["Ȁ"] != null) {
		_g.setReserved("Ȁ","A");
	} else {
		_g.h["Ȁ"] = "A";
	}
	if(__map_reserved["Ȃ"] != null) {
		_g.setReserved("Ȃ","A");
	} else {
		_g.h["Ȃ"] = "A";
	}
	if(__map_reserved["Ạ"] != null) {
		_g.setReserved("Ạ","A");
	} else {
		_g.h["Ạ"] = "A";
	}
	if(__map_reserved["Ậ"] != null) {
		_g.setReserved("Ậ","A");
	} else {
		_g.h["Ậ"] = "A";
	}
	if(__map_reserved["Ặ"] != null) {
		_g.setReserved("Ặ","A");
	} else {
		_g.h["Ặ"] = "A";
	}
	if(__map_reserved["Ḁ"] != null) {
		_g.setReserved("Ḁ","A");
	} else {
		_g.h["Ḁ"] = "A";
	}
	if(__map_reserved["Ą"] != null) {
		_g.setReserved("Ą","A");
	} else {
		_g.h["Ą"] = "A";
	}
	if(__map_reserved["Ⱥ"] != null) {
		_g.setReserved("Ⱥ","A");
	} else {
		_g.h["Ⱥ"] = "A";
	}
	if(__map_reserved["Ɐ"] != null) {
		_g.setReserved("Ɐ","A");
	} else {
		_g.h["Ɐ"] = "A";
	}
	if(__map_reserved["Ꜳ"] != null) {
		_g.setReserved("Ꜳ","AA");
	} else {
		_g.h["Ꜳ"] = "AA";
	}
	if(__map_reserved["Æ"] != null) {
		_g.setReserved("Æ","AE");
	} else {
		_g.h["Æ"] = "AE";
	}
	if(__map_reserved["Ǽ"] != null) {
		_g.setReserved("Ǽ","AE");
	} else {
		_g.h["Ǽ"] = "AE";
	}
	if(__map_reserved["Ǣ"] != null) {
		_g.setReserved("Ǣ","AE");
	} else {
		_g.h["Ǣ"] = "AE";
	}
	if(__map_reserved["Ꜵ"] != null) {
		_g.setReserved("Ꜵ","AO");
	} else {
		_g.h["Ꜵ"] = "AO";
	}
	if(__map_reserved["Ꜷ"] != null) {
		_g.setReserved("Ꜷ","AU");
	} else {
		_g.h["Ꜷ"] = "AU";
	}
	if(__map_reserved["Ꜹ"] != null) {
		_g.setReserved("Ꜹ","AV");
	} else {
		_g.h["Ꜹ"] = "AV";
	}
	if(__map_reserved["Ꜻ"] != null) {
		_g.setReserved("Ꜻ","AV");
	} else {
		_g.h["Ꜻ"] = "AV";
	}
	if(__map_reserved["Ꜽ"] != null) {
		_g.setReserved("Ꜽ","AY");
	} else {
		_g.h["Ꜽ"] = "AY";
	}
	if(__map_reserved["B"] != null) {
		_g.setReserved("B","B");
	} else {
		_g.h["B"] = "B";
	}
	if(__map_reserved["Ⓑ"] != null) {
		_g.setReserved("Ⓑ","B");
	} else {
		_g.h["Ⓑ"] = "B";
	}
	if(__map_reserved["Ｂ"] != null) {
		_g.setReserved("Ｂ","B");
	} else {
		_g.h["Ｂ"] = "B";
	}
	if(__map_reserved["Ḃ"] != null) {
		_g.setReserved("Ḃ","B");
	} else {
		_g.h["Ḃ"] = "B";
	}
	if(__map_reserved["Ḅ"] != null) {
		_g.setReserved("Ḅ","B");
	} else {
		_g.h["Ḅ"] = "B";
	}
	if(__map_reserved["Ḇ"] != null) {
		_g.setReserved("Ḇ","B");
	} else {
		_g.h["Ḇ"] = "B";
	}
	if(__map_reserved["Ƀ"] != null) {
		_g.setReserved("Ƀ","B");
	} else {
		_g.h["Ƀ"] = "B";
	}
	if(__map_reserved["Ƃ"] != null) {
		_g.setReserved("Ƃ","B");
	} else {
		_g.h["Ƃ"] = "B";
	}
	if(__map_reserved["Ɓ"] != null) {
		_g.setReserved("Ɓ","B");
	} else {
		_g.h["Ɓ"] = "B";
	}
	if(__map_reserved["C"] != null) {
		_g.setReserved("C","C");
	} else {
		_g.h["C"] = "C";
	}
	if(__map_reserved["Ⓒ"] != null) {
		_g.setReserved("Ⓒ","C");
	} else {
		_g.h["Ⓒ"] = "C";
	}
	if(__map_reserved["Ｃ"] != null) {
		_g.setReserved("Ｃ","C");
	} else {
		_g.h["Ｃ"] = "C";
	}
	if(__map_reserved["Ć"] != null) {
		_g.setReserved("Ć","C");
	} else {
		_g.h["Ć"] = "C";
	}
	if(__map_reserved["Ĉ"] != null) {
		_g.setReserved("Ĉ","C");
	} else {
		_g.h["Ĉ"] = "C";
	}
	if(__map_reserved["Ċ"] != null) {
		_g.setReserved("Ċ","C");
	} else {
		_g.h["Ċ"] = "C";
	}
	if(__map_reserved["Č"] != null) {
		_g.setReserved("Č","C");
	} else {
		_g.h["Č"] = "C";
	}
	if(__map_reserved["Ç"] != null) {
		_g.setReserved("Ç","C");
	} else {
		_g.h["Ç"] = "C";
	}
	if(__map_reserved["Ḉ"] != null) {
		_g.setReserved("Ḉ","C");
	} else {
		_g.h["Ḉ"] = "C";
	}
	if(__map_reserved["Ƈ"] != null) {
		_g.setReserved("Ƈ","C");
	} else {
		_g.h["Ƈ"] = "C";
	}
	if(__map_reserved["Ȼ"] != null) {
		_g.setReserved("Ȼ","C");
	} else {
		_g.h["Ȼ"] = "C";
	}
	if(__map_reserved["Ꜿ"] != null) {
		_g.setReserved("Ꜿ","C");
	} else {
		_g.h["Ꜿ"] = "C";
	}
	if(__map_reserved["D"] != null) {
		_g.setReserved("D","D");
	} else {
		_g.h["D"] = "D";
	}
	if(__map_reserved["Ⓓ"] != null) {
		_g.setReserved("Ⓓ","D");
	} else {
		_g.h["Ⓓ"] = "D";
	}
	if(__map_reserved["Ｄ"] != null) {
		_g.setReserved("Ｄ","D");
	} else {
		_g.h["Ｄ"] = "D";
	}
	if(__map_reserved["Ḋ"] != null) {
		_g.setReserved("Ḋ","D");
	} else {
		_g.h["Ḋ"] = "D";
	}
	if(__map_reserved["Ď"] != null) {
		_g.setReserved("Ď","D");
	} else {
		_g.h["Ď"] = "D";
	}
	if(__map_reserved["Ḍ"] != null) {
		_g.setReserved("Ḍ","D");
	} else {
		_g.h["Ḍ"] = "D";
	}
	if(__map_reserved["Ḑ"] != null) {
		_g.setReserved("Ḑ","D");
	} else {
		_g.h["Ḑ"] = "D";
	}
	if(__map_reserved["Ḓ"] != null) {
		_g.setReserved("Ḓ","D");
	} else {
		_g.h["Ḓ"] = "D";
	}
	if(__map_reserved["Ḏ"] != null) {
		_g.setReserved("Ḏ","D");
	} else {
		_g.h["Ḏ"] = "D";
	}
	if(__map_reserved["Đ"] != null) {
		_g.setReserved("Đ","D");
	} else {
		_g.h["Đ"] = "D";
	}
	if(__map_reserved["Ƌ"] != null) {
		_g.setReserved("Ƌ","D");
	} else {
		_g.h["Ƌ"] = "D";
	}
	if(__map_reserved["Ɗ"] != null) {
		_g.setReserved("Ɗ","D");
	} else {
		_g.h["Ɗ"] = "D";
	}
	if(__map_reserved["Ɖ"] != null) {
		_g.setReserved("Ɖ","D");
	} else {
		_g.h["Ɖ"] = "D";
	}
	if(__map_reserved["Ꝺ"] != null) {
		_g.setReserved("Ꝺ","D");
	} else {
		_g.h["Ꝺ"] = "D";
	}
	if(__map_reserved["Ǳ"] != null) {
		_g.setReserved("Ǳ","DZ");
	} else {
		_g.h["Ǳ"] = "DZ";
	}
	if(__map_reserved["Ǆ"] != null) {
		_g.setReserved("Ǆ","DZ");
	} else {
		_g.h["Ǆ"] = "DZ";
	}
	if(__map_reserved["ǲ"] != null) {
		_g.setReserved("ǲ","Dz");
	} else {
		_g.h["ǲ"] = "Dz";
	}
	if(__map_reserved["ǅ"] != null) {
		_g.setReserved("ǅ","Dz");
	} else {
		_g.h["ǅ"] = "Dz";
	}
	if(__map_reserved["E"] != null) {
		_g.setReserved("E","E");
	} else {
		_g.h["E"] = "E";
	}
	if(__map_reserved["Ⓔ"] != null) {
		_g.setReserved("Ⓔ","E");
	} else {
		_g.h["Ⓔ"] = "E";
	}
	if(__map_reserved["Ｅ"] != null) {
		_g.setReserved("Ｅ","E");
	} else {
		_g.h["Ｅ"] = "E";
	}
	if(__map_reserved["È"] != null) {
		_g.setReserved("È","E");
	} else {
		_g.h["È"] = "E";
	}
	if(__map_reserved["É"] != null) {
		_g.setReserved("É","E");
	} else {
		_g.h["É"] = "E";
	}
	if(__map_reserved["Ê"] != null) {
		_g.setReserved("Ê","E");
	} else {
		_g.h["Ê"] = "E";
	}
	if(__map_reserved["Ề"] != null) {
		_g.setReserved("Ề","E");
	} else {
		_g.h["Ề"] = "E";
	}
	if(__map_reserved["Ế"] != null) {
		_g.setReserved("Ế","E");
	} else {
		_g.h["Ế"] = "E";
	}
	if(__map_reserved["Ễ"] != null) {
		_g.setReserved("Ễ","E");
	} else {
		_g.h["Ễ"] = "E";
	}
	if(__map_reserved["Ể"] != null) {
		_g.setReserved("Ể","E");
	} else {
		_g.h["Ể"] = "E";
	}
	if(__map_reserved["Ẽ"] != null) {
		_g.setReserved("Ẽ","E");
	} else {
		_g.h["Ẽ"] = "E";
	}
	if(__map_reserved["Ē"] != null) {
		_g.setReserved("Ē","E");
	} else {
		_g.h["Ē"] = "E";
	}
	if(__map_reserved["Ḕ"] != null) {
		_g.setReserved("Ḕ","E");
	} else {
		_g.h["Ḕ"] = "E";
	}
	if(__map_reserved["Ḗ"] != null) {
		_g.setReserved("Ḗ","E");
	} else {
		_g.h["Ḗ"] = "E";
	}
	if(__map_reserved["Ĕ"] != null) {
		_g.setReserved("Ĕ","E");
	} else {
		_g.h["Ĕ"] = "E";
	}
	if(__map_reserved["Ė"] != null) {
		_g.setReserved("Ė","E");
	} else {
		_g.h["Ė"] = "E";
	}
	if(__map_reserved["Ë"] != null) {
		_g.setReserved("Ë","E");
	} else {
		_g.h["Ë"] = "E";
	}
	if(__map_reserved["Ẻ"] != null) {
		_g.setReserved("Ẻ","E");
	} else {
		_g.h["Ẻ"] = "E";
	}
	if(__map_reserved["Ě"] != null) {
		_g.setReserved("Ě","E");
	} else {
		_g.h["Ě"] = "E";
	}
	if(__map_reserved["Ȅ"] != null) {
		_g.setReserved("Ȅ","E");
	} else {
		_g.h["Ȅ"] = "E";
	}
	if(__map_reserved["Ȇ"] != null) {
		_g.setReserved("Ȇ","E");
	} else {
		_g.h["Ȇ"] = "E";
	}
	if(__map_reserved["Ẹ"] != null) {
		_g.setReserved("Ẹ","E");
	} else {
		_g.h["Ẹ"] = "E";
	}
	if(__map_reserved["Ệ"] != null) {
		_g.setReserved("Ệ","E");
	} else {
		_g.h["Ệ"] = "E";
	}
	if(__map_reserved["Ȩ"] != null) {
		_g.setReserved("Ȩ","E");
	} else {
		_g.h["Ȩ"] = "E";
	}
	if(__map_reserved["Ḝ"] != null) {
		_g.setReserved("Ḝ","E");
	} else {
		_g.h["Ḝ"] = "E";
	}
	if(__map_reserved["Ę"] != null) {
		_g.setReserved("Ę","E");
	} else {
		_g.h["Ę"] = "E";
	}
	if(__map_reserved["Ḙ"] != null) {
		_g.setReserved("Ḙ","E");
	} else {
		_g.h["Ḙ"] = "E";
	}
	if(__map_reserved["Ḛ"] != null) {
		_g.setReserved("Ḛ","E");
	} else {
		_g.h["Ḛ"] = "E";
	}
	if(__map_reserved["Ɛ"] != null) {
		_g.setReserved("Ɛ","E");
	} else {
		_g.h["Ɛ"] = "E";
	}
	if(__map_reserved["Ǝ"] != null) {
		_g.setReserved("Ǝ","E");
	} else {
		_g.h["Ǝ"] = "E";
	}
	if(__map_reserved["F"] != null) {
		_g.setReserved("F","F");
	} else {
		_g.h["F"] = "F";
	}
	if(__map_reserved["Ⓕ"] != null) {
		_g.setReserved("Ⓕ","F");
	} else {
		_g.h["Ⓕ"] = "F";
	}
	if(__map_reserved["Ｆ"] != null) {
		_g.setReserved("Ｆ","F");
	} else {
		_g.h["Ｆ"] = "F";
	}
	if(__map_reserved["Ḟ"] != null) {
		_g.setReserved("Ḟ","F");
	} else {
		_g.h["Ḟ"] = "F";
	}
	if(__map_reserved["Ƒ"] != null) {
		_g.setReserved("Ƒ","F");
	} else {
		_g.h["Ƒ"] = "F";
	}
	if(__map_reserved["Ꝼ"] != null) {
		_g.setReserved("Ꝼ","F");
	} else {
		_g.h["Ꝼ"] = "F";
	}
	if(__map_reserved["G"] != null) {
		_g.setReserved("G","G");
	} else {
		_g.h["G"] = "G";
	}
	if(__map_reserved["Ⓖ"] != null) {
		_g.setReserved("Ⓖ","G");
	} else {
		_g.h["Ⓖ"] = "G";
	}
	if(__map_reserved["Ｇ"] != null) {
		_g.setReserved("Ｇ","G");
	} else {
		_g.h["Ｇ"] = "G";
	}
	if(__map_reserved["Ǵ"] != null) {
		_g.setReserved("Ǵ","G");
	} else {
		_g.h["Ǵ"] = "G";
	}
	if(__map_reserved["Ĝ"] != null) {
		_g.setReserved("Ĝ","G");
	} else {
		_g.h["Ĝ"] = "G";
	}
	if(__map_reserved["Ḡ"] != null) {
		_g.setReserved("Ḡ","G");
	} else {
		_g.h["Ḡ"] = "G";
	}
	if(__map_reserved["Ğ"] != null) {
		_g.setReserved("Ğ","G");
	} else {
		_g.h["Ğ"] = "G";
	}
	if(__map_reserved["Ġ"] != null) {
		_g.setReserved("Ġ","G");
	} else {
		_g.h["Ġ"] = "G";
	}
	if(__map_reserved["Ǧ"] != null) {
		_g.setReserved("Ǧ","G");
	} else {
		_g.h["Ǧ"] = "G";
	}
	if(__map_reserved["Ģ"] != null) {
		_g.setReserved("Ģ","G");
	} else {
		_g.h["Ģ"] = "G";
	}
	if(__map_reserved["Ǥ"] != null) {
		_g.setReserved("Ǥ","G");
	} else {
		_g.h["Ǥ"] = "G";
	}
	if(__map_reserved["Ɠ"] != null) {
		_g.setReserved("Ɠ","G");
	} else {
		_g.h["Ɠ"] = "G";
	}
	if(__map_reserved["Ꞡ"] != null) {
		_g.setReserved("Ꞡ","G");
	} else {
		_g.h["Ꞡ"] = "G";
	}
	if(__map_reserved["Ᵹ"] != null) {
		_g.setReserved("Ᵹ","G");
	} else {
		_g.h["Ᵹ"] = "G";
	}
	if(__map_reserved["Ꝿ"] != null) {
		_g.setReserved("Ꝿ","G");
	} else {
		_g.h["Ꝿ"] = "G";
	}
	if(__map_reserved["H"] != null) {
		_g.setReserved("H","H");
	} else {
		_g.h["H"] = "H";
	}
	if(__map_reserved["Ⓗ"] != null) {
		_g.setReserved("Ⓗ","H");
	} else {
		_g.h["Ⓗ"] = "H";
	}
	if(__map_reserved["Ｈ"] != null) {
		_g.setReserved("Ｈ","H");
	} else {
		_g.h["Ｈ"] = "H";
	}
	if(__map_reserved["Ĥ"] != null) {
		_g.setReserved("Ĥ","H");
	} else {
		_g.h["Ĥ"] = "H";
	}
	if(__map_reserved["Ḣ"] != null) {
		_g.setReserved("Ḣ","H");
	} else {
		_g.h["Ḣ"] = "H";
	}
	if(__map_reserved["Ḧ"] != null) {
		_g.setReserved("Ḧ","H");
	} else {
		_g.h["Ḧ"] = "H";
	}
	if(__map_reserved["Ȟ"] != null) {
		_g.setReserved("Ȟ","H");
	} else {
		_g.h["Ȟ"] = "H";
	}
	if(__map_reserved["Ḥ"] != null) {
		_g.setReserved("Ḥ","H");
	} else {
		_g.h["Ḥ"] = "H";
	}
	if(__map_reserved["Ḩ"] != null) {
		_g.setReserved("Ḩ","H");
	} else {
		_g.h["Ḩ"] = "H";
	}
	if(__map_reserved["Ḫ"] != null) {
		_g.setReserved("Ḫ","H");
	} else {
		_g.h["Ḫ"] = "H";
	}
	if(__map_reserved["Ħ"] != null) {
		_g.setReserved("Ħ","H");
	} else {
		_g.h["Ħ"] = "H";
	}
	if(__map_reserved["Ⱨ"] != null) {
		_g.setReserved("Ⱨ","H");
	} else {
		_g.h["Ⱨ"] = "H";
	}
	if(__map_reserved["Ⱶ"] != null) {
		_g.setReserved("Ⱶ","H");
	} else {
		_g.h["Ⱶ"] = "H";
	}
	if(__map_reserved["Ɥ"] != null) {
		_g.setReserved("Ɥ","H");
	} else {
		_g.h["Ɥ"] = "H";
	}
	if(__map_reserved["I"] != null) {
		_g.setReserved("I","I");
	} else {
		_g.h["I"] = "I";
	}
	if(__map_reserved["Ⓘ"] != null) {
		_g.setReserved("Ⓘ","I");
	} else {
		_g.h["Ⓘ"] = "I";
	}
	if(__map_reserved["Ｉ"] != null) {
		_g.setReserved("Ｉ","I");
	} else {
		_g.h["Ｉ"] = "I";
	}
	if(__map_reserved["Ì"] != null) {
		_g.setReserved("Ì","I");
	} else {
		_g.h["Ì"] = "I";
	}
	if(__map_reserved["Í"] != null) {
		_g.setReserved("Í","I");
	} else {
		_g.h["Í"] = "I";
	}
	if(__map_reserved["Î"] != null) {
		_g.setReserved("Î","I");
	} else {
		_g.h["Î"] = "I";
	}
	if(__map_reserved["Ĩ"] != null) {
		_g.setReserved("Ĩ","I");
	} else {
		_g.h["Ĩ"] = "I";
	}
	if(__map_reserved["Ī"] != null) {
		_g.setReserved("Ī","I");
	} else {
		_g.h["Ī"] = "I";
	}
	if(__map_reserved["Ĭ"] != null) {
		_g.setReserved("Ĭ","I");
	} else {
		_g.h["Ĭ"] = "I";
	}
	if(__map_reserved["İ"] != null) {
		_g.setReserved("İ","I");
	} else {
		_g.h["İ"] = "I";
	}
	if(__map_reserved["Ï"] != null) {
		_g.setReserved("Ï","I");
	} else {
		_g.h["Ï"] = "I";
	}
	if(__map_reserved["Ḯ"] != null) {
		_g.setReserved("Ḯ","I");
	} else {
		_g.h["Ḯ"] = "I";
	}
	if(__map_reserved["Ỉ"] != null) {
		_g.setReserved("Ỉ","I");
	} else {
		_g.h["Ỉ"] = "I";
	}
	if(__map_reserved["Ǐ"] != null) {
		_g.setReserved("Ǐ","I");
	} else {
		_g.h["Ǐ"] = "I";
	}
	if(__map_reserved["Ȉ"] != null) {
		_g.setReserved("Ȉ","I");
	} else {
		_g.h["Ȉ"] = "I";
	}
	if(__map_reserved["Ȋ"] != null) {
		_g.setReserved("Ȋ","I");
	} else {
		_g.h["Ȋ"] = "I";
	}
	if(__map_reserved["Ị"] != null) {
		_g.setReserved("Ị","I");
	} else {
		_g.h["Ị"] = "I";
	}
	if(__map_reserved["Į"] != null) {
		_g.setReserved("Į","I");
	} else {
		_g.h["Į"] = "I";
	}
	if(__map_reserved["Ḭ"] != null) {
		_g.setReserved("Ḭ","I");
	} else {
		_g.h["Ḭ"] = "I";
	}
	if(__map_reserved["Ɨ"] != null) {
		_g.setReserved("Ɨ","I");
	} else {
		_g.h["Ɨ"] = "I";
	}
	if(__map_reserved["J"] != null) {
		_g.setReserved("J","J");
	} else {
		_g.h["J"] = "J";
	}
	if(__map_reserved["Ⓙ"] != null) {
		_g.setReserved("Ⓙ","J");
	} else {
		_g.h["Ⓙ"] = "J";
	}
	if(__map_reserved["Ｊ"] != null) {
		_g.setReserved("Ｊ","J");
	} else {
		_g.h["Ｊ"] = "J";
	}
	if(__map_reserved["Ĵ"] != null) {
		_g.setReserved("Ĵ","J");
	} else {
		_g.h["Ĵ"] = "J";
	}
	if(__map_reserved["Ɉ"] != null) {
		_g.setReserved("Ɉ","J");
	} else {
		_g.h["Ɉ"] = "J";
	}
	if(__map_reserved["K"] != null) {
		_g.setReserved("K","K");
	} else {
		_g.h["K"] = "K";
	}
	if(__map_reserved["Ⓚ"] != null) {
		_g.setReserved("Ⓚ","K");
	} else {
		_g.h["Ⓚ"] = "K";
	}
	if(__map_reserved["Ｋ"] != null) {
		_g.setReserved("Ｋ","K");
	} else {
		_g.h["Ｋ"] = "K";
	}
	if(__map_reserved["Ḱ"] != null) {
		_g.setReserved("Ḱ","K");
	} else {
		_g.h["Ḱ"] = "K";
	}
	if(__map_reserved["Ǩ"] != null) {
		_g.setReserved("Ǩ","K");
	} else {
		_g.h["Ǩ"] = "K";
	}
	if(__map_reserved["Ḳ"] != null) {
		_g.setReserved("Ḳ","K");
	} else {
		_g.h["Ḳ"] = "K";
	}
	if(__map_reserved["Ķ"] != null) {
		_g.setReserved("Ķ","K");
	} else {
		_g.h["Ķ"] = "K";
	}
	if(__map_reserved["Ḵ"] != null) {
		_g.setReserved("Ḵ","K");
	} else {
		_g.h["Ḵ"] = "K";
	}
	if(__map_reserved["Ƙ"] != null) {
		_g.setReserved("Ƙ","K");
	} else {
		_g.h["Ƙ"] = "K";
	}
	if(__map_reserved["Ⱪ"] != null) {
		_g.setReserved("Ⱪ","K");
	} else {
		_g.h["Ⱪ"] = "K";
	}
	if(__map_reserved["Ꝁ"] != null) {
		_g.setReserved("Ꝁ","K");
	} else {
		_g.h["Ꝁ"] = "K";
	}
	if(__map_reserved["Ꝃ"] != null) {
		_g.setReserved("Ꝃ","K");
	} else {
		_g.h["Ꝃ"] = "K";
	}
	if(__map_reserved["Ꝅ"] != null) {
		_g.setReserved("Ꝅ","K");
	} else {
		_g.h["Ꝅ"] = "K";
	}
	if(__map_reserved["Ꞣ"] != null) {
		_g.setReserved("Ꞣ","K");
	} else {
		_g.h["Ꞣ"] = "K";
	}
	if(__map_reserved["L"] != null) {
		_g.setReserved("L","L");
	} else {
		_g.h["L"] = "L";
	}
	if(__map_reserved["Ⓛ"] != null) {
		_g.setReserved("Ⓛ","L");
	} else {
		_g.h["Ⓛ"] = "L";
	}
	if(__map_reserved["Ｌ"] != null) {
		_g.setReserved("Ｌ","L");
	} else {
		_g.h["Ｌ"] = "L";
	}
	if(__map_reserved["Ŀ"] != null) {
		_g.setReserved("Ŀ","L");
	} else {
		_g.h["Ŀ"] = "L";
	}
	if(__map_reserved["Ĺ"] != null) {
		_g.setReserved("Ĺ","L");
	} else {
		_g.h["Ĺ"] = "L";
	}
	if(__map_reserved["Ľ"] != null) {
		_g.setReserved("Ľ","L");
	} else {
		_g.h["Ľ"] = "L";
	}
	if(__map_reserved["Ḷ"] != null) {
		_g.setReserved("Ḷ","L");
	} else {
		_g.h["Ḷ"] = "L";
	}
	if(__map_reserved["Ḹ"] != null) {
		_g.setReserved("Ḹ","L");
	} else {
		_g.h["Ḹ"] = "L";
	}
	if(__map_reserved["Ļ"] != null) {
		_g.setReserved("Ļ","L");
	} else {
		_g.h["Ļ"] = "L";
	}
	if(__map_reserved["Ḽ"] != null) {
		_g.setReserved("Ḽ","L");
	} else {
		_g.h["Ḽ"] = "L";
	}
	if(__map_reserved["Ḻ"] != null) {
		_g.setReserved("Ḻ","L");
	} else {
		_g.h["Ḻ"] = "L";
	}
	if(__map_reserved["Ł"] != null) {
		_g.setReserved("Ł","L");
	} else {
		_g.h["Ł"] = "L";
	}
	if(__map_reserved["Ƚ"] != null) {
		_g.setReserved("Ƚ","L");
	} else {
		_g.h["Ƚ"] = "L";
	}
	if(__map_reserved["Ɫ"] != null) {
		_g.setReserved("Ɫ","L");
	} else {
		_g.h["Ɫ"] = "L";
	}
	if(__map_reserved["Ⱡ"] != null) {
		_g.setReserved("Ⱡ","L");
	} else {
		_g.h["Ⱡ"] = "L";
	}
	if(__map_reserved["Ꝉ"] != null) {
		_g.setReserved("Ꝉ","L");
	} else {
		_g.h["Ꝉ"] = "L";
	}
	if(__map_reserved["Ꝇ"] != null) {
		_g.setReserved("Ꝇ","L");
	} else {
		_g.h["Ꝇ"] = "L";
	}
	if(__map_reserved["Ꞁ"] != null) {
		_g.setReserved("Ꞁ","L");
	} else {
		_g.h["Ꞁ"] = "L";
	}
	if(__map_reserved["Ǉ"] != null) {
		_g.setReserved("Ǉ","LJ");
	} else {
		_g.h["Ǉ"] = "LJ";
	}
	if(__map_reserved["ǈ"] != null) {
		_g.setReserved("ǈ","Lj");
	} else {
		_g.h["ǈ"] = "Lj";
	}
	if(__map_reserved["M"] != null) {
		_g.setReserved("M","M");
	} else {
		_g.h["M"] = "M";
	}
	if(__map_reserved["Ⓜ"] != null) {
		_g.setReserved("Ⓜ","M");
	} else {
		_g.h["Ⓜ"] = "M";
	}
	if(__map_reserved["Ｍ"] != null) {
		_g.setReserved("Ｍ","M");
	} else {
		_g.h["Ｍ"] = "M";
	}
	if(__map_reserved["Ḿ"] != null) {
		_g.setReserved("Ḿ","M");
	} else {
		_g.h["Ḿ"] = "M";
	}
	if(__map_reserved["Ṁ"] != null) {
		_g.setReserved("Ṁ","M");
	} else {
		_g.h["Ṁ"] = "M";
	}
	if(__map_reserved["Ṃ"] != null) {
		_g.setReserved("Ṃ","M");
	} else {
		_g.h["Ṃ"] = "M";
	}
	if(__map_reserved["Ɱ"] != null) {
		_g.setReserved("Ɱ","M");
	} else {
		_g.h["Ɱ"] = "M";
	}
	if(__map_reserved["Ɯ"] != null) {
		_g.setReserved("Ɯ","M");
	} else {
		_g.h["Ɯ"] = "M";
	}
	if(__map_reserved["N"] != null) {
		_g.setReserved("N","N");
	} else {
		_g.h["N"] = "N";
	}
	if(__map_reserved["Ⓝ"] != null) {
		_g.setReserved("Ⓝ","N");
	} else {
		_g.h["Ⓝ"] = "N";
	}
	if(__map_reserved["Ｎ"] != null) {
		_g.setReserved("Ｎ","N");
	} else {
		_g.h["Ｎ"] = "N";
	}
	if(__map_reserved["Ǹ"] != null) {
		_g.setReserved("Ǹ","N");
	} else {
		_g.h["Ǹ"] = "N";
	}
	if(__map_reserved["Ń"] != null) {
		_g.setReserved("Ń","N");
	} else {
		_g.h["Ń"] = "N";
	}
	if(__map_reserved["Ñ"] != null) {
		_g.setReserved("Ñ","N");
	} else {
		_g.h["Ñ"] = "N";
	}
	if(__map_reserved["Ṅ"] != null) {
		_g.setReserved("Ṅ","N");
	} else {
		_g.h["Ṅ"] = "N";
	}
	if(__map_reserved["Ň"] != null) {
		_g.setReserved("Ň","N");
	} else {
		_g.h["Ň"] = "N";
	}
	if(__map_reserved["Ṇ"] != null) {
		_g.setReserved("Ṇ","N");
	} else {
		_g.h["Ṇ"] = "N";
	}
	if(__map_reserved["Ņ"] != null) {
		_g.setReserved("Ņ","N");
	} else {
		_g.h["Ņ"] = "N";
	}
	if(__map_reserved["Ṋ"] != null) {
		_g.setReserved("Ṋ","N");
	} else {
		_g.h["Ṋ"] = "N";
	}
	if(__map_reserved["Ṉ"] != null) {
		_g.setReserved("Ṉ","N");
	} else {
		_g.h["Ṉ"] = "N";
	}
	if(__map_reserved["Ƞ"] != null) {
		_g.setReserved("Ƞ","N");
	} else {
		_g.h["Ƞ"] = "N";
	}
	if(__map_reserved["Ɲ"] != null) {
		_g.setReserved("Ɲ","N");
	} else {
		_g.h["Ɲ"] = "N";
	}
	if(__map_reserved["Ꞑ"] != null) {
		_g.setReserved("Ꞑ","N");
	} else {
		_g.h["Ꞑ"] = "N";
	}
	if(__map_reserved["Ꞥ"] != null) {
		_g.setReserved("Ꞥ","N");
	} else {
		_g.h["Ꞥ"] = "N";
	}
	if(__map_reserved["Ǌ"] != null) {
		_g.setReserved("Ǌ","NJ");
	} else {
		_g.h["Ǌ"] = "NJ";
	}
	if(__map_reserved["ǋ"] != null) {
		_g.setReserved("ǋ","Nj");
	} else {
		_g.h["ǋ"] = "Nj";
	}
	if(__map_reserved["O"] != null) {
		_g.setReserved("O","O");
	} else {
		_g.h["O"] = "O";
	}
	if(__map_reserved["Ⓞ"] != null) {
		_g.setReserved("Ⓞ","O");
	} else {
		_g.h["Ⓞ"] = "O";
	}
	if(__map_reserved["Ｏ"] != null) {
		_g.setReserved("Ｏ","O");
	} else {
		_g.h["Ｏ"] = "O";
	}
	if(__map_reserved["Ò"] != null) {
		_g.setReserved("Ò","O");
	} else {
		_g.h["Ò"] = "O";
	}
	if(__map_reserved["Ó"] != null) {
		_g.setReserved("Ó","O");
	} else {
		_g.h["Ó"] = "O";
	}
	if(__map_reserved["Ô"] != null) {
		_g.setReserved("Ô","O");
	} else {
		_g.h["Ô"] = "O";
	}
	if(__map_reserved["Ồ"] != null) {
		_g.setReserved("Ồ","O");
	} else {
		_g.h["Ồ"] = "O";
	}
	if(__map_reserved["Ố"] != null) {
		_g.setReserved("Ố","O");
	} else {
		_g.h["Ố"] = "O";
	}
	if(__map_reserved["Ỗ"] != null) {
		_g.setReserved("Ỗ","O");
	} else {
		_g.h["Ỗ"] = "O";
	}
	if(__map_reserved["Ổ"] != null) {
		_g.setReserved("Ổ","O");
	} else {
		_g.h["Ổ"] = "O";
	}
	if(__map_reserved["Õ"] != null) {
		_g.setReserved("Õ","O");
	} else {
		_g.h["Õ"] = "O";
	}
	if(__map_reserved["Ṍ"] != null) {
		_g.setReserved("Ṍ","O");
	} else {
		_g.h["Ṍ"] = "O";
	}
	if(__map_reserved["Ȭ"] != null) {
		_g.setReserved("Ȭ","O");
	} else {
		_g.h["Ȭ"] = "O";
	}
	if(__map_reserved["Ṏ"] != null) {
		_g.setReserved("Ṏ","O");
	} else {
		_g.h["Ṏ"] = "O";
	}
	if(__map_reserved["Ō"] != null) {
		_g.setReserved("Ō","O");
	} else {
		_g.h["Ō"] = "O";
	}
	if(__map_reserved["Ṑ"] != null) {
		_g.setReserved("Ṑ","O");
	} else {
		_g.h["Ṑ"] = "O";
	}
	if(__map_reserved["Ṓ"] != null) {
		_g.setReserved("Ṓ","O");
	} else {
		_g.h["Ṓ"] = "O";
	}
	if(__map_reserved["Ŏ"] != null) {
		_g.setReserved("Ŏ","O");
	} else {
		_g.h["Ŏ"] = "O";
	}
	if(__map_reserved["Ȯ"] != null) {
		_g.setReserved("Ȯ","O");
	} else {
		_g.h["Ȯ"] = "O";
	}
	if(__map_reserved["Ȱ"] != null) {
		_g.setReserved("Ȱ","O");
	} else {
		_g.h["Ȱ"] = "O";
	}
	if(__map_reserved["Ö"] != null) {
		_g.setReserved("Ö","O");
	} else {
		_g.h["Ö"] = "O";
	}
	if(__map_reserved["Ȫ"] != null) {
		_g.setReserved("Ȫ","O");
	} else {
		_g.h["Ȫ"] = "O";
	}
	if(__map_reserved["Ỏ"] != null) {
		_g.setReserved("Ỏ","O");
	} else {
		_g.h["Ỏ"] = "O";
	}
	if(__map_reserved["Ő"] != null) {
		_g.setReserved("Ő","O");
	} else {
		_g.h["Ő"] = "O";
	}
	if(__map_reserved["Ǒ"] != null) {
		_g.setReserved("Ǒ","O");
	} else {
		_g.h["Ǒ"] = "O";
	}
	if(__map_reserved["Ȍ"] != null) {
		_g.setReserved("Ȍ","O");
	} else {
		_g.h["Ȍ"] = "O";
	}
	if(__map_reserved["Ȏ"] != null) {
		_g.setReserved("Ȏ","O");
	} else {
		_g.h["Ȏ"] = "O";
	}
	if(__map_reserved["Ơ"] != null) {
		_g.setReserved("Ơ","O");
	} else {
		_g.h["Ơ"] = "O";
	}
	if(__map_reserved["Ờ"] != null) {
		_g.setReserved("Ờ","O");
	} else {
		_g.h["Ờ"] = "O";
	}
	if(__map_reserved["Ớ"] != null) {
		_g.setReserved("Ớ","O");
	} else {
		_g.h["Ớ"] = "O";
	}
	if(__map_reserved["Ỡ"] != null) {
		_g.setReserved("Ỡ","O");
	} else {
		_g.h["Ỡ"] = "O";
	}
	if(__map_reserved["Ở"] != null) {
		_g.setReserved("Ở","O");
	} else {
		_g.h["Ở"] = "O";
	}
	if(__map_reserved["Ợ"] != null) {
		_g.setReserved("Ợ","O");
	} else {
		_g.h["Ợ"] = "O";
	}
	if(__map_reserved["Ọ"] != null) {
		_g.setReserved("Ọ","O");
	} else {
		_g.h["Ọ"] = "O";
	}
	if(__map_reserved["Ộ"] != null) {
		_g.setReserved("Ộ","O");
	} else {
		_g.h["Ộ"] = "O";
	}
	if(__map_reserved["Ǫ"] != null) {
		_g.setReserved("Ǫ","O");
	} else {
		_g.h["Ǫ"] = "O";
	}
	if(__map_reserved["Ǭ"] != null) {
		_g.setReserved("Ǭ","O");
	} else {
		_g.h["Ǭ"] = "O";
	}
	if(__map_reserved["Ø"] != null) {
		_g.setReserved("Ø","O");
	} else {
		_g.h["Ø"] = "O";
	}
	if(__map_reserved["Ǿ"] != null) {
		_g.setReserved("Ǿ","O");
	} else {
		_g.h["Ǿ"] = "O";
	}
	if(__map_reserved["Ɔ"] != null) {
		_g.setReserved("Ɔ","O");
	} else {
		_g.h["Ɔ"] = "O";
	}
	if(__map_reserved["Ɵ"] != null) {
		_g.setReserved("Ɵ","O");
	} else {
		_g.h["Ɵ"] = "O";
	}
	if(__map_reserved["Ꝋ"] != null) {
		_g.setReserved("Ꝋ","O");
	} else {
		_g.h["Ꝋ"] = "O";
	}
	if(__map_reserved["Ꝍ"] != null) {
		_g.setReserved("Ꝍ","O");
	} else {
		_g.h["Ꝍ"] = "O";
	}
	if(__map_reserved["Ƣ"] != null) {
		_g.setReserved("Ƣ","OI");
	} else {
		_g.h["Ƣ"] = "OI";
	}
	if(__map_reserved["Ꝏ"] != null) {
		_g.setReserved("Ꝏ","OO");
	} else {
		_g.h["Ꝏ"] = "OO";
	}
	if(__map_reserved["Ȣ"] != null) {
		_g.setReserved("Ȣ","OU");
	} else {
		_g.h["Ȣ"] = "OU";
	}
	if(__map_reserved["P"] != null) {
		_g.setReserved("P","P");
	} else {
		_g.h["P"] = "P";
	}
	if(__map_reserved["Ⓟ"] != null) {
		_g.setReserved("Ⓟ","P");
	} else {
		_g.h["Ⓟ"] = "P";
	}
	if(__map_reserved["Ｐ"] != null) {
		_g.setReserved("Ｐ","P");
	} else {
		_g.h["Ｐ"] = "P";
	}
	if(__map_reserved["Ṕ"] != null) {
		_g.setReserved("Ṕ","P");
	} else {
		_g.h["Ṕ"] = "P";
	}
	if(__map_reserved["Ṗ"] != null) {
		_g.setReserved("Ṗ","P");
	} else {
		_g.h["Ṗ"] = "P";
	}
	if(__map_reserved["Ƥ"] != null) {
		_g.setReserved("Ƥ","P");
	} else {
		_g.h["Ƥ"] = "P";
	}
	if(__map_reserved["Ᵽ"] != null) {
		_g.setReserved("Ᵽ","P");
	} else {
		_g.h["Ᵽ"] = "P";
	}
	if(__map_reserved["Ꝑ"] != null) {
		_g.setReserved("Ꝑ","P");
	} else {
		_g.h["Ꝑ"] = "P";
	}
	if(__map_reserved["Ꝓ"] != null) {
		_g.setReserved("Ꝓ","P");
	} else {
		_g.h["Ꝓ"] = "P";
	}
	if(__map_reserved["Ꝕ"] != null) {
		_g.setReserved("Ꝕ","P");
	} else {
		_g.h["Ꝕ"] = "P";
	}
	if(__map_reserved["Q"] != null) {
		_g.setReserved("Q","Q");
	} else {
		_g.h["Q"] = "Q";
	}
	if(__map_reserved["Ⓠ"] != null) {
		_g.setReserved("Ⓠ","Q");
	} else {
		_g.h["Ⓠ"] = "Q";
	}
	if(__map_reserved["Ｑ"] != null) {
		_g.setReserved("Ｑ","Q");
	} else {
		_g.h["Ｑ"] = "Q";
	}
	if(__map_reserved["Ꝗ"] != null) {
		_g.setReserved("Ꝗ","Q");
	} else {
		_g.h["Ꝗ"] = "Q";
	}
	if(__map_reserved["Ꝙ"] != null) {
		_g.setReserved("Ꝙ","Q");
	} else {
		_g.h["Ꝙ"] = "Q";
	}
	if(__map_reserved["Ɋ"] != null) {
		_g.setReserved("Ɋ","Q");
	} else {
		_g.h["Ɋ"] = "Q";
	}
	if(__map_reserved["R"] != null) {
		_g.setReserved("R","R");
	} else {
		_g.h["R"] = "R";
	}
	if(__map_reserved["Ⓡ"] != null) {
		_g.setReserved("Ⓡ","R");
	} else {
		_g.h["Ⓡ"] = "R";
	}
	if(__map_reserved["Ｒ"] != null) {
		_g.setReserved("Ｒ","R");
	} else {
		_g.h["Ｒ"] = "R";
	}
	if(__map_reserved["Ŕ"] != null) {
		_g.setReserved("Ŕ","R");
	} else {
		_g.h["Ŕ"] = "R";
	}
	if(__map_reserved["Ṙ"] != null) {
		_g.setReserved("Ṙ","R");
	} else {
		_g.h["Ṙ"] = "R";
	}
	if(__map_reserved["Ř"] != null) {
		_g.setReserved("Ř","R");
	} else {
		_g.h["Ř"] = "R";
	}
	if(__map_reserved["Ȑ"] != null) {
		_g.setReserved("Ȑ","R");
	} else {
		_g.h["Ȑ"] = "R";
	}
	if(__map_reserved["Ȓ"] != null) {
		_g.setReserved("Ȓ","R");
	} else {
		_g.h["Ȓ"] = "R";
	}
	if(__map_reserved["Ṛ"] != null) {
		_g.setReserved("Ṛ","R");
	} else {
		_g.h["Ṛ"] = "R";
	}
	if(__map_reserved["Ṝ"] != null) {
		_g.setReserved("Ṝ","R");
	} else {
		_g.h["Ṝ"] = "R";
	}
	if(__map_reserved["Ŗ"] != null) {
		_g.setReserved("Ŗ","R");
	} else {
		_g.h["Ŗ"] = "R";
	}
	if(__map_reserved["Ṟ"] != null) {
		_g.setReserved("Ṟ","R");
	} else {
		_g.h["Ṟ"] = "R";
	}
	if(__map_reserved["Ɍ"] != null) {
		_g.setReserved("Ɍ","R");
	} else {
		_g.h["Ɍ"] = "R";
	}
	if(__map_reserved["Ɽ"] != null) {
		_g.setReserved("Ɽ","R");
	} else {
		_g.h["Ɽ"] = "R";
	}
	if(__map_reserved["Ꝛ"] != null) {
		_g.setReserved("Ꝛ","R");
	} else {
		_g.h["Ꝛ"] = "R";
	}
	if(__map_reserved["Ꞧ"] != null) {
		_g.setReserved("Ꞧ","R");
	} else {
		_g.h["Ꞧ"] = "R";
	}
	if(__map_reserved["Ꞃ"] != null) {
		_g.setReserved("Ꞃ","R");
	} else {
		_g.h["Ꞃ"] = "R";
	}
	if(__map_reserved["S"] != null) {
		_g.setReserved("S","S");
	} else {
		_g.h["S"] = "S";
	}
	if(__map_reserved["Ⓢ"] != null) {
		_g.setReserved("Ⓢ","S");
	} else {
		_g.h["Ⓢ"] = "S";
	}
	if(__map_reserved["Ｓ"] != null) {
		_g.setReserved("Ｓ","S");
	} else {
		_g.h["Ｓ"] = "S";
	}
	if(__map_reserved["ẞ"] != null) {
		_g.setReserved("ẞ","S");
	} else {
		_g.h["ẞ"] = "S";
	}
	if(__map_reserved["Ś"] != null) {
		_g.setReserved("Ś","S");
	} else {
		_g.h["Ś"] = "S";
	}
	if(__map_reserved["Ṥ"] != null) {
		_g.setReserved("Ṥ","S");
	} else {
		_g.h["Ṥ"] = "S";
	}
	if(__map_reserved["Ŝ"] != null) {
		_g.setReserved("Ŝ","S");
	} else {
		_g.h["Ŝ"] = "S";
	}
	if(__map_reserved["Ṡ"] != null) {
		_g.setReserved("Ṡ","S");
	} else {
		_g.h["Ṡ"] = "S";
	}
	if(__map_reserved["Š"] != null) {
		_g.setReserved("Š","S");
	} else {
		_g.h["Š"] = "S";
	}
	if(__map_reserved["Ṧ"] != null) {
		_g.setReserved("Ṧ","S");
	} else {
		_g.h["Ṧ"] = "S";
	}
	if(__map_reserved["Ṣ"] != null) {
		_g.setReserved("Ṣ","S");
	} else {
		_g.h["Ṣ"] = "S";
	}
	if(__map_reserved["Ṩ"] != null) {
		_g.setReserved("Ṩ","S");
	} else {
		_g.h["Ṩ"] = "S";
	}
	if(__map_reserved["Ș"] != null) {
		_g.setReserved("Ș","S");
	} else {
		_g.h["Ș"] = "S";
	}
	if(__map_reserved["Ş"] != null) {
		_g.setReserved("Ş","S");
	} else {
		_g.h["Ş"] = "S";
	}
	if(__map_reserved["Ȿ"] != null) {
		_g.setReserved("Ȿ","S");
	} else {
		_g.h["Ȿ"] = "S";
	}
	if(__map_reserved["Ꞩ"] != null) {
		_g.setReserved("Ꞩ","S");
	} else {
		_g.h["Ꞩ"] = "S";
	}
	if(__map_reserved["Ꞅ"] != null) {
		_g.setReserved("Ꞅ","S");
	} else {
		_g.h["Ꞅ"] = "S";
	}
	if(__map_reserved["T"] != null) {
		_g.setReserved("T","T");
	} else {
		_g.h["T"] = "T";
	}
	if(__map_reserved["Ⓣ"] != null) {
		_g.setReserved("Ⓣ","T");
	} else {
		_g.h["Ⓣ"] = "T";
	}
	if(__map_reserved["Ｔ"] != null) {
		_g.setReserved("Ｔ","T");
	} else {
		_g.h["Ｔ"] = "T";
	}
	if(__map_reserved["Ṫ"] != null) {
		_g.setReserved("Ṫ","T");
	} else {
		_g.h["Ṫ"] = "T";
	}
	if(__map_reserved["Ť"] != null) {
		_g.setReserved("Ť","T");
	} else {
		_g.h["Ť"] = "T";
	}
	if(__map_reserved["Ṭ"] != null) {
		_g.setReserved("Ṭ","T");
	} else {
		_g.h["Ṭ"] = "T";
	}
	if(__map_reserved["Ț"] != null) {
		_g.setReserved("Ț","T");
	} else {
		_g.h["Ț"] = "T";
	}
	if(__map_reserved["Ţ"] != null) {
		_g.setReserved("Ţ","T");
	} else {
		_g.h["Ţ"] = "T";
	}
	if(__map_reserved["Ṱ"] != null) {
		_g.setReserved("Ṱ","T");
	} else {
		_g.h["Ṱ"] = "T";
	}
	if(__map_reserved["Ṯ"] != null) {
		_g.setReserved("Ṯ","T");
	} else {
		_g.h["Ṯ"] = "T";
	}
	if(__map_reserved["Ŧ"] != null) {
		_g.setReserved("Ŧ","T");
	} else {
		_g.h["Ŧ"] = "T";
	}
	if(__map_reserved["Ƭ"] != null) {
		_g.setReserved("Ƭ","T");
	} else {
		_g.h["Ƭ"] = "T";
	}
	if(__map_reserved["Ʈ"] != null) {
		_g.setReserved("Ʈ","T");
	} else {
		_g.h["Ʈ"] = "T";
	}
	if(__map_reserved["Ⱦ"] != null) {
		_g.setReserved("Ⱦ","T");
	} else {
		_g.h["Ⱦ"] = "T";
	}
	if(__map_reserved["Ꞇ"] != null) {
		_g.setReserved("Ꞇ","T");
	} else {
		_g.h["Ꞇ"] = "T";
	}
	if(__map_reserved["Þ"] != null) {
		_g.setReserved("Þ","Th");
	} else {
		_g.h["Þ"] = "Th";
	}
	if(__map_reserved["Ꜩ"] != null) {
		_g.setReserved("Ꜩ","TZ");
	} else {
		_g.h["Ꜩ"] = "TZ";
	}
	if(__map_reserved["U"] != null) {
		_g.setReserved("U","U");
	} else {
		_g.h["U"] = "U";
	}
	if(__map_reserved["Ⓤ"] != null) {
		_g.setReserved("Ⓤ","U");
	} else {
		_g.h["Ⓤ"] = "U";
	}
	if(__map_reserved["Ｕ"] != null) {
		_g.setReserved("Ｕ","U");
	} else {
		_g.h["Ｕ"] = "U";
	}
	if(__map_reserved["Ù"] != null) {
		_g.setReserved("Ù","U");
	} else {
		_g.h["Ù"] = "U";
	}
	if(__map_reserved["Ú"] != null) {
		_g.setReserved("Ú","U");
	} else {
		_g.h["Ú"] = "U";
	}
	if(__map_reserved["Û"] != null) {
		_g.setReserved("Û","U");
	} else {
		_g.h["Û"] = "U";
	}
	if(__map_reserved["Ũ"] != null) {
		_g.setReserved("Ũ","U");
	} else {
		_g.h["Ũ"] = "U";
	}
	if(__map_reserved["Ṹ"] != null) {
		_g.setReserved("Ṹ","U");
	} else {
		_g.h["Ṹ"] = "U";
	}
	if(__map_reserved["Ū"] != null) {
		_g.setReserved("Ū","U");
	} else {
		_g.h["Ū"] = "U";
	}
	if(__map_reserved["Ṻ"] != null) {
		_g.setReserved("Ṻ","U");
	} else {
		_g.h["Ṻ"] = "U";
	}
	if(__map_reserved["Ŭ"] != null) {
		_g.setReserved("Ŭ","U");
	} else {
		_g.h["Ŭ"] = "U";
	}
	if(__map_reserved["Ü"] != null) {
		_g.setReserved("Ü","U");
	} else {
		_g.h["Ü"] = "U";
	}
	if(__map_reserved["Ǜ"] != null) {
		_g.setReserved("Ǜ","U");
	} else {
		_g.h["Ǜ"] = "U";
	}
	if(__map_reserved["Ǘ"] != null) {
		_g.setReserved("Ǘ","U");
	} else {
		_g.h["Ǘ"] = "U";
	}
	if(__map_reserved["Ǖ"] != null) {
		_g.setReserved("Ǖ","U");
	} else {
		_g.h["Ǖ"] = "U";
	}
	if(__map_reserved["Ǚ"] != null) {
		_g.setReserved("Ǚ","U");
	} else {
		_g.h["Ǚ"] = "U";
	}
	if(__map_reserved["Ủ"] != null) {
		_g.setReserved("Ủ","U");
	} else {
		_g.h["Ủ"] = "U";
	}
	if(__map_reserved["Ů"] != null) {
		_g.setReserved("Ů","U");
	} else {
		_g.h["Ů"] = "U";
	}
	if(__map_reserved["Ű"] != null) {
		_g.setReserved("Ű","U");
	} else {
		_g.h["Ű"] = "U";
	}
	if(__map_reserved["Ǔ"] != null) {
		_g.setReserved("Ǔ","U");
	} else {
		_g.h["Ǔ"] = "U";
	}
	if(__map_reserved["Ȕ"] != null) {
		_g.setReserved("Ȕ","U");
	} else {
		_g.h["Ȕ"] = "U";
	}
	if(__map_reserved["Ȗ"] != null) {
		_g.setReserved("Ȗ","U");
	} else {
		_g.h["Ȗ"] = "U";
	}
	if(__map_reserved["Ư"] != null) {
		_g.setReserved("Ư","U");
	} else {
		_g.h["Ư"] = "U";
	}
	if(__map_reserved["Ừ"] != null) {
		_g.setReserved("Ừ","U");
	} else {
		_g.h["Ừ"] = "U";
	}
	if(__map_reserved["Ứ"] != null) {
		_g.setReserved("Ứ","U");
	} else {
		_g.h["Ứ"] = "U";
	}
	if(__map_reserved["Ữ"] != null) {
		_g.setReserved("Ữ","U");
	} else {
		_g.h["Ữ"] = "U";
	}
	if(__map_reserved["Ử"] != null) {
		_g.setReserved("Ử","U");
	} else {
		_g.h["Ử"] = "U";
	}
	if(__map_reserved["Ự"] != null) {
		_g.setReserved("Ự","U");
	} else {
		_g.h["Ự"] = "U";
	}
	if(__map_reserved["Ụ"] != null) {
		_g.setReserved("Ụ","U");
	} else {
		_g.h["Ụ"] = "U";
	}
	if(__map_reserved["Ṳ"] != null) {
		_g.setReserved("Ṳ","U");
	} else {
		_g.h["Ṳ"] = "U";
	}
	if(__map_reserved["Ų"] != null) {
		_g.setReserved("Ų","U");
	} else {
		_g.h["Ų"] = "U";
	}
	if(__map_reserved["Ṷ"] != null) {
		_g.setReserved("Ṷ","U");
	} else {
		_g.h["Ṷ"] = "U";
	}
	if(__map_reserved["Ṵ"] != null) {
		_g.setReserved("Ṵ","U");
	} else {
		_g.h["Ṵ"] = "U";
	}
	if(__map_reserved["Ʉ"] != null) {
		_g.setReserved("Ʉ","U");
	} else {
		_g.h["Ʉ"] = "U";
	}
	if(__map_reserved["V"] != null) {
		_g.setReserved("V","V");
	} else {
		_g.h["V"] = "V";
	}
	if(__map_reserved["Ⓥ"] != null) {
		_g.setReserved("Ⓥ","V");
	} else {
		_g.h["Ⓥ"] = "V";
	}
	if(__map_reserved["Ｖ"] != null) {
		_g.setReserved("Ｖ","V");
	} else {
		_g.h["Ｖ"] = "V";
	}
	if(__map_reserved["Ṽ"] != null) {
		_g.setReserved("Ṽ","V");
	} else {
		_g.h["Ṽ"] = "V";
	}
	if(__map_reserved["Ṿ"] != null) {
		_g.setReserved("Ṿ","V");
	} else {
		_g.h["Ṿ"] = "V";
	}
	if(__map_reserved["Ʋ"] != null) {
		_g.setReserved("Ʋ","V");
	} else {
		_g.h["Ʋ"] = "V";
	}
	if(__map_reserved["Ꝟ"] != null) {
		_g.setReserved("Ꝟ","V");
	} else {
		_g.h["Ꝟ"] = "V";
	}
	if(__map_reserved["Ʌ"] != null) {
		_g.setReserved("Ʌ","V");
	} else {
		_g.h["Ʌ"] = "V";
	}
	if(__map_reserved["Ꝡ"] != null) {
		_g.setReserved("Ꝡ","VY");
	} else {
		_g.h["Ꝡ"] = "VY";
	}
	if(__map_reserved["W"] != null) {
		_g.setReserved("W","W");
	} else {
		_g.h["W"] = "W";
	}
	if(__map_reserved["Ⓦ"] != null) {
		_g.setReserved("Ⓦ","W");
	} else {
		_g.h["Ⓦ"] = "W";
	}
	if(__map_reserved["Ｗ"] != null) {
		_g.setReserved("Ｗ","W");
	} else {
		_g.h["Ｗ"] = "W";
	}
	if(__map_reserved["Ẁ"] != null) {
		_g.setReserved("Ẁ","W");
	} else {
		_g.h["Ẁ"] = "W";
	}
	if(__map_reserved["Ẃ"] != null) {
		_g.setReserved("Ẃ","W");
	} else {
		_g.h["Ẃ"] = "W";
	}
	if(__map_reserved["Ŵ"] != null) {
		_g.setReserved("Ŵ","W");
	} else {
		_g.h["Ŵ"] = "W";
	}
	if(__map_reserved["Ẇ"] != null) {
		_g.setReserved("Ẇ","W");
	} else {
		_g.h["Ẇ"] = "W";
	}
	if(__map_reserved["Ẅ"] != null) {
		_g.setReserved("Ẅ","W");
	} else {
		_g.h["Ẅ"] = "W";
	}
	if(__map_reserved["Ẉ"] != null) {
		_g.setReserved("Ẉ","W");
	} else {
		_g.h["Ẉ"] = "W";
	}
	if(__map_reserved["Ⱳ"] != null) {
		_g.setReserved("Ⱳ","W");
	} else {
		_g.h["Ⱳ"] = "W";
	}
	if(__map_reserved["X"] != null) {
		_g.setReserved("X","X");
	} else {
		_g.h["X"] = "X";
	}
	if(__map_reserved["Ⓧ"] != null) {
		_g.setReserved("Ⓧ","X");
	} else {
		_g.h["Ⓧ"] = "X";
	}
	if(__map_reserved["Ｘ"] != null) {
		_g.setReserved("Ｘ","X");
	} else {
		_g.h["Ｘ"] = "X";
	}
	if(__map_reserved["Ẋ"] != null) {
		_g.setReserved("Ẋ","X");
	} else {
		_g.h["Ẋ"] = "X";
	}
	if(__map_reserved["Ẍ"] != null) {
		_g.setReserved("Ẍ","X");
	} else {
		_g.h["Ẍ"] = "X";
	}
	if(__map_reserved["Y"] != null) {
		_g.setReserved("Y","Y");
	} else {
		_g.h["Y"] = "Y";
	}
	if(__map_reserved["Ⓨ"] != null) {
		_g.setReserved("Ⓨ","Y");
	} else {
		_g.h["Ⓨ"] = "Y";
	}
	if(__map_reserved["Ｙ"] != null) {
		_g.setReserved("Ｙ","Y");
	} else {
		_g.h["Ｙ"] = "Y";
	}
	if(__map_reserved["Ỳ"] != null) {
		_g.setReserved("Ỳ","Y");
	} else {
		_g.h["Ỳ"] = "Y";
	}
	if(__map_reserved["Ý"] != null) {
		_g.setReserved("Ý","Y");
	} else {
		_g.h["Ý"] = "Y";
	}
	if(__map_reserved["Ŷ"] != null) {
		_g.setReserved("Ŷ","Y");
	} else {
		_g.h["Ŷ"] = "Y";
	}
	if(__map_reserved["Ỹ"] != null) {
		_g.setReserved("Ỹ","Y");
	} else {
		_g.h["Ỹ"] = "Y";
	}
	if(__map_reserved["Ȳ"] != null) {
		_g.setReserved("Ȳ","Y");
	} else {
		_g.h["Ȳ"] = "Y";
	}
	if(__map_reserved["Ẏ"] != null) {
		_g.setReserved("Ẏ","Y");
	} else {
		_g.h["Ẏ"] = "Y";
	}
	if(__map_reserved["Ÿ"] != null) {
		_g.setReserved("Ÿ","Y");
	} else {
		_g.h["Ÿ"] = "Y";
	}
	if(__map_reserved["Ỷ"] != null) {
		_g.setReserved("Ỷ","Y");
	} else {
		_g.h["Ỷ"] = "Y";
	}
	if(__map_reserved["Ỵ"] != null) {
		_g.setReserved("Ỵ","Y");
	} else {
		_g.h["Ỵ"] = "Y";
	}
	if(__map_reserved["Ƴ"] != null) {
		_g.setReserved("Ƴ","Y");
	} else {
		_g.h["Ƴ"] = "Y";
	}
	if(__map_reserved["Ɏ"] != null) {
		_g.setReserved("Ɏ","Y");
	} else {
		_g.h["Ɏ"] = "Y";
	}
	if(__map_reserved["Ỿ"] != null) {
		_g.setReserved("Ỿ","Y");
	} else {
		_g.h["Ỿ"] = "Y";
	}
	if(__map_reserved["Z"] != null) {
		_g.setReserved("Z","Z");
	} else {
		_g.h["Z"] = "Z";
	}
	if(__map_reserved["Ⓩ"] != null) {
		_g.setReserved("Ⓩ","Z");
	} else {
		_g.h["Ⓩ"] = "Z";
	}
	if(__map_reserved["Ｚ"] != null) {
		_g.setReserved("Ｚ","Z");
	} else {
		_g.h["Ｚ"] = "Z";
	}
	if(__map_reserved["Ź"] != null) {
		_g.setReserved("Ź","Z");
	} else {
		_g.h["Ź"] = "Z";
	}
	if(__map_reserved["Ẑ"] != null) {
		_g.setReserved("Ẑ","Z");
	} else {
		_g.h["Ẑ"] = "Z";
	}
	if(__map_reserved["Ż"] != null) {
		_g.setReserved("Ż","Z");
	} else {
		_g.h["Ż"] = "Z";
	}
	if(__map_reserved["Ž"] != null) {
		_g.setReserved("Ž","Z");
	} else {
		_g.h["Ž"] = "Z";
	}
	if(__map_reserved["Ẓ"] != null) {
		_g.setReserved("Ẓ","Z");
	} else {
		_g.h["Ẓ"] = "Z";
	}
	if(__map_reserved["Ẕ"] != null) {
		_g.setReserved("Ẕ","Z");
	} else {
		_g.h["Ẕ"] = "Z";
	}
	if(__map_reserved["Ƶ"] != null) {
		_g.setReserved("Ƶ","Z");
	} else {
		_g.h["Ƶ"] = "Z";
	}
	if(__map_reserved["Ȥ"] != null) {
		_g.setReserved("Ȥ","Z");
	} else {
		_g.h["Ȥ"] = "Z";
	}
	if(__map_reserved["Ɀ"] != null) {
		_g.setReserved("Ɀ","Z");
	} else {
		_g.h["Ɀ"] = "Z";
	}
	if(__map_reserved["Ⱬ"] != null) {
		_g.setReserved("Ⱬ","Z");
	} else {
		_g.h["Ⱬ"] = "Z";
	}
	if(__map_reserved["Ꝣ"] != null) {
		_g.setReserved("Ꝣ","Z");
	} else {
		_g.h["Ꝣ"] = "Z";
	}
	if(__map_reserved["a"] != null) {
		_g.setReserved("a","a");
	} else {
		_g.h["a"] = "a";
	}
	if(__map_reserved["ⓐ"] != null) {
		_g.setReserved("ⓐ","a");
	} else {
		_g.h["ⓐ"] = "a";
	}
	if(__map_reserved["ａ"] != null) {
		_g.setReserved("ａ","a");
	} else {
		_g.h["ａ"] = "a";
	}
	if(__map_reserved["ẚ"] != null) {
		_g.setReserved("ẚ","a");
	} else {
		_g.h["ẚ"] = "a";
	}
	if(__map_reserved["à"] != null) {
		_g.setReserved("à","a");
	} else {
		_g.h["à"] = "a";
	}
	if(__map_reserved["á"] != null) {
		_g.setReserved("á","a");
	} else {
		_g.h["á"] = "a";
	}
	if(__map_reserved["â"] != null) {
		_g.setReserved("â","a");
	} else {
		_g.h["â"] = "a";
	}
	if(__map_reserved["ầ"] != null) {
		_g.setReserved("ầ","a");
	} else {
		_g.h["ầ"] = "a";
	}
	if(__map_reserved["ấ"] != null) {
		_g.setReserved("ấ","a");
	} else {
		_g.h["ấ"] = "a";
	}
	if(__map_reserved["ẫ"] != null) {
		_g.setReserved("ẫ","a");
	} else {
		_g.h["ẫ"] = "a";
	}
	if(__map_reserved["ẩ"] != null) {
		_g.setReserved("ẩ","a");
	} else {
		_g.h["ẩ"] = "a";
	}
	if(__map_reserved["ã"] != null) {
		_g.setReserved("ã","a");
	} else {
		_g.h["ã"] = "a";
	}
	if(__map_reserved["ā"] != null) {
		_g.setReserved("ā","a");
	} else {
		_g.h["ā"] = "a";
	}
	if(__map_reserved["ă"] != null) {
		_g.setReserved("ă","a");
	} else {
		_g.h["ă"] = "a";
	}
	if(__map_reserved["ằ"] != null) {
		_g.setReserved("ằ","a");
	} else {
		_g.h["ằ"] = "a";
	}
	if(__map_reserved["ắ"] != null) {
		_g.setReserved("ắ","a");
	} else {
		_g.h["ắ"] = "a";
	}
	if(__map_reserved["ẵ"] != null) {
		_g.setReserved("ẵ","a");
	} else {
		_g.h["ẵ"] = "a";
	}
	if(__map_reserved["ẳ"] != null) {
		_g.setReserved("ẳ","a");
	} else {
		_g.h["ẳ"] = "a";
	}
	if(__map_reserved["ȧ"] != null) {
		_g.setReserved("ȧ","a");
	} else {
		_g.h["ȧ"] = "a";
	}
	if(__map_reserved["ǡ"] != null) {
		_g.setReserved("ǡ","a");
	} else {
		_g.h["ǡ"] = "a";
	}
	if(__map_reserved["ä"] != null) {
		_g.setReserved("ä","a");
	} else {
		_g.h["ä"] = "a";
	}
	if(__map_reserved["ǟ"] != null) {
		_g.setReserved("ǟ","a");
	} else {
		_g.h["ǟ"] = "a";
	}
	if(__map_reserved["ả"] != null) {
		_g.setReserved("ả","a");
	} else {
		_g.h["ả"] = "a";
	}
	if(__map_reserved["å"] != null) {
		_g.setReserved("å","a");
	} else {
		_g.h["å"] = "a";
	}
	if(__map_reserved["ǻ"] != null) {
		_g.setReserved("ǻ","a");
	} else {
		_g.h["ǻ"] = "a";
	}
	if(__map_reserved["ǎ"] != null) {
		_g.setReserved("ǎ","a");
	} else {
		_g.h["ǎ"] = "a";
	}
	if(__map_reserved["ȁ"] != null) {
		_g.setReserved("ȁ","a");
	} else {
		_g.h["ȁ"] = "a";
	}
	if(__map_reserved["â"] != null) {
		_g.setReserved("â","a");
	} else {
		_g.h["â"] = "a";
	}
	if(__map_reserved["ạ"] != null) {
		_g.setReserved("ạ","a");
	} else {
		_g.h["ạ"] = "a";
	}
	if(__map_reserved["ậ"] != null) {
		_g.setReserved("ậ","a");
	} else {
		_g.h["ậ"] = "a";
	}
	if(__map_reserved["ặ"] != null) {
		_g.setReserved("ặ","a");
	} else {
		_g.h["ặ"] = "a";
	}
	if(__map_reserved["ḁ"] != null) {
		_g.setReserved("ḁ","a");
	} else {
		_g.h["ḁ"] = "a";
	}
	if(__map_reserved["ą"] != null) {
		_g.setReserved("ą","a");
	} else {
		_g.h["ą"] = "a";
	}
	if(__map_reserved["ⱥ"] != null) {
		_g.setReserved("ⱥ","a");
	} else {
		_g.h["ⱥ"] = "a";
	}
	if(__map_reserved["ɐ"] != null) {
		_g.setReserved("ɐ","a");
	} else {
		_g.h["ɐ"] = "a";
	}
	if(__map_reserved["ɑ"] != null) {
		_g.setReserved("ɑ","a");
	} else {
		_g.h["ɑ"] = "a";
	}
	if(__map_reserved["ꜳ"] != null) {
		_g.setReserved("ꜳ","aa");
	} else {
		_g.h["ꜳ"] = "aa";
	}
	if(__map_reserved["æ"] != null) {
		_g.setReserved("æ","ae");
	} else {
		_g.h["æ"] = "ae";
	}
	if(__map_reserved["ǽ"] != null) {
		_g.setReserved("ǽ","ae");
	} else {
		_g.h["ǽ"] = "ae";
	}
	if(__map_reserved["ǣ"] != null) {
		_g.setReserved("ǣ","ae");
	} else {
		_g.h["ǣ"] = "ae";
	}
	if(__map_reserved["ꜵ"] != null) {
		_g.setReserved("ꜵ","ao");
	} else {
		_g.h["ꜵ"] = "ao";
	}
	if(__map_reserved["ꜷ"] != null) {
		_g.setReserved("ꜷ","au");
	} else {
		_g.h["ꜷ"] = "au";
	}
	if(__map_reserved["ꜹ"] != null) {
		_g.setReserved("ꜹ","av");
	} else {
		_g.h["ꜹ"] = "av";
	}
	if(__map_reserved["ꜻ"] != null) {
		_g.setReserved("ꜻ","av");
	} else {
		_g.h["ꜻ"] = "av";
	}
	if(__map_reserved["ꜽ"] != null) {
		_g.setReserved("ꜽ","ay");
	} else {
		_g.h["ꜽ"] = "ay";
	}
	if(__map_reserved["b"] != null) {
		_g.setReserved("b","b");
	} else {
		_g.h["b"] = "b";
	}
	if(__map_reserved["ⓑ"] != null) {
		_g.setReserved("ⓑ","b");
	} else {
		_g.h["ⓑ"] = "b";
	}
	if(__map_reserved["ｂ"] != null) {
		_g.setReserved("ｂ","b");
	} else {
		_g.h["ｂ"] = "b";
	}
	if(__map_reserved["ḃ"] != null) {
		_g.setReserved("ḃ","b");
	} else {
		_g.h["ḃ"] = "b";
	}
	if(__map_reserved["ḅ"] != null) {
		_g.setReserved("ḅ","b");
	} else {
		_g.h["ḅ"] = "b";
	}
	if(__map_reserved["ḇ"] != null) {
		_g.setReserved("ḇ","b");
	} else {
		_g.h["ḇ"] = "b";
	}
	if(__map_reserved["ƀ"] != null) {
		_g.setReserved("ƀ","b");
	} else {
		_g.h["ƀ"] = "b";
	}
	if(__map_reserved["ƃ"] != null) {
		_g.setReserved("ƃ","b");
	} else {
		_g.h["ƃ"] = "b";
	}
	if(__map_reserved["ɓ"] != null) {
		_g.setReserved("ɓ","b");
	} else {
		_g.h["ɓ"] = "b";
	}
	if(__map_reserved["c"] != null) {
		_g.setReserved("c","c");
	} else {
		_g.h["c"] = "c";
	}
	if(__map_reserved["ⓒ"] != null) {
		_g.setReserved("ⓒ","c");
	} else {
		_g.h["ⓒ"] = "c";
	}
	if(__map_reserved["ｃ"] != null) {
		_g.setReserved("ｃ","c");
	} else {
		_g.h["ｃ"] = "c";
	}
	if(__map_reserved["ć"] != null) {
		_g.setReserved("ć","c");
	} else {
		_g.h["ć"] = "c";
	}
	if(__map_reserved["ĉ"] != null) {
		_g.setReserved("ĉ","c");
	} else {
		_g.h["ĉ"] = "c";
	}
	if(__map_reserved["ċ"] != null) {
		_g.setReserved("ċ","c");
	} else {
		_g.h["ċ"] = "c";
	}
	if(__map_reserved["č"] != null) {
		_g.setReserved("č","c");
	} else {
		_g.h["č"] = "c";
	}
	if(__map_reserved["ç"] != null) {
		_g.setReserved("ç","c");
	} else {
		_g.h["ç"] = "c";
	}
	if(__map_reserved["ḉ"] != null) {
		_g.setReserved("ḉ","c");
	} else {
		_g.h["ḉ"] = "c";
	}
	if(__map_reserved["ƈ"] != null) {
		_g.setReserved("ƈ","c");
	} else {
		_g.h["ƈ"] = "c";
	}
	if(__map_reserved["ȼ"] != null) {
		_g.setReserved("ȼ","c");
	} else {
		_g.h["ȼ"] = "c";
	}
	if(__map_reserved["ꜿ"] != null) {
		_g.setReserved("ꜿ","c");
	} else {
		_g.h["ꜿ"] = "c";
	}
	if(__map_reserved["ↄ"] != null) {
		_g.setReserved("ↄ","c");
	} else {
		_g.h["ↄ"] = "c";
	}
	if(__map_reserved["d"] != null) {
		_g.setReserved("d","d");
	} else {
		_g.h["d"] = "d";
	}
	if(__map_reserved["ⓓ"] != null) {
		_g.setReserved("ⓓ","d");
	} else {
		_g.h["ⓓ"] = "d";
	}
	if(__map_reserved["ｄ"] != null) {
		_g.setReserved("ｄ","d");
	} else {
		_g.h["ｄ"] = "d";
	}
	if(__map_reserved["ḋ"] != null) {
		_g.setReserved("ḋ","d");
	} else {
		_g.h["ḋ"] = "d";
	}
	if(__map_reserved["ď"] != null) {
		_g.setReserved("ď","d");
	} else {
		_g.h["ď"] = "d";
	}
	if(__map_reserved["ḍ"] != null) {
		_g.setReserved("ḍ","d");
	} else {
		_g.h["ḍ"] = "d";
	}
	if(__map_reserved["ḑ"] != null) {
		_g.setReserved("ḑ","d");
	} else {
		_g.h["ḑ"] = "d";
	}
	if(__map_reserved["ḓ"] != null) {
		_g.setReserved("ḓ","d");
	} else {
		_g.h["ḓ"] = "d";
	}
	if(__map_reserved["ḏ"] != null) {
		_g.setReserved("ḏ","d");
	} else {
		_g.h["ḏ"] = "d";
	}
	if(__map_reserved["đ"] != null) {
		_g.setReserved("đ","d");
	} else {
		_g.h["đ"] = "d";
	}
	if(__map_reserved["ƌ"] != null) {
		_g.setReserved("ƌ","d");
	} else {
		_g.h["ƌ"] = "d";
	}
	if(__map_reserved["ɖ"] != null) {
		_g.setReserved("ɖ","d");
	} else {
		_g.h["ɖ"] = "d";
	}
	if(__map_reserved["ɗ"] != null) {
		_g.setReserved("ɗ","d");
	} else {
		_g.h["ɗ"] = "d";
	}
	if(__map_reserved["ꝺ"] != null) {
		_g.setReserved("ꝺ","d");
	} else {
		_g.h["ꝺ"] = "d";
	}
	if(__map_reserved["ǳ"] != null) {
		_g.setReserved("ǳ","dz");
	} else {
		_g.h["ǳ"] = "dz";
	}
	if(__map_reserved["ǆ"] != null) {
		_g.setReserved("ǆ","dz");
	} else {
		_g.h["ǆ"] = "dz";
	}
	if(__map_reserved["e"] != null) {
		_g.setReserved("e","e");
	} else {
		_g.h["e"] = "e";
	}
	if(__map_reserved["ⓔ"] != null) {
		_g.setReserved("ⓔ","e");
	} else {
		_g.h["ⓔ"] = "e";
	}
	if(__map_reserved["ｅ"] != null) {
		_g.setReserved("ｅ","e");
	} else {
		_g.h["ｅ"] = "e";
	}
	if(__map_reserved["è"] != null) {
		_g.setReserved("è","e");
	} else {
		_g.h["è"] = "e";
	}
	if(__map_reserved["é"] != null) {
		_g.setReserved("é","e");
	} else {
		_g.h["é"] = "e";
	}
	if(__map_reserved["ê"] != null) {
		_g.setReserved("ê","e");
	} else {
		_g.h["ê"] = "e";
	}
	if(__map_reserved["ề"] != null) {
		_g.setReserved("ề","e");
	} else {
		_g.h["ề"] = "e";
	}
	if(__map_reserved["ế"] != null) {
		_g.setReserved("ế","e");
	} else {
		_g.h["ế"] = "e";
	}
	if(__map_reserved["ễ"] != null) {
		_g.setReserved("ễ","e");
	} else {
		_g.h["ễ"] = "e";
	}
	if(__map_reserved["ể"] != null) {
		_g.setReserved("ể","e");
	} else {
		_g.h["ể"] = "e";
	}
	if(__map_reserved["ẽ"] != null) {
		_g.setReserved("ẽ","e");
	} else {
		_g.h["ẽ"] = "e";
	}
	if(__map_reserved["ē"] != null) {
		_g.setReserved("ē","e");
	} else {
		_g.h["ē"] = "e";
	}
	if(__map_reserved["ḕ"] != null) {
		_g.setReserved("ḕ","e");
	} else {
		_g.h["ḕ"] = "e";
	}
	if(__map_reserved["ḗ"] != null) {
		_g.setReserved("ḗ","e");
	} else {
		_g.h["ḗ"] = "e";
	}
	if(__map_reserved["ĕ"] != null) {
		_g.setReserved("ĕ","e");
	} else {
		_g.h["ĕ"] = "e";
	}
	if(__map_reserved["ė"] != null) {
		_g.setReserved("ė","e");
	} else {
		_g.h["ė"] = "e";
	}
	if(__map_reserved["ë"] != null) {
		_g.setReserved("ë","e");
	} else {
		_g.h["ë"] = "e";
	}
	if(__map_reserved["ẻ"] != null) {
		_g.setReserved("ẻ","e");
	} else {
		_g.h["ẻ"] = "e";
	}
	if(__map_reserved["ě"] != null) {
		_g.setReserved("ě","e");
	} else {
		_g.h["ě"] = "e";
	}
	if(__map_reserved["ȅ"] != null) {
		_g.setReserved("ȅ","e");
	} else {
		_g.h["ȅ"] = "e";
	}
	if(__map_reserved["ȇ"] != null) {
		_g.setReserved("ȇ","e");
	} else {
		_g.h["ȇ"] = "e";
	}
	if(__map_reserved["ẹ"] != null) {
		_g.setReserved("ẹ","e");
	} else {
		_g.h["ẹ"] = "e";
	}
	if(__map_reserved["ệ"] != null) {
		_g.setReserved("ệ","e");
	} else {
		_g.h["ệ"] = "e";
	}
	if(__map_reserved["ȩ"] != null) {
		_g.setReserved("ȩ","e");
	} else {
		_g.h["ȩ"] = "e";
	}
	if(__map_reserved["ḝ"] != null) {
		_g.setReserved("ḝ","e");
	} else {
		_g.h["ḝ"] = "e";
	}
	if(__map_reserved["ę"] != null) {
		_g.setReserved("ę","e");
	} else {
		_g.h["ę"] = "e";
	}
	if(__map_reserved["ḙ"] != null) {
		_g.setReserved("ḙ","e");
	} else {
		_g.h["ḙ"] = "e";
	}
	if(__map_reserved["ḛ"] != null) {
		_g.setReserved("ḛ","e");
	} else {
		_g.h["ḛ"] = "e";
	}
	if(__map_reserved["ɇ"] != null) {
		_g.setReserved("ɇ","e");
	} else {
		_g.h["ɇ"] = "e";
	}
	if(__map_reserved["ɛ"] != null) {
		_g.setReserved("ɛ","e");
	} else {
		_g.h["ɛ"] = "e";
	}
	if(__map_reserved["ǝ"] != null) {
		_g.setReserved("ǝ","e");
	} else {
		_g.h["ǝ"] = "e";
	}
	if(__map_reserved["f"] != null) {
		_g.setReserved("f","f");
	} else {
		_g.h["f"] = "f";
	}
	if(__map_reserved["ⓕ"] != null) {
		_g.setReserved("ⓕ","f");
	} else {
		_g.h["ⓕ"] = "f";
	}
	if(__map_reserved["ｆ"] != null) {
		_g.setReserved("ｆ","f");
	} else {
		_g.h["ｆ"] = "f";
	}
	if(__map_reserved["ḟ"] != null) {
		_g.setReserved("ḟ","f");
	} else {
		_g.h["ḟ"] = "f";
	}
	if(__map_reserved["ƒ"] != null) {
		_g.setReserved("ƒ","f");
	} else {
		_g.h["ƒ"] = "f";
	}
	if(__map_reserved["ꝼ"] != null) {
		_g.setReserved("ꝼ","f");
	} else {
		_g.h["ꝼ"] = "f";
	}
	if(__map_reserved["ﬀ"] != null) {
		_g.setReserved("ﬀ","ff");
	} else {
		_g.h["ﬀ"] = "ff";
	}
	if(__map_reserved["ﬁ"] != null) {
		_g.setReserved("ﬁ","fi");
	} else {
		_g.h["ﬁ"] = "fi";
	}
	if(__map_reserved["ﬂ"] != null) {
		_g.setReserved("ﬂ","fl");
	} else {
		_g.h["ﬂ"] = "fl";
	}
	if(__map_reserved["ﬃ"] != null) {
		_g.setReserved("ﬃ","ffi");
	} else {
		_g.h["ﬃ"] = "ffi";
	}
	if(__map_reserved["ﬄ"] != null) {
		_g.setReserved("ﬄ","ffl");
	} else {
		_g.h["ﬄ"] = "ffl";
	}
	if(__map_reserved["g"] != null) {
		_g.setReserved("g","g");
	} else {
		_g.h["g"] = "g";
	}
	if(__map_reserved["ⓖ"] != null) {
		_g.setReserved("ⓖ","g");
	} else {
		_g.h["ⓖ"] = "g";
	}
	if(__map_reserved["ｇ"] != null) {
		_g.setReserved("ｇ","g");
	} else {
		_g.h["ｇ"] = "g";
	}
	if(__map_reserved["ǵ"] != null) {
		_g.setReserved("ǵ","g");
	} else {
		_g.h["ǵ"] = "g";
	}
	if(__map_reserved["ĝ"] != null) {
		_g.setReserved("ĝ","g");
	} else {
		_g.h["ĝ"] = "g";
	}
	if(__map_reserved["ḡ"] != null) {
		_g.setReserved("ḡ","g");
	} else {
		_g.h["ḡ"] = "g";
	}
	if(__map_reserved["ğ"] != null) {
		_g.setReserved("ğ","g");
	} else {
		_g.h["ğ"] = "g";
	}
	if(__map_reserved["ġ"] != null) {
		_g.setReserved("ġ","g");
	} else {
		_g.h["ġ"] = "g";
	}
	if(__map_reserved["ǧ"] != null) {
		_g.setReserved("ǧ","g");
	} else {
		_g.h["ǧ"] = "g";
	}
	if(__map_reserved["ģ"] != null) {
		_g.setReserved("ģ","g");
	} else {
		_g.h["ģ"] = "g";
	}
	if(__map_reserved["ǥ"] != null) {
		_g.setReserved("ǥ","g");
	} else {
		_g.h["ǥ"] = "g";
	}
	if(__map_reserved["ɠ"] != null) {
		_g.setReserved("ɠ","g");
	} else {
		_g.h["ɠ"] = "g";
	}
	if(__map_reserved["ꞡ"] != null) {
		_g.setReserved("ꞡ","g");
	} else {
		_g.h["ꞡ"] = "g";
	}
	if(__map_reserved["ᵹ"] != null) {
		_g.setReserved("ᵹ","g");
	} else {
		_g.h["ᵹ"] = "g";
	}
	if(__map_reserved["ꝿ"] != null) {
		_g.setReserved("ꝿ","g");
	} else {
		_g.h["ꝿ"] = "g";
	}
	if(__map_reserved["h"] != null) {
		_g.setReserved("h","h");
	} else {
		_g.h["h"] = "h";
	}
	if(__map_reserved["ⓗ"] != null) {
		_g.setReserved("ⓗ","h");
	} else {
		_g.h["ⓗ"] = "h";
	}
	if(__map_reserved["ｈ"] != null) {
		_g.setReserved("ｈ","h");
	} else {
		_g.h["ｈ"] = "h";
	}
	if(__map_reserved["ĥ"] != null) {
		_g.setReserved("ĥ","h");
	} else {
		_g.h["ĥ"] = "h";
	}
	if(__map_reserved["ḣ"] != null) {
		_g.setReserved("ḣ","h");
	} else {
		_g.h["ḣ"] = "h";
	}
	if(__map_reserved["ḧ"] != null) {
		_g.setReserved("ḧ","h");
	} else {
		_g.h["ḧ"] = "h";
	}
	if(__map_reserved["ȟ"] != null) {
		_g.setReserved("ȟ","h");
	} else {
		_g.h["ȟ"] = "h";
	}
	if(__map_reserved["ḥ"] != null) {
		_g.setReserved("ḥ","h");
	} else {
		_g.h["ḥ"] = "h";
	}
	if(__map_reserved["ḩ"] != null) {
		_g.setReserved("ḩ","h");
	} else {
		_g.h["ḩ"] = "h";
	}
	if(__map_reserved["ḫ"] != null) {
		_g.setReserved("ḫ","h");
	} else {
		_g.h["ḫ"] = "h";
	}
	if(__map_reserved["ẖ"] != null) {
		_g.setReserved("ẖ","h");
	} else {
		_g.h["ẖ"] = "h";
	}
	if(__map_reserved["ħ"] != null) {
		_g.setReserved("ħ","h");
	} else {
		_g.h["ħ"] = "h";
	}
	if(__map_reserved["ⱨ"] != null) {
		_g.setReserved("ⱨ","h");
	} else {
		_g.h["ⱨ"] = "h";
	}
	if(__map_reserved["ⱶ"] != null) {
		_g.setReserved("ⱶ","h");
	} else {
		_g.h["ⱶ"] = "h";
	}
	if(__map_reserved["ɥ"] != null) {
		_g.setReserved("ɥ","h");
	} else {
		_g.h["ɥ"] = "h";
	}
	if(__map_reserved["ƕ"] != null) {
		_g.setReserved("ƕ","hv");
	} else {
		_g.h["ƕ"] = "hv";
	}
	if(__map_reserved["i"] != null) {
		_g.setReserved("i","i");
	} else {
		_g.h["i"] = "i";
	}
	if(__map_reserved["ⓘ"] != null) {
		_g.setReserved("ⓘ","i");
	} else {
		_g.h["ⓘ"] = "i";
	}
	if(__map_reserved["ｉ"] != null) {
		_g.setReserved("ｉ","i");
	} else {
		_g.h["ｉ"] = "i";
	}
	if(__map_reserved["ì"] != null) {
		_g.setReserved("ì","i");
	} else {
		_g.h["ì"] = "i";
	}
	if(__map_reserved["í"] != null) {
		_g.setReserved("í","i");
	} else {
		_g.h["í"] = "i";
	}
	if(__map_reserved["î"] != null) {
		_g.setReserved("î","i");
	} else {
		_g.h["î"] = "i";
	}
	if(__map_reserved["ĩ"] != null) {
		_g.setReserved("ĩ","i");
	} else {
		_g.h["ĩ"] = "i";
	}
	if(__map_reserved["ī"] != null) {
		_g.setReserved("ī","i");
	} else {
		_g.h["ī"] = "i";
	}
	if(__map_reserved["ĭ"] != null) {
		_g.setReserved("ĭ","i");
	} else {
		_g.h["ĭ"] = "i";
	}
	if(__map_reserved["ï"] != null) {
		_g.setReserved("ï","i");
	} else {
		_g.h["ï"] = "i";
	}
	if(__map_reserved["ḯ"] != null) {
		_g.setReserved("ḯ","i");
	} else {
		_g.h["ḯ"] = "i";
	}
	if(__map_reserved["ỉ"] != null) {
		_g.setReserved("ỉ","i");
	} else {
		_g.h["ỉ"] = "i";
	}
	if(__map_reserved["ǐ"] != null) {
		_g.setReserved("ǐ","i");
	} else {
		_g.h["ǐ"] = "i";
	}
	if(__map_reserved["ȉ"] != null) {
		_g.setReserved("ȉ","i");
	} else {
		_g.h["ȉ"] = "i";
	}
	if(__map_reserved["ȋ"] != null) {
		_g.setReserved("ȋ","i");
	} else {
		_g.h["ȋ"] = "i";
	}
	if(__map_reserved["ị"] != null) {
		_g.setReserved("ị","i");
	} else {
		_g.h["ị"] = "i";
	}
	if(__map_reserved["į"] != null) {
		_g.setReserved("į","i");
	} else {
		_g.h["į"] = "i";
	}
	if(__map_reserved["ḭ"] != null) {
		_g.setReserved("ḭ","i");
	} else {
		_g.h["ḭ"] = "i";
	}
	if(__map_reserved["ɨ"] != null) {
		_g.setReserved("ɨ","i");
	} else {
		_g.h["ɨ"] = "i";
	}
	if(__map_reserved["ı"] != null) {
		_g.setReserved("ı","i");
	} else {
		_g.h["ı"] = "i";
	}
	if(__map_reserved["j"] != null) {
		_g.setReserved("j","j");
	} else {
		_g.h["j"] = "j";
	}
	if(__map_reserved["ⓙ"] != null) {
		_g.setReserved("ⓙ","j");
	} else {
		_g.h["ⓙ"] = "j";
	}
	if(__map_reserved["ｊ"] != null) {
		_g.setReserved("ｊ","j");
	} else {
		_g.h["ｊ"] = "j";
	}
	if(__map_reserved["ĵ"] != null) {
		_g.setReserved("ĵ","j");
	} else {
		_g.h["ĵ"] = "j";
	}
	if(__map_reserved["ǰ"] != null) {
		_g.setReserved("ǰ","j");
	} else {
		_g.h["ǰ"] = "j";
	}
	if(__map_reserved["ɉ"] != null) {
		_g.setReserved("ɉ","j");
	} else {
		_g.h["ɉ"] = "j";
	}
	if(__map_reserved["k"] != null) {
		_g.setReserved("k","k");
	} else {
		_g.h["k"] = "k";
	}
	if(__map_reserved["ⓚ"] != null) {
		_g.setReserved("ⓚ","k");
	} else {
		_g.h["ⓚ"] = "k";
	}
	if(__map_reserved["ｋ"] != null) {
		_g.setReserved("ｋ","k");
	} else {
		_g.h["ｋ"] = "k";
	}
	if(__map_reserved["ḱ"] != null) {
		_g.setReserved("ḱ","k");
	} else {
		_g.h["ḱ"] = "k";
	}
	if(__map_reserved["ǩ"] != null) {
		_g.setReserved("ǩ","k");
	} else {
		_g.h["ǩ"] = "k";
	}
	if(__map_reserved["ḳ"] != null) {
		_g.setReserved("ḳ","k");
	} else {
		_g.h["ḳ"] = "k";
	}
	if(__map_reserved["ķ"] != null) {
		_g.setReserved("ķ","k");
	} else {
		_g.h["ķ"] = "k";
	}
	if(__map_reserved["ḵ"] != null) {
		_g.setReserved("ḵ","k");
	} else {
		_g.h["ḵ"] = "k";
	}
	if(__map_reserved["ƙ"] != null) {
		_g.setReserved("ƙ","k");
	} else {
		_g.h["ƙ"] = "k";
	}
	if(__map_reserved["ⱪ"] != null) {
		_g.setReserved("ⱪ","k");
	} else {
		_g.h["ⱪ"] = "k";
	}
	if(__map_reserved["ꝁ"] != null) {
		_g.setReserved("ꝁ","k");
	} else {
		_g.h["ꝁ"] = "k";
	}
	if(__map_reserved["ꝃ"] != null) {
		_g.setReserved("ꝃ","k");
	} else {
		_g.h["ꝃ"] = "k";
	}
	if(__map_reserved["ꝅ"] != null) {
		_g.setReserved("ꝅ","k");
	} else {
		_g.h["ꝅ"] = "k";
	}
	if(__map_reserved["ꞣ"] != null) {
		_g.setReserved("ꞣ","k");
	} else {
		_g.h["ꞣ"] = "k";
	}
	if(__map_reserved["l"] != null) {
		_g.setReserved("l","l");
	} else {
		_g.h["l"] = "l";
	}
	if(__map_reserved["ⓛ"] != null) {
		_g.setReserved("ⓛ","l");
	} else {
		_g.h["ⓛ"] = "l";
	}
	if(__map_reserved["ｌ"] != null) {
		_g.setReserved("ｌ","l");
	} else {
		_g.h["ｌ"] = "l";
	}
	if(__map_reserved["ŀ"] != null) {
		_g.setReserved("ŀ","l");
	} else {
		_g.h["ŀ"] = "l";
	}
	if(__map_reserved["ĺ"] != null) {
		_g.setReserved("ĺ","l");
	} else {
		_g.h["ĺ"] = "l";
	}
	if(__map_reserved["ľ"] != null) {
		_g.setReserved("ľ","l");
	} else {
		_g.h["ľ"] = "l";
	}
	if(__map_reserved["ḷ"] != null) {
		_g.setReserved("ḷ","l");
	} else {
		_g.h["ḷ"] = "l";
	}
	if(__map_reserved["ḹ"] != null) {
		_g.setReserved("ḹ","l");
	} else {
		_g.h["ḹ"] = "l";
	}
	if(__map_reserved["ļ"] != null) {
		_g.setReserved("ļ","l");
	} else {
		_g.h["ļ"] = "l";
	}
	if(__map_reserved["ḽ"] != null) {
		_g.setReserved("ḽ","l");
	} else {
		_g.h["ḽ"] = "l";
	}
	if(__map_reserved["ḻ"] != null) {
		_g.setReserved("ḻ","l");
	} else {
		_g.h["ḻ"] = "l";
	}
	if(__map_reserved["ſ"] != null) {
		_g.setReserved("ſ","l");
	} else {
		_g.h["ſ"] = "l";
	}
	if(__map_reserved["ł"] != null) {
		_g.setReserved("ł","l");
	} else {
		_g.h["ł"] = "l";
	}
	if(__map_reserved["ƚ"] != null) {
		_g.setReserved("ƚ","l");
	} else {
		_g.h["ƚ"] = "l";
	}
	if(__map_reserved["ɫ"] != null) {
		_g.setReserved("ɫ","l");
	} else {
		_g.h["ɫ"] = "l";
	}
	if(__map_reserved["ⱡ"] != null) {
		_g.setReserved("ⱡ","l");
	} else {
		_g.h["ⱡ"] = "l";
	}
	if(__map_reserved["ꝉ"] != null) {
		_g.setReserved("ꝉ","l");
	} else {
		_g.h["ꝉ"] = "l";
	}
	if(__map_reserved["ꞁ"] != null) {
		_g.setReserved("ꞁ","l");
	} else {
		_g.h["ꞁ"] = "l";
	}
	if(__map_reserved["ꝇ"] != null) {
		_g.setReserved("ꝇ","l");
	} else {
		_g.h["ꝇ"] = "l";
	}
	if(__map_reserved["ǉ"] != null) {
		_g.setReserved("ǉ","lj");
	} else {
		_g.h["ǉ"] = "lj";
	}
	if(__map_reserved["m"] != null) {
		_g.setReserved("m","m");
	} else {
		_g.h["m"] = "m";
	}
	if(__map_reserved["ⓜ"] != null) {
		_g.setReserved("ⓜ","m");
	} else {
		_g.h["ⓜ"] = "m";
	}
	if(__map_reserved["ｍ"] != null) {
		_g.setReserved("ｍ","m");
	} else {
		_g.h["ｍ"] = "m";
	}
	if(__map_reserved["ḿ"] != null) {
		_g.setReserved("ḿ","m");
	} else {
		_g.h["ḿ"] = "m";
	}
	if(__map_reserved["ṁ"] != null) {
		_g.setReserved("ṁ","m");
	} else {
		_g.h["ṁ"] = "m";
	}
	if(__map_reserved["ṃ"] != null) {
		_g.setReserved("ṃ","m");
	} else {
		_g.h["ṃ"] = "m";
	}
	if(__map_reserved["ɱ"] != null) {
		_g.setReserved("ɱ","m");
	} else {
		_g.h["ɱ"] = "m";
	}
	if(__map_reserved["ɯ"] != null) {
		_g.setReserved("ɯ","m");
	} else {
		_g.h["ɯ"] = "m";
	}
	if(__map_reserved["n"] != null) {
		_g.setReserved("n","n");
	} else {
		_g.h["n"] = "n";
	}
	if(__map_reserved["�"] != null) {
		_g.setReserved("�","ss");
	} else {
		_g.h["�"] = "ss";
	}
	if(__map_reserved["ⓝ"] != null) {
		_g.setReserved("ⓝ","n");
	} else {
		_g.h["ⓝ"] = "n";
	}
	if(__map_reserved["ｎ"] != null) {
		_g.setReserved("ｎ","n");
	} else {
		_g.h["ｎ"] = "n";
	}
	if(__map_reserved["ǹ"] != null) {
		_g.setReserved("ǹ","n");
	} else {
		_g.h["ǹ"] = "n";
	}
	if(__map_reserved["ń"] != null) {
		_g.setReserved("ń","n");
	} else {
		_g.h["ń"] = "n";
	}
	if(__map_reserved["ñ"] != null) {
		_g.setReserved("ñ","n");
	} else {
		_g.h["ñ"] = "n";
	}
	if(__map_reserved["ṅ"] != null) {
		_g.setReserved("ṅ","n");
	} else {
		_g.h["ṅ"] = "n";
	}
	if(__map_reserved["ň"] != null) {
		_g.setReserved("ň","n");
	} else {
		_g.h["ň"] = "n";
	}
	if(__map_reserved["ṇ"] != null) {
		_g.setReserved("ṇ","n");
	} else {
		_g.h["ṇ"] = "n";
	}
	if(__map_reserved["ņ"] != null) {
		_g.setReserved("ņ","n");
	} else {
		_g.h["ņ"] = "n";
	}
	if(__map_reserved["ṋ"] != null) {
		_g.setReserved("ṋ","n");
	} else {
		_g.h["ṋ"] = "n";
	}
	if(__map_reserved["ṉ"] != null) {
		_g.setReserved("ṉ","n");
	} else {
		_g.h["ṉ"] = "n";
	}
	if(__map_reserved["ƞ"] != null) {
		_g.setReserved("ƞ","n");
	} else {
		_g.h["ƞ"] = "n";
	}
	if(__map_reserved["ɲ"] != null) {
		_g.setReserved("ɲ","n");
	} else {
		_g.h["ɲ"] = "n";
	}
	if(__map_reserved["ŉ"] != null) {
		_g.setReserved("ŉ","n");
	} else {
		_g.h["ŉ"] = "n";
	}
	if(__map_reserved["ꞑ"] != null) {
		_g.setReserved("ꞑ","n");
	} else {
		_g.h["ꞑ"] = "n";
	}
	if(__map_reserved["ꞥ"] != null) {
		_g.setReserved("ꞥ","n");
	} else {
		_g.h["ꞥ"] = "n";
	}
	if(__map_reserved["л"] != null) {
		_g.setReserved("л","n");
	} else {
		_g.h["л"] = "n";
	}
	if(__map_reserved["ԉ"] != null) {
		_g.setReserved("ԉ","n");
	} else {
		_g.h["ԉ"] = "n";
	}
	if(__map_reserved["ǌ"] != null) {
		_g.setReserved("ǌ","nj");
	} else {
		_g.h["ǌ"] = "nj";
	}
	if(__map_reserved["߀"] != null) {
		_g.setReserved("߀","o");
	} else {
		_g.h["߀"] = "o";
	}
	if(__map_reserved["o"] != null) {
		_g.setReserved("o","o");
	} else {
		_g.h["o"] = "o";
	}
	if(__map_reserved["ⓞ"] != null) {
		_g.setReserved("ⓞ","o");
	} else {
		_g.h["ⓞ"] = "o";
	}
	if(__map_reserved["ｏ"] != null) {
		_g.setReserved("ｏ","o");
	} else {
		_g.h["ｏ"] = "o";
	}
	if(__map_reserved["ò"] != null) {
		_g.setReserved("ò","o");
	} else {
		_g.h["ò"] = "o";
	}
	if(__map_reserved["ó"] != null) {
		_g.setReserved("ó","o");
	} else {
		_g.h["ó"] = "o";
	}
	if(__map_reserved["ô"] != null) {
		_g.setReserved("ô","o");
	} else {
		_g.h["ô"] = "o";
	}
	if(__map_reserved["ồ"] != null) {
		_g.setReserved("ồ","o");
	} else {
		_g.h["ồ"] = "o";
	}
	if(__map_reserved["ố"] != null) {
		_g.setReserved("ố","o");
	} else {
		_g.h["ố"] = "o";
	}
	if(__map_reserved["ỗ"] != null) {
		_g.setReserved("ỗ","o");
	} else {
		_g.h["ỗ"] = "o";
	}
	if(__map_reserved["ổ"] != null) {
		_g.setReserved("ổ","o");
	} else {
		_g.h["ổ"] = "o";
	}
	if(__map_reserved["õ"] != null) {
		_g.setReserved("õ","o");
	} else {
		_g.h["õ"] = "o";
	}
	if(__map_reserved["ṍ"] != null) {
		_g.setReserved("ṍ","o");
	} else {
		_g.h["ṍ"] = "o";
	}
	if(__map_reserved["ȭ"] != null) {
		_g.setReserved("ȭ","o");
	} else {
		_g.h["ȭ"] = "o";
	}
	if(__map_reserved["ṏ"] != null) {
		_g.setReserved("ṏ","o");
	} else {
		_g.h["ṏ"] = "o";
	}
	if(__map_reserved["ō"] != null) {
		_g.setReserved("ō","o");
	} else {
		_g.h["ō"] = "o";
	}
	if(__map_reserved["ṑ"] != null) {
		_g.setReserved("ṑ","o");
	} else {
		_g.h["ṑ"] = "o";
	}
	if(__map_reserved["ṓ"] != null) {
		_g.setReserved("ṓ","o");
	} else {
		_g.h["ṓ"] = "o";
	}
	if(__map_reserved["ŏ"] != null) {
		_g.setReserved("ŏ","o");
	} else {
		_g.h["ŏ"] = "o";
	}
	if(__map_reserved["ȯ"] != null) {
		_g.setReserved("ȯ","o");
	} else {
		_g.h["ȯ"] = "o";
	}
	if(__map_reserved["ȱ"] != null) {
		_g.setReserved("ȱ","o");
	} else {
		_g.h["ȱ"] = "o";
	}
	if(__map_reserved["ö"] != null) {
		_g.setReserved("ö","o");
	} else {
		_g.h["ö"] = "o";
	}
	if(__map_reserved["ȫ"] != null) {
		_g.setReserved("ȫ","o");
	} else {
		_g.h["ȫ"] = "o";
	}
	if(__map_reserved["ỏ"] != null) {
		_g.setReserved("ỏ","o");
	} else {
		_g.h["ỏ"] = "o";
	}
	if(__map_reserved["ő"] != null) {
		_g.setReserved("ő","o");
	} else {
		_g.h["ő"] = "o";
	}
	if(__map_reserved["ǒ"] != null) {
		_g.setReserved("ǒ","o");
	} else {
		_g.h["ǒ"] = "o";
	}
	if(__map_reserved["ȍ"] != null) {
		_g.setReserved("ȍ","o");
	} else {
		_g.h["ȍ"] = "o";
	}
	if(__map_reserved["ȏ"] != null) {
		_g.setReserved("ȏ","o");
	} else {
		_g.h["ȏ"] = "o";
	}
	if(__map_reserved["ơ"] != null) {
		_g.setReserved("ơ","o");
	} else {
		_g.h["ơ"] = "o";
	}
	if(__map_reserved["ờ"] != null) {
		_g.setReserved("ờ","o");
	} else {
		_g.h["ờ"] = "o";
	}
	if(__map_reserved["ớ"] != null) {
		_g.setReserved("ớ","o");
	} else {
		_g.h["ớ"] = "o";
	}
	if(__map_reserved["ỡ"] != null) {
		_g.setReserved("ỡ","o");
	} else {
		_g.h["ỡ"] = "o";
	}
	if(__map_reserved["ở"] != null) {
		_g.setReserved("ở","o");
	} else {
		_g.h["ở"] = "o";
	}
	if(__map_reserved["ợ"] != null) {
		_g.setReserved("ợ","o");
	} else {
		_g.h["ợ"] = "o";
	}
	if(__map_reserved["ọ"] != null) {
		_g.setReserved("ọ","o");
	} else {
		_g.h["ọ"] = "o";
	}
	if(__map_reserved["ộ"] != null) {
		_g.setReserved("ộ","o");
	} else {
		_g.h["ộ"] = "o";
	}
	if(__map_reserved["ǫ"] != null) {
		_g.setReserved("ǫ","o");
	} else {
		_g.h["ǫ"] = "o";
	}
	if(__map_reserved["ǭ"] != null) {
		_g.setReserved("ǭ","o");
	} else {
		_g.h["ǭ"] = "o";
	}
	if(__map_reserved["ø"] != null) {
		_g.setReserved("ø","o");
	} else {
		_g.h["ø"] = "o";
	}
	if(__map_reserved["ǿ"] != null) {
		_g.setReserved("ǿ","o");
	} else {
		_g.h["ǿ"] = "o";
	}
	if(__map_reserved["ɔ"] != null) {
		_g.setReserved("ɔ","o");
	} else {
		_g.h["ɔ"] = "o";
	}
	if(__map_reserved["ꝋ"] != null) {
		_g.setReserved("ꝋ","o");
	} else {
		_g.h["ꝋ"] = "o";
	}
	if(__map_reserved["ꝍ"] != null) {
		_g.setReserved("ꝍ","o");
	} else {
		_g.h["ꝍ"] = "o";
	}
	if(__map_reserved["ɵ"] != null) {
		_g.setReserved("ɵ","o");
	} else {
		_g.h["ɵ"] = "o";
	}
	if(__map_reserved["Œ"] != null) {
		_g.setReserved("Œ","oe");
	} else {
		_g.h["Œ"] = "oe";
	}
	if(__map_reserved["œ"] != null) {
		_g.setReserved("œ","oe");
	} else {
		_g.h["œ"] = "oe";
	}
	if(__map_reserved["ƣ"] != null) {
		_g.setReserved("ƣ","oi");
	} else {
		_g.h["ƣ"] = "oi";
	}
	if(__map_reserved["ȣ"] != null) {
		_g.setReserved("ȣ","ou");
	} else {
		_g.h["ȣ"] = "ou";
	}
	if(__map_reserved["ꝏ"] != null) {
		_g.setReserved("ꝏ","oo");
	} else {
		_g.h["ꝏ"] = "oo";
	}
	if(__map_reserved["p"] != null) {
		_g.setReserved("p","p");
	} else {
		_g.h["p"] = "p";
	}
	if(__map_reserved["ⓟ"] != null) {
		_g.setReserved("ⓟ","p");
	} else {
		_g.h["ⓟ"] = "p";
	}
	if(__map_reserved["ｐ"] != null) {
		_g.setReserved("ｐ","p");
	} else {
		_g.h["ｐ"] = "p";
	}
	if(__map_reserved["ṕ"] != null) {
		_g.setReserved("ṕ","p");
	} else {
		_g.h["ṕ"] = "p";
	}
	if(__map_reserved["ṗ"] != null) {
		_g.setReserved("ṗ","p");
	} else {
		_g.h["ṗ"] = "p";
	}
	if(__map_reserved["ƥ"] != null) {
		_g.setReserved("ƥ","p");
	} else {
		_g.h["ƥ"] = "p";
	}
	if(__map_reserved["ᵽ"] != null) {
		_g.setReserved("ᵽ","p");
	} else {
		_g.h["ᵽ"] = "p";
	}
	if(__map_reserved["ꝑ"] != null) {
		_g.setReserved("ꝑ","p");
	} else {
		_g.h["ꝑ"] = "p";
	}
	if(__map_reserved["ꝓ"] != null) {
		_g.setReserved("ꝓ","p");
	} else {
		_g.h["ꝓ"] = "p";
	}
	if(__map_reserved["ꝕ"] != null) {
		_g.setReserved("ꝕ","p");
	} else {
		_g.h["ꝕ"] = "p";
	}
	if(__map_reserved["q"] != null) {
		_g.setReserved("q","q");
	} else {
		_g.h["q"] = "q";
	}
	if(__map_reserved["ⓠ"] != null) {
		_g.setReserved("ⓠ","q");
	} else {
		_g.h["ⓠ"] = "q";
	}
	if(__map_reserved["ｑ"] != null) {
		_g.setReserved("ｑ","q");
	} else {
		_g.h["ｑ"] = "q";
	}
	if(__map_reserved["ɋ"] != null) {
		_g.setReserved("ɋ","q");
	} else {
		_g.h["ɋ"] = "q";
	}
	if(__map_reserved["ꝗ"] != null) {
		_g.setReserved("ꝗ","q");
	} else {
		_g.h["ꝗ"] = "q";
	}
	if(__map_reserved["ꝙ"] != null) {
		_g.setReserved("ꝙ","q");
	} else {
		_g.h["ꝙ"] = "q";
	}
	if(__map_reserved["r"] != null) {
		_g.setReserved("r","r");
	} else {
		_g.h["r"] = "r";
	}
	if(__map_reserved["ⓡ"] != null) {
		_g.setReserved("ⓡ","r");
	} else {
		_g.h["ⓡ"] = "r";
	}
	if(__map_reserved["ｒ"] != null) {
		_g.setReserved("ｒ","r");
	} else {
		_g.h["ｒ"] = "r";
	}
	if(__map_reserved["ŕ"] != null) {
		_g.setReserved("ŕ","r");
	} else {
		_g.h["ŕ"] = "r";
	}
	if(__map_reserved["ṙ"] != null) {
		_g.setReserved("ṙ","r");
	} else {
		_g.h["ṙ"] = "r";
	}
	if(__map_reserved["ř"] != null) {
		_g.setReserved("ř","r");
	} else {
		_g.h["ř"] = "r";
	}
	if(__map_reserved["ȑ"] != null) {
		_g.setReserved("ȑ","r");
	} else {
		_g.h["ȑ"] = "r";
	}
	if(__map_reserved["ȓ"] != null) {
		_g.setReserved("ȓ","r");
	} else {
		_g.h["ȓ"] = "r";
	}
	if(__map_reserved["ṛ"] != null) {
		_g.setReserved("ṛ","r");
	} else {
		_g.h["ṛ"] = "r";
	}
	if(__map_reserved["ṝ"] != null) {
		_g.setReserved("ṝ","r");
	} else {
		_g.h["ṝ"] = "r";
	}
	if(__map_reserved["ŗ"] != null) {
		_g.setReserved("ŗ","r");
	} else {
		_g.h["ŗ"] = "r";
	}
	if(__map_reserved["ṟ"] != null) {
		_g.setReserved("ṟ","r");
	} else {
		_g.h["ṟ"] = "r";
	}
	if(__map_reserved["ɍ"] != null) {
		_g.setReserved("ɍ","r");
	} else {
		_g.h["ɍ"] = "r";
	}
	if(__map_reserved["ɽ"] != null) {
		_g.setReserved("ɽ","r");
	} else {
		_g.h["ɽ"] = "r";
	}
	if(__map_reserved["ꝛ"] != null) {
		_g.setReserved("ꝛ","r");
	} else {
		_g.h["ꝛ"] = "r";
	}
	if(__map_reserved["ꞧ"] != null) {
		_g.setReserved("ꞧ","r");
	} else {
		_g.h["ꞧ"] = "r";
	}
	if(__map_reserved["ꞃ"] != null) {
		_g.setReserved("ꞃ","r");
	} else {
		_g.h["ꞃ"] = "r";
	}
	if(__map_reserved["s"] != null) {
		_g.setReserved("s","s");
	} else {
		_g.h["s"] = "s";
	}
	if(__map_reserved["ⓢ"] != null) {
		_g.setReserved("ⓢ","s");
	} else {
		_g.h["ⓢ"] = "s";
	}
	if(__map_reserved["ｓ"] != null) {
		_g.setReserved("ｓ","s");
	} else {
		_g.h["ｓ"] = "s";
	}
	if(__map_reserved["ß"] != null) {
		_g.setReserved("ß","s");
	} else {
		_g.h["ß"] = "s";
	}
	if(__map_reserved["ś"] != null) {
		_g.setReserved("ś","s");
	} else {
		_g.h["ś"] = "s";
	}
	if(__map_reserved["ṥ"] != null) {
		_g.setReserved("ṥ","s");
	} else {
		_g.h["ṥ"] = "s";
	}
	if(__map_reserved["ŝ"] != null) {
		_g.setReserved("ŝ","s");
	} else {
		_g.h["ŝ"] = "s";
	}
	if(__map_reserved["ṡ"] != null) {
		_g.setReserved("ṡ","s");
	} else {
		_g.h["ṡ"] = "s";
	}
	if(__map_reserved["š"] != null) {
		_g.setReserved("š","s");
	} else {
		_g.h["š"] = "s";
	}
	if(__map_reserved["ṧ"] != null) {
		_g.setReserved("ṧ","s");
	} else {
		_g.h["ṧ"] = "s";
	}
	if(__map_reserved["ṣ"] != null) {
		_g.setReserved("ṣ","s");
	} else {
		_g.h["ṣ"] = "s";
	}
	if(__map_reserved["ṩ"] != null) {
		_g.setReserved("ṩ","s");
	} else {
		_g.h["ṩ"] = "s";
	}
	if(__map_reserved["ș"] != null) {
		_g.setReserved("ș","s");
	} else {
		_g.h["ș"] = "s";
	}
	if(__map_reserved["ş"] != null) {
		_g.setReserved("ş","s");
	} else {
		_g.h["ş"] = "s";
	}
	if(__map_reserved["ȿ"] != null) {
		_g.setReserved("ȿ","s");
	} else {
		_g.h["ȿ"] = "s";
	}
	if(__map_reserved["ꞩ"] != null) {
		_g.setReserved("ꞩ","s");
	} else {
		_g.h["ꞩ"] = "s";
	}
	if(__map_reserved["ꞅ"] != null) {
		_g.setReserved("ꞅ","s");
	} else {
		_g.h["ꞅ"] = "s";
	}
	if(__map_reserved["ẛ"] != null) {
		_g.setReserved("ẛ","s");
	} else {
		_g.h["ẛ"] = "s";
	}
	if(__map_reserved["t"] != null) {
		_g.setReserved("t","t");
	} else {
		_g.h["t"] = "t";
	}
	if(__map_reserved["ⓣ"] != null) {
		_g.setReserved("ⓣ","t");
	} else {
		_g.h["ⓣ"] = "t";
	}
	if(__map_reserved["ｔ"] != null) {
		_g.setReserved("ｔ","t");
	} else {
		_g.h["ｔ"] = "t";
	}
	if(__map_reserved["ṫ"] != null) {
		_g.setReserved("ṫ","t");
	} else {
		_g.h["ṫ"] = "t";
	}
	if(__map_reserved["ẗ"] != null) {
		_g.setReserved("ẗ","t");
	} else {
		_g.h["ẗ"] = "t";
	}
	if(__map_reserved["ť"] != null) {
		_g.setReserved("ť","t");
	} else {
		_g.h["ť"] = "t";
	}
	if(__map_reserved["ṭ"] != null) {
		_g.setReserved("ṭ","t");
	} else {
		_g.h["ṭ"] = "t";
	}
	if(__map_reserved["ț"] != null) {
		_g.setReserved("ț","t");
	} else {
		_g.h["ț"] = "t";
	}
	if(__map_reserved["ţ"] != null) {
		_g.setReserved("ţ","t");
	} else {
		_g.h["ţ"] = "t";
	}
	if(__map_reserved["ṱ"] != null) {
		_g.setReserved("ṱ","t");
	} else {
		_g.h["ṱ"] = "t";
	}
	if(__map_reserved["ṯ"] != null) {
		_g.setReserved("ṯ","t");
	} else {
		_g.h["ṯ"] = "t";
	}
	if(__map_reserved["ŧ"] != null) {
		_g.setReserved("ŧ","t");
	} else {
		_g.h["ŧ"] = "t";
	}
	if(__map_reserved["ƭ"] != null) {
		_g.setReserved("ƭ","t");
	} else {
		_g.h["ƭ"] = "t";
	}
	if(__map_reserved["ʈ"] != null) {
		_g.setReserved("ʈ","t");
	} else {
		_g.h["ʈ"] = "t";
	}
	if(__map_reserved["ⱦ"] != null) {
		_g.setReserved("ⱦ","t");
	} else {
		_g.h["ⱦ"] = "t";
	}
	if(__map_reserved["ꞇ"] != null) {
		_g.setReserved("ꞇ","t");
	} else {
		_g.h["ꞇ"] = "t";
	}
	if(__map_reserved["þ"] != null) {
		_g.setReserved("þ","th");
	} else {
		_g.h["þ"] = "th";
	}
	if(__map_reserved["ꜩ"] != null) {
		_g.setReserved("ꜩ","tz");
	} else {
		_g.h["ꜩ"] = "tz";
	}
	if(__map_reserved["u"] != null) {
		_g.setReserved("u","u");
	} else {
		_g.h["u"] = "u";
	}
	if(__map_reserved["ⓤ"] != null) {
		_g.setReserved("ⓤ","u");
	} else {
		_g.h["ⓤ"] = "u";
	}
	if(__map_reserved["ｕ"] != null) {
		_g.setReserved("ｕ","u");
	} else {
		_g.h["ｕ"] = "u";
	}
	if(__map_reserved["ù"] != null) {
		_g.setReserved("ù","u");
	} else {
		_g.h["ù"] = "u";
	}
	if(__map_reserved["ú"] != null) {
		_g.setReserved("ú","u");
	} else {
		_g.h["ú"] = "u";
	}
	if(__map_reserved["û"] != null) {
		_g.setReserved("û","u");
	} else {
		_g.h["û"] = "u";
	}
	if(__map_reserved["ũ"] != null) {
		_g.setReserved("ũ","u");
	} else {
		_g.h["ũ"] = "u";
	}
	if(__map_reserved["ṹ"] != null) {
		_g.setReserved("ṹ","u");
	} else {
		_g.h["ṹ"] = "u";
	}
	if(__map_reserved["ū"] != null) {
		_g.setReserved("ū","u");
	} else {
		_g.h["ū"] = "u";
	}
	if(__map_reserved["ṻ"] != null) {
		_g.setReserved("ṻ","u");
	} else {
		_g.h["ṻ"] = "u";
	}
	if(__map_reserved["ŭ"] != null) {
		_g.setReserved("ŭ","u");
	} else {
		_g.h["ŭ"] = "u";
	}
	if(__map_reserved["ü"] != null) {
		_g.setReserved("ü","u");
	} else {
		_g.h["ü"] = "u";
	}
	if(__map_reserved["ǜ"] != null) {
		_g.setReserved("ǜ","u");
	} else {
		_g.h["ǜ"] = "u";
	}
	if(__map_reserved["ǘ"] != null) {
		_g.setReserved("ǘ","u");
	} else {
		_g.h["ǘ"] = "u";
	}
	if(__map_reserved["ǖ"] != null) {
		_g.setReserved("ǖ","u");
	} else {
		_g.h["ǖ"] = "u";
	}
	if(__map_reserved["ǚ"] != null) {
		_g.setReserved("ǚ","u");
	} else {
		_g.h["ǚ"] = "u";
	}
	if(__map_reserved["ủ"] != null) {
		_g.setReserved("ủ","u");
	} else {
		_g.h["ủ"] = "u";
	}
	if(__map_reserved["ů"] != null) {
		_g.setReserved("ů","u");
	} else {
		_g.h["ů"] = "u";
	}
	if(__map_reserved["ű"] != null) {
		_g.setReserved("ű","u");
	} else {
		_g.h["ű"] = "u";
	}
	if(__map_reserved["ǔ"] != null) {
		_g.setReserved("ǔ","u");
	} else {
		_g.h["ǔ"] = "u";
	}
	if(__map_reserved["ȕ"] != null) {
		_g.setReserved("ȕ","u");
	} else {
		_g.h["ȕ"] = "u";
	}
	if(__map_reserved["ȗ"] != null) {
		_g.setReserved("ȗ","u");
	} else {
		_g.h["ȗ"] = "u";
	}
	if(__map_reserved["ư"] != null) {
		_g.setReserved("ư","u");
	} else {
		_g.h["ư"] = "u";
	}
	if(__map_reserved["ừ"] != null) {
		_g.setReserved("ừ","u");
	} else {
		_g.h["ừ"] = "u";
	}
	if(__map_reserved["ứ"] != null) {
		_g.setReserved("ứ","u");
	} else {
		_g.h["ứ"] = "u";
	}
	if(__map_reserved["ữ"] != null) {
		_g.setReserved("ữ","u");
	} else {
		_g.h["ữ"] = "u";
	}
	if(__map_reserved["ử"] != null) {
		_g.setReserved("ử","u");
	} else {
		_g.h["ử"] = "u";
	}
	if(__map_reserved["ự"] != null) {
		_g.setReserved("ự","u");
	} else {
		_g.h["ự"] = "u";
	}
	if(__map_reserved["ụ"] != null) {
		_g.setReserved("ụ","u");
	} else {
		_g.h["ụ"] = "u";
	}
	if(__map_reserved["ṳ"] != null) {
		_g.setReserved("ṳ","u");
	} else {
		_g.h["ṳ"] = "u";
	}
	if(__map_reserved["ų"] != null) {
		_g.setReserved("ų","u");
	} else {
		_g.h["ų"] = "u";
	}
	if(__map_reserved["ṷ"] != null) {
		_g.setReserved("ṷ","u");
	} else {
		_g.h["ṷ"] = "u";
	}
	if(__map_reserved["ṵ"] != null) {
		_g.setReserved("ṵ","u");
	} else {
		_g.h["ṵ"] = "u";
	}
	if(__map_reserved["ʉ"] != null) {
		_g.setReserved("ʉ","u");
	} else {
		_g.h["ʉ"] = "u";
	}
	if(__map_reserved["v"] != null) {
		_g.setReserved("v","v");
	} else {
		_g.h["v"] = "v";
	}
	if(__map_reserved["ⓥ"] != null) {
		_g.setReserved("ⓥ","v");
	} else {
		_g.h["ⓥ"] = "v";
	}
	if(__map_reserved["ｖ"] != null) {
		_g.setReserved("ｖ","v");
	} else {
		_g.h["ｖ"] = "v";
	}
	if(__map_reserved["ṽ"] != null) {
		_g.setReserved("ṽ","v");
	} else {
		_g.h["ṽ"] = "v";
	}
	if(__map_reserved["ṿ"] != null) {
		_g.setReserved("ṿ","v");
	} else {
		_g.h["ṿ"] = "v";
	}
	if(__map_reserved["ʋ"] != null) {
		_g.setReserved("ʋ","v");
	} else {
		_g.h["ʋ"] = "v";
	}
	if(__map_reserved["ꝟ"] != null) {
		_g.setReserved("ꝟ","v");
	} else {
		_g.h["ꝟ"] = "v";
	}
	if(__map_reserved["ʌ"] != null) {
		_g.setReserved("ʌ","v");
	} else {
		_g.h["ʌ"] = "v";
	}
	if(__map_reserved["ꝡ"] != null) {
		_g.setReserved("ꝡ","vy");
	} else {
		_g.h["ꝡ"] = "vy";
	}
	if(__map_reserved["w"] != null) {
		_g.setReserved("w","w");
	} else {
		_g.h["w"] = "w";
	}
	if(__map_reserved["ⓦ"] != null) {
		_g.setReserved("ⓦ","w");
	} else {
		_g.h["ⓦ"] = "w";
	}
	if(__map_reserved["ｗ"] != null) {
		_g.setReserved("ｗ","w");
	} else {
		_g.h["ｗ"] = "w";
	}
	if(__map_reserved["ẁ"] != null) {
		_g.setReserved("ẁ","w");
	} else {
		_g.h["ẁ"] = "w";
	}
	if(__map_reserved["ẃ"] != null) {
		_g.setReserved("ẃ","w");
	} else {
		_g.h["ẃ"] = "w";
	}
	if(__map_reserved["ŵ"] != null) {
		_g.setReserved("ŵ","w");
	} else {
		_g.h["ŵ"] = "w";
	}
	if(__map_reserved["ẇ"] != null) {
		_g.setReserved("ẇ","w");
	} else {
		_g.h["ẇ"] = "w";
	}
	if(__map_reserved["ẅ"] != null) {
		_g.setReserved("ẅ","w");
	} else {
		_g.h["ẅ"] = "w";
	}
	if(__map_reserved["ẘ"] != null) {
		_g.setReserved("ẘ","w");
	} else {
		_g.h["ẘ"] = "w";
	}
	if(__map_reserved["ẉ"] != null) {
		_g.setReserved("ẉ","w");
	} else {
		_g.h["ẉ"] = "w";
	}
	if(__map_reserved["ⱳ"] != null) {
		_g.setReserved("ⱳ","w");
	} else {
		_g.h["ⱳ"] = "w";
	}
	if(__map_reserved["x"] != null) {
		_g.setReserved("x","x");
	} else {
		_g.h["x"] = "x";
	}
	if(__map_reserved["ⓧ"] != null) {
		_g.setReserved("ⓧ","x");
	} else {
		_g.h["ⓧ"] = "x";
	}
	if(__map_reserved["ｘ"] != null) {
		_g.setReserved("ｘ","x");
	} else {
		_g.h["ｘ"] = "x";
	}
	if(__map_reserved["ẋ"] != null) {
		_g.setReserved("ẋ","x");
	} else {
		_g.h["ẋ"] = "x";
	}
	if(__map_reserved["ẍ"] != null) {
		_g.setReserved("ẍ","x");
	} else {
		_g.h["ẍ"] = "x";
	}
	if(__map_reserved["y"] != null) {
		_g.setReserved("y","y");
	} else {
		_g.h["y"] = "y";
	}
	if(__map_reserved["ⓨ"] != null) {
		_g.setReserved("ⓨ","y");
	} else {
		_g.h["ⓨ"] = "y";
	}
	if(__map_reserved["ｙ"] != null) {
		_g.setReserved("ｙ","y");
	} else {
		_g.h["ｙ"] = "y";
	}
	if(__map_reserved["ỳ"] != null) {
		_g.setReserved("ỳ","y");
	} else {
		_g.h["ỳ"] = "y";
	}
	if(__map_reserved["ý"] != null) {
		_g.setReserved("ý","y");
	} else {
		_g.h["ý"] = "y";
	}
	if(__map_reserved["ŷ"] != null) {
		_g.setReserved("ŷ","y");
	} else {
		_g.h["ŷ"] = "y";
	}
	if(__map_reserved["ỹ"] != null) {
		_g.setReserved("ỹ","y");
	} else {
		_g.h["ỹ"] = "y";
	}
	if(__map_reserved["ȳ"] != null) {
		_g.setReserved("ȳ","y");
	} else {
		_g.h["ȳ"] = "y";
	}
	if(__map_reserved["ẏ"] != null) {
		_g.setReserved("ẏ","y");
	} else {
		_g.h["ẏ"] = "y";
	}
	if(__map_reserved["ÿ"] != null) {
		_g.setReserved("ÿ","y");
	} else {
		_g.h["ÿ"] = "y";
	}
	if(__map_reserved["ỷ"] != null) {
		_g.setReserved("ỷ","y");
	} else {
		_g.h["ỷ"] = "y";
	}
	if(__map_reserved["ẙ"] != null) {
		_g.setReserved("ẙ","y");
	} else {
		_g.h["ẙ"] = "y";
	}
	if(__map_reserved["ỵ"] != null) {
		_g.setReserved("ỵ","y");
	} else {
		_g.h["ỵ"] = "y";
	}
	if(__map_reserved["ƴ"] != null) {
		_g.setReserved("ƴ","y");
	} else {
		_g.h["ƴ"] = "y";
	}
	if(__map_reserved["ɏ"] != null) {
		_g.setReserved("ɏ","y");
	} else {
		_g.h["ɏ"] = "y";
	}
	if(__map_reserved["ỿ"] != null) {
		_g.setReserved("ỿ","y");
	} else {
		_g.h["ỿ"] = "y";
	}
	if(__map_reserved["z"] != null) {
		_g.setReserved("z","z");
	} else {
		_g.h["z"] = "z";
	}
	if(__map_reserved["ⓩ"] != null) {
		_g.setReserved("ⓩ","z");
	} else {
		_g.h["ⓩ"] = "z";
	}
	if(__map_reserved["ｚ"] != null) {
		_g.setReserved("ｚ","z");
	} else {
		_g.h["ｚ"] = "z";
	}
	if(__map_reserved["ź"] != null) {
		_g.setReserved("ź","z");
	} else {
		_g.h["ź"] = "z";
	}
	if(__map_reserved["ẑ"] != null) {
		_g.setReserved("ẑ","z");
	} else {
		_g.h["ẑ"] = "z";
	}
	if(__map_reserved["ż"] != null) {
		_g.setReserved("ż","z");
	} else {
		_g.h["ż"] = "z";
	}
	if(__map_reserved["ž"] != null) {
		_g.setReserved("ž","z");
	} else {
		_g.h["ž"] = "z";
	}
	if(__map_reserved["ẓ"] != null) {
		_g.setReserved("ẓ","z");
	} else {
		_g.h["ẓ"] = "z";
	}
	if(__map_reserved["ẕ"] != null) {
		_g.setReserved("ẕ","z");
	} else {
		_g.h["ẕ"] = "z";
	}
	if(__map_reserved["ƶ"] != null) {
		_g.setReserved("ƶ","z");
	} else {
		_g.h["ƶ"] = "z";
	}
	if(__map_reserved["ȥ"] != null) {
		_g.setReserved("ȥ","z");
	} else {
		_g.h["ȥ"] = "z";
	}
	if(__map_reserved["ɀ"] != null) {
		_g.setReserved("ɀ","z");
	} else {
		_g.h["ɀ"] = "z";
	}
	if(__map_reserved["ⱬ"] != null) {
		_g.setReserved("ⱬ","z");
	} else {
		_g.h["ⱬ"] = "z";
	}
	if(__map_reserved["ꝣ"] != null) {
		_g.setReserved("ꝣ","z");
	} else {
		_g.h["ꝣ"] = "z";
	}
	$r = _g;
	return $r;
}(this));
Mots.jsReg = new EReg("\\ud83c[\\udf00-\\udfff]|\\ud83d[\\udc00-\\ude4f]|\\ud83d[\\ude80-\\udeff]","g");
TestMots.fileName = "Caâpture d’écra🐠n 2019-02ù-04 à 17.27.05.pngCapâtuærèëe d’écrāan 2019-02-04 à 17.27.05.png";
utest_TestHandler.POLLING_TIME = 10;
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
utest_ui_text_HtmlReport.platform = "javascript";
RunAll.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
