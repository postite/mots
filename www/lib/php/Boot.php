<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace php;

use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxAnon;
use \php\_Boot\HxClass;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\_Boot\HxEnum;

/**
 * Various Haxe->PHP compatibility utilities.
 * You should not use this class directly.
 */
class Boot {
	const PHP_PREFIX = "";

	/**
	 * @var mixed
	 * List of Haxe classes registered by their PHP class names
	 */
	static protected $aliases;
	/**
	 * @var mixed
	 * Cache of HxClass instances
	 */
	static protected $classes;
	/**
	 * @var mixed
	 * List of getters (for Reflect)
	 */
	static protected $getters;
	/**
	 * @var mixed
	 * Metadata storage
	 */
	static protected $meta;
	/**
	 * @var mixed
	 * List of setters (for Reflect)
	 */
	static protected $setters;
	/**
	 * @var mixed
	 * Cache for closures created of static methods
	 */
	static protected $staticClosures;

	/**
	 * Concat `left` and `right` if both are strings or string and null.
	 * Otherwise return sum of `left` and `right`.
	 * 
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return mixed
	 */
	static public function addOrConcat ($left, $right) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:400: lines 400-402
		if (is_string($left) || is_string($right)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:401: characters 4-41
			return ($left??'null') . ($right??'null');
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:403: characters 3-33
		return ($left + $right);
	}

	/**
	 * Unsafe cast to HxClass
	 * 
	 * @param Class $cls
	 * 
	 * @return HxClass
	 */
	static public function castClass ($cls) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:280: characters 3-18
		return $cls;
	}

	/**
	 * Unsafe cast to HxClosure
	 * 
	 * @param mixed $value
	 * 
	 * @return HxClosure
	 */
	static public function castClosure ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:273: characters 3-15
		return $value;
	}

	/**
	 * Creates Haxe-compatible closure.
	 * @param type `this` for instance methods; full php class name for static methods
	 * @param func Method name
	 * 
	 * @param mixed $target
	 * @param string $func
	 * 
	 * @return HxClosure
	 */
	static public function closure ($target, $func) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:571: characters 10-96
		if (is_string($target)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:571: characters 31-61
			return Boot::getStaticClosure($target, $func);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:571: characters 64-96
			return Boot::getInstanceClosure($target, $func);
		}
	}

	/**
	 * Returns `Class<T>` for `HxClosure`
	 * 
	 * @return HxClass
	 */
	static public function closureHxClass () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:287: characters 3-24
		return Boot::getClass(HxClosure::class);
	}

	/**
	 * Create Haxe-compatible anonymous structure of `data` associative array
	 * 
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	static public function createAnon ($data) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:505: characters 3-26
		return new HxAnon($data);
	}

	/**
	 * Helper method to avoid "Cannot use temporary expression in write context" error for expressions like this:
	 * ```
	 * (new MyClass()).fieldName = 'value';
	 * ```
	 * 
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function deref ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:498: characters 3-15
		return $value;
	}

	/**
	 * Get `field` of a dynamic `value` in a safe manner (avoid exceptions on trying to get a method)
	 * 
	 * @param mixed $value
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function dynamicField ($value, $field) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:519: lines 519-521
		if (method_exists($value, $field)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:520: characters 11-32
			if (is_string($value)) {
				return Boot::getStaticClosure($value, $field);
			} else {
				return Boot::getInstanceClosure($value, $field);
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:522: lines 522-524
		if (is_string($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:523: characters 4-51
			$value = new HxDynamicStr($value);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:525: characters 23-28
		$tmp = $value;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:525: characters 3-36
		return $tmp->{$field};
	}

	/**
	 * @param string $str
	 * 
	 * @return HxDynamicStr
	 */
	static public function dynamicString ($str) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:529: characters 3-47
		return new HxDynamicStr($str);
	}

	/**
	 * Make sure specified class is loaded
	 * 
	 * @param string $phpClassName
	 * 
	 * @return bool
	 */
	static public function ensureLoaded ($phpClassName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:512: characters 10-84
		if (!class_exists($phpClassName)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:512: characters 47-84
			return interface_exists($phpClassName);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:512: characters 10-84
			return true;
		}
	}

	/**
	 * Check if specified values are equal
	 * 
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return bool
	 */
	static public function equal ($left, $right) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:386: lines 386-388
		if ((is_int($left) || is_float($left)) && (is_int($right) || is_float($right))) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:387: characters 4-36
			return ($left == $right);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:389: lines 389-391
		if (($left instanceof HxClosure) && ($right instanceof HxClosure)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:390: characters 4-41
			return $left->equals($right);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:392: characters 3-41
		return ($left === $right);
	}

	/**
	 * Get Class<T> instance for PHP fully qualified class name (E.g. '\some\pack\MyClass')
	 * It's always the same instance for the same `phpClassName`
	 * 
	 * @param string $phpClassName
	 * 
	 * @return HxClass
	 */
	static public function getClass ($phpClassName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:179: lines 179-181
		if (mb_substr($phpClassName, 0, 1) === "\\") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:180: characters 4-41
			$phpClassName = mb_substr($phpClassName, 1, null);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:182: lines 182-184
		if (!isset(Boot::$classes[$phpClassName])) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:183: characters 4-53
			Boot::$classes[$phpClassName] = new HxClass($phpClassName);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:186: characters 3-31
		return Boot::$classes[$phpClassName];
	}

	/**
	 * Returns either Haxe class name for specified `phpClassName` or (if no such Haxe class registered) `phpClassName`.
	 * 
	 * @param string $phpClassName
	 * 
	 * @return string
	 */
	static public function getClassName ($phpClassName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:207: characters 3-40
		$hxClass = Boot::getClass($phpClassName);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:208: characters 3-35
		$name = Boot::getHaxeName($hxClass);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:209: characters 10-54
		if ($name === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:209: characters 26-46
			return $hxClass->phpClassName;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:209: characters 49-53
			return $name;
		}
	}

	/**
	 * Returns original Haxe fully qualified class name for this type (if exists)
	 * 
	 * @param HxClass $hxClass
	 * 
	 * @return string
	 */
	static public function getHaxeName ($hxClass) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:216: characters 11-31
		$__hx__switch = ($hxClass->phpClassName);
		if ($__hx__switch === "Bool") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:219: characters 17-30
			return "Bool";
		} else if ($__hx__switch === "Class") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:221: characters 18-32
			return "Class";
		} else if ($__hx__switch === "Dynamic") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:223: characters 20-36
			return "Dynamic";
		} else if ($__hx__switch === "Enum") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:222: characters 17-30
			return "Enum";
		} else if ($__hx__switch === "Float") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:220: characters 18-32
			return "Float";
		} else if ($__hx__switch === "Int") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:217: characters 16-28
			return "Int";
		} else if ($__hx__switch === "String") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:218: characters 19-34
			return "String";
		} else {
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:229: lines 229-235
		if (isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:230: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (class_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:232: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (interface_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:234: characters 4-40
			return Boot::$aliases[$hxClass->phpClassName];
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:237: characters 3-14
		return null;
	}

	/**
	 * Returns Class<HxAnon>
	 * 
	 * @return HxClass
	 */
	static public function getHxAnon () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:193: characters 3-21
		return Boot::getClass(HxAnon::class);
	}

	/**
	 * Returns Class<HxClass>
	 * 
	 * @return HxClass
	 */
	static public function getHxClass () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:200: characters 3-22
		return Boot::getClass(HxClass::class);
	}

	/**
	 * Creates Haxe-compatible closure of an instance method.
	 * @param obj - any object
	 * 
	 * @param object $obj
	 * @param string $methodName
	 * 
	 * @return HxClosure
	 */
	static public function getInstanceClosure ($obj, $methodName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:537: characters 3-73
		$result = ($obj->__hx_closureCache[$methodName] ?? null);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:538: lines 538-540
		if ($result !== null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:539: characters 4-17
			return $result;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:541: characters 3-42
		$result = new HxClosure($obj, $methodName);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:542: lines 542-544
		if (!property_exists($obj, "__hx_closureCache")) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:543: characters 4-50
			$obj->__hx_closureCache = [];
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:545: characters 3-45
		$obj->__hx_closureCache[$methodName] = $result;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:546: characters 3-16
		return $result;
	}

	/**
	 * Retrieve metadata for specified class
	 * 
	 * @param string $phpClassName
	 * 
	 * @return mixed
	 */
	static public function getMeta ($phpClassName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:145: characters 3-29
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:146: characters 10-70
		if (isset(Boot::$meta[$phpClassName])) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:146: characters 45-63
			return Boot::$meta[$phpClassName];
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:146: characters 66-70
			return null;
		}
	}

	/**
	 * Find corresponding PHP class name.
	 * Returns `null` if specified class does not exist.
	 * 
	 * @param string $haxeName
	 * 
	 * @return string
	 */
	static public function getPhpName ($haxeName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:245: characters 3-28
		$prefix = Boot::getPrefix();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:246: characters 3-63
		$phpParts = (strlen($prefix) === 0 ? new \Array_hx() : \Array_hx::wrap([$prefix]));
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:248: characters 3-39
		$haxeParts = HxString::split($haxeName, ".");
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:249: lines 249-264
		$_g = 0;
		while ($_g < $haxeParts->length) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:249: characters 8-12
			$part = ($haxeParts->arr[$_g] ?? null);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:249: lines 249-264
			++$_g;
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:250: characters 12-30
			$__hx__switch = (mb_strtolower($part));
			if ($__hx__switch === "__class__" || $__hx__switch === "__dir__" || $__hx__switch === "__file__" || $__hx__switch === "__function__" || $__hx__switch === "__halt_compiler" || $__hx__switch === "__line__" || $__hx__switch === "__method__" || $__hx__switch === "__namespace__" || $__hx__switch === "__trait__" || $__hx__switch === "abstract" || $__hx__switch === "and" || $__hx__switch === "array" || $__hx__switch === "as" || $__hx__switch === "bool" || $__hx__switch === "break" || $__hx__switch === "callable" || $__hx__switch === "case" || $__hx__switch === "catch" || $__hx__switch === "class" || $__hx__switch === "clone" || $__hx__switch === "const" || $__hx__switch === "continue" || $__hx__switch === "declare" || $__hx__switch === "default" || $__hx__switch === "die" || $__hx__switch === "do" || $__hx__switch === "echo" || $__hx__switch === "else" || $__hx__switch === "elseif" || $__hx__switch === "empty" || $__hx__switch === "enddeclare" || $__hx__switch === "endfor" || $__hx__switch === "endforeach" || $__hx__switch === "endif" || $__hx__switch === "endswitch" || $__hx__switch === "endwhile" || $__hx__switch === "eval" || $__hx__switch === "exit" || $__hx__switch === "extends" || $__hx__switch === "false" || $__hx__switch === "final" || $__hx__switch === "finally" || $__hx__switch === "float" || $__hx__switch === "for" || $__hx__switch === "foreach" || $__hx__switch === "function" || $__hx__switch === "global" || $__hx__switch === "goto" || $__hx__switch === "if" || $__hx__switch === "implements" || $__hx__switch === "include" || $__hx__switch === "include_once" || $__hx__switch === "instanceof" || $__hx__switch === "insteadof" || $__hx__switch === "int" || $__hx__switch === "interface" || $__hx__switch === "isset" || $__hx__switch === "iterable" || $__hx__switch === "list" || $__hx__switch === "namespace" || $__hx__switch === "new" || $__hx__switch === "null" || $__hx__switch === "object" || $__hx__switch === "or" || $__hx__switch === "parent" || $__hx__switch === "print" || $__hx__switch === "private" || $__hx__switch === "protected" || $__hx__switch === "public" || $__hx__switch === "require" || $__hx__switch === "require_once" || $__hx__switch === "return" || $__hx__switch === "static" || $__hx__switch === "string" || $__hx__switch === "switch" || $__hx__switch === "throw" || $__hx__switch === "trait" || $__hx__switch === "true" || $__hx__switch === "try" || $__hx__switch === "unset" || $__hx__switch === "use" || $__hx__switch === "var" || $__hx__switch === "void" || $__hx__switch === "while" || $__hx__switch === "xor" || $__hx__switch === "yield") {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:260: characters 7-20
				$part = ($part??'null') . "_hx";
			} else {
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:263: characters 4-23
			$phpParts->arr[$phpParts->length] = $part;
			++$phpParts->length;

		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:266: characters 3-29
		return $phpParts->join("\\");
	}

	/**
	 * Returns root namespace based on a value of `-D php-prefix=value` compiler flag.
	 * Returns empty string if no `-D php-prefix=value` provided.
	 * 
	 * @return string
	 */
	static public function getPrefix () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:85: characters 3-41
		return self::PHP_PREFIX;
	}

	/**
	 * Returns a list of phpName=>haxeName for currently loaded haxe-generated classes.
	 * 
	 * @return mixed
	 */
	static public function getRegisteredAliases () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:171: characters 3-17
		return Boot::$aliases;
	}

	/**
	 * Returns a list of currently loaded haxe-generated classes.
	 * 
	 * @return \Array_hx
	 */
	static public function getRegisteredClasses () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:160: characters 3-19
		$result = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:161: lines 161-163
		$collection = Boot::$aliases;
		foreach ($collection as $key => $value) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:162: characters 4-39
			$x = Boot::getClass($key);
			$result->arr[$result->length] = $x;
			++$result->length;

		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:164: characters 3-16
		return $result;
	}

	/**
	 * Creates Haxe-compatible closure of a static method.
	 * 
	 * @param string $phpClassName
	 * @param string $methodName
	 * 
	 * @return HxClosure
	 */
	static public function getStaticClosure ($phpClassName, $methodName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:553: characters 3-80
		$result = (Boot::$staticClosures[$phpClassName][$methodName] ?? null);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:554: lines 554-556
		if ($result !== null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:555: characters 4-17
			return $result;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:557: characters 3-51
		$result = new HxClosure($phpClassName, $methodName);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:558: lines 558-560
		if (!array_key_exists($phpClassName, Boot::$staticClosures)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:559: characters 35-57
			$this1 = [];
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:559: characters 4-57
			Boot::$staticClosures[$phpClassName] = $this1;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:561: characters 3-52
		Boot::$staticClosures[$phpClassName][$methodName] = $result;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:562: characters 3-16
		return $result;
	}

	/**
	 * Check if specified property has getter
	 * 
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasGetter ($phpClassName, $property) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:106: characters 3-29
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:108: characters 3-19
		$has = false;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:109: characters 3-71
		$phpClassName1 = $phpClassName;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:110: lines 110-113
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:111: characters 4-55
			$has = isset(Boot::$getters[$phpClassName1][$property]);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:112: characters 4-56
			$phpClassName1 = get_parent_class($phpClassName1);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:110: lines 110-113
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				break;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:115: characters 3-13
		return $has;
	}

	/**
	 * Check if specified property has setter
	 * 
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasSetter ($phpClassName, $property) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:122: characters 3-29
		if (!class_exists($phpClassName)) {
			interface_exists($phpClassName);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:124: characters 3-19
		$has = false;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:125: characters 3-71
		$phpClassName1 = $phpClassName;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:126: lines 126-129
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:127: characters 4-55
			$has = isset(Boot::$setters[$phpClassName1][$property]);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:128: characters 4-56
			$phpClassName1 = get_parent_class($phpClassName1);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:126: lines 126-129
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				break;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:131: characters 3-13
		return $has;
	}

	/**
	 * `Std.is()` implementation
	 * 
	 * @param mixed $value
	 * @param HxClass $type
	 * 
	 * @return bool
	 */
	static public function is ($value, $type) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:410: characters 3-33
		if ($type === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:410: characters 21-33
			return false;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:412: characters 3-35
		$phpType = $type->phpClassName;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:413: lines 413-446
		if ($phpType === "Bool") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:429: characters 5-27
			return is_bool($value);
		} else if ($phpType === "Dynamic") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:415: characters 5-25
			return $value !== null;
		} else if ($phpType === "Class" || $phpType === "Enum") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:435: lines 435-440
			if (($value instanceof HxClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:438: characters 6-74
				$isEnumType = is_subclass_of($value->phpClassName, Boot::getClass(HxEnum::class)->phpClassName);
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:439: characters 13-59
				if ($phpType === "Enum") {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:439: characters 34-44
					return $isEnumType;
				} else {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:439: characters 47-58
					return !$isEnumType;
				}
			}
		} else if ($phpType === "Float") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:427: characters 12-46
			if (!is_float($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:427: characters 32-46
				return is_int($value);
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:427: characters 12-46
				return true;
			}
		} else if ($phpType === "Int") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:417: lines 417-425
			if (is_int($value) || (is_float($value) && ((int)($value) == $value) && !is_nan($value))) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:425: characters 9-40
				return abs($value) <= 2147483648;
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:417: lines 417-425
				return false;
			}
		} else if ($phpType === "String") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:431: characters 5-29
			return is_string($value);
		} else if ($phpType === "php\\NativeArray" || $phpType === "php\\_NativeArray\\NativeArray_Impl_") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:433: characters 5-28
			return is_array($value);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:442: lines 442-445
			if (is_object($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:444: characters 31-36
				$tmp = $value;
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:444: characters 38-42
				$tmp1 = $type;
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:444: characters 6-43
				return ($tmp instanceof $tmp1->phpClassName);
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:447: characters 3-15
		return false;
	}

	/**
	 * Check if `value` is a `Class<T>`
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isClass ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:454: characters 3-32
		return ($value instanceof HxClass);
	}

	/**
	 * Check if `value` is an enum constructor instance
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isEnumValue ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:461: characters 3-31
		return ($value instanceof HxEnum);
	}

	/**
	 * Check if `value` is a function
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isFunction ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:468: characters 10-60
		if (!($value instanceof \Closure)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:468: characters 36-60
			return ($value instanceof HxClosure);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:468: characters 10-60
			return true;
		}
	}

	/**
	 * Check if `value` is an instance of `HxClosure`
	 * 
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isHxClosure ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:475: characters 3-34
		return ($value instanceof HxClosure);
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isNumber ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:379: characters 10-44
		if (!is_int($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:379: characters 28-44
			return is_float($value);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:379: characters 10-44
			return true;
		}
	}

	/**
	 * Associate PHP class name with Haxe class name
	 * 
	 * @param string $phpClassName
	 * @param string $haxeClassName
	 * 
	 * @return void
	 */
	static public function registerClass ($phpClassName, $haxeClassName) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:153: characters 3-40
		Boot::$aliases[$phpClassName] = $haxeClassName;
	}

	/**
	 * Register list of getters to be able to call getters using reflection
	 * 
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerGetters ($phpClassName, $list) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:92: characters 3-31
		Boot::$getters[$phpClassName] = $list;
	}

	/**
	 * Save metadata for specified class
	 * 
	 * @param string $phpClassName
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function registerMeta ($phpClassName, $data) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:138: characters 3-28
		Boot::$meta[$phpClassName] = $data;
	}

	/**
	 * Register list of setters to be able to call getters using reflection
	 * 
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerSetters ($phpClassName, $list) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:99: characters 3-31
		Boot::$setters[$phpClassName] = $list;
	}

	/**
	 * Performs `left >>> right` operation
	 * 
	 * @param int $left
	 * @param int $right
	 * 
	 * @return int
	 */
	static public function shiftRightUnsigned ($left, $right) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:482: lines 482-488
		if ($right === 0) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:483: characters 4-15
			return $left;
		} else if ($left >= 0) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:485: characters 4-78
			return ($left >> $right) & ~((1 << (8 * PHP_INT_SIZE - 1)) >> ($right - 1));
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:487: characters 4-56
			return ($left >> $right) & (2147483647 >> ($right - 1));
		}
	}

	/**
	 * Returns string representation of `value`
	 * 
	 * @param mixed $value
	 * 
	 * @return string
	 */
	static public function stringify ($value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:329: lines 329-331
		if ($value === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:330: characters 4-17
			return "null";
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:332: lines 332-334
		if (is_string($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:333: characters 4-16
			return $value;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:335: lines 335-337
		if (is_int($value) || is_float($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:336: characters 4-31
			return (string)($value);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:338: lines 338-340
		if (is_bool($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:339: characters 11-35
			if ($value) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:339: characters 20-24
				return "true";
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:339: characters 29-34
				return "false";
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:341: lines 341-347
		if (is_array($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:342: characters 4-37
			$strings = [];
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:343: lines 343-345
			foreach ($value as $key => $value1) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:344: characters 32-71
				$tmp = ($key??'null') . " => " . (Boot::stringify($value1)??'null');
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:344: characters 5-72
				array_push($strings, $tmp);
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:346: characters 4-52
			return "[" . (implode(", ", $strings)??'null') . "]";
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:348: lines 348-374
		if (is_object($value)) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:349: lines 349-351
			if (method_exists($value, "toString")) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:350: characters 5-28
				return HxDynamicStr::wrap($value)->toString();
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:352: lines 352-354
			if (method_exists($value, "__toString")) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:353: characters 5-30
				return $value->__toString();
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:355: lines 355-365
			if (($value instanceof \StdClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:356: characters 35-40
				$tmp1 = $value;
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:356: lines 356-358
				if (isset($tmp1->{"toString"}) && is_callable(Boot::dynamicField($value, 'toString'))) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:357: characters 6-29
					return HxDynamicStr::wrap($value)->toString();
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:359: characters 5-51
				$result = [];
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:360: characters 5-46
				$data = get_object_vars($value);
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:361: characters 17-34
				$data1 = array_keys($data);
				$_g_current = 0;
				$_g_length = count($data1);
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:361: lines 361-363
				while ($_g_current < $_g_length) {
					$key1 = $data1[$_g_current++];
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:362: characters 24-56
					$tmp2 = "" . ($key1??'null') . " : " . (Boot::stringify($data[$key1])??'null');
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:362: characters 6-57
					array_push($result, $tmp2);
				}

				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:364: characters 5-54
				return "{ " . (implode(", ", $result)??'null') . " }";
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:366: lines 366-368
			if (($value instanceof \Closure) || ($value instanceof HxClosure)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:367: characters 5-24
				return "<function>";
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:369: lines 369-373
			if (($value instanceof HxClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:370: characters 5-72
				return "[class " . (Boot::getClassName($value->phpClassName)??'null') . "]";
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:372: characters 5-68
				return "[object " . (Boot::getClassName(get_class($value))??'null') . "]";
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:375: characters 3-8
		throw new HxException("Unable to stringify value");
	}

	/**
	 * Implementation for `cast(value, Class<Dynamic>)`
	 * @throws HxException if `value` cannot be casted to this type
	 * 
	 * @param HxClass $hxClass
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function typedCast ($hxClass, $value) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:295: characters 3-33
		if ($value === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:295: characters 22-33
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:296: characters 11-31
		$__hx__switch = ($hxClass->phpClassName);
		if ($__hx__switch === "Bool") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:306: lines 306-308
			if (is_bool($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:307: characters 6-18
				return $value;
			}
		} else if ($__hx__switch === "Float") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:302: lines 302-304
			if (is_int($value) || is_float($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:303: characters 6-29
				return floatval($value);
			}
		} else if ($__hx__switch === "Int") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:298: lines 298-300
			if (is_int($value) || is_float($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:299: characters 6-33
				return intval($value);
			}
		} else if ($__hx__switch === "String") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:310: lines 310-312
			if (is_string($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:311: characters 6-18
				return $value;
			}
		} else if ($__hx__switch === "php\\NativeArray") {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:314: lines 314-316
			if (is_array($value)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:315: characters 6-18
				return $value;
			}
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:318: lines 318-320
			if (is_object($value) && Boot::is($value, $hxClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:319: characters 6-18
				return $value;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:322: characters 3-8
		throw new HxException("Cannot cast " . (\Std::string($value)??'null') . " to " . (Boot::getClassName($hxClass->phpClassName)??'null'));
	}

	/**
	 * Get UTF-8 code of che first character in `s` without any checks
	 * 
	 * @param mixed $s
	 * 
	 * @return int
	 */
	static public function unsafeOrd ($s) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:578: characters 3-31
		$code = ord($s[0]);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:579: lines 579-587
		if ($code < 192) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:580: characters 4-15
			return $code;
		} else if ($code < 224) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:582: characters 4-57
			return (($code - 192) << 6) + ord($s[1]) - 128;
		} else if ($code < 240) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:584: characters 4-93
			return (($code - 224) << 12) + ((ord($s[1]) - 128) << 6) + ord($s[2]) - 128;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:586: characters 4-129
			return (($code - 240) << 18) + ((ord($s[1]) - 128) << 12) + ((ord($s[2]) - 128) << 6) + ord($s[3]) - 128;
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:54: characters 3-39
		mb_internal_encoding("UTF-8");
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:55: lines 55-77
		if (!defined("HAXE_CUSTOM_ERROR_HANDLER") || !HAXE_CUSTOM_ERROR_HANDLER) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:56: characters 4-60
			$previousLevel = error_reporting(E_ALL);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:57: lines 57-71
			$previousHandler = set_error_handler(function ($errno, $errstr, $errfile, $errline) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:59: lines 59-61
				if ((error_reporting() & $errno) === 0) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:60: characters 7-19
					return false;
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:66: lines 66-68
				if (($errno === E_WARNING) && ($errstr === "Division by zero")) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:67: characters 7-18
					return true;
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:69: characters 6-11
				throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
			});
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:73: lines 73-76
			if ($previousHandler !== null) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:74: characters 5-42
				error_reporting($previousLevel);
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/Boot.hx:75: characters 5-46
				set_error_handler($previousHandler);
			}
		}

		self::$aliases = [];
		self::$classes = [];
		self::$getters = [];
		self::$setters = [];
		self::$meta = [];
		self::$staticClosures = [];
	}
}

require_once __DIR__.'/_polyfills.php';
Boot::__hx__init();
Boot::registerClass(Boot::class, 'php.Boot');
\php\Web::__hx__init();
