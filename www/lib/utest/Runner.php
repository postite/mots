<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace utest;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\ds\ObjectMap;
use \haxe\CallStack;
use \utest\utils\AccessoriesUtils;
use \utest\_Runner\ITestRunner;
use \php\_Boot\HxClosure;
use \php\_Boot\HxException;

/**
 * The Runner class performs a set of tests. The tests can be added using addCase or addFixtures.
 * Once all the tests are register they are axecuted on the run() call.
 * Note that Runner does not provide any visual output. To visualize the test results use one of
 * the classes in the utest.ui package.
 * @todo complete documentation
 * @todo AVOID CHAINING METHODS (long chains do not work properly on IE)
 */
class Runner {
	/**
	 * @var int
	 */
	public $executedFixtures;
	/**
	 * @var \Array_hx
	 */
	public $fixtures;
	/**
	 * @var \EReg
	 * Global pattern to override the test pattern specified with `addCase`
	 */
	public $globalPattern;
	/**
	 * @var ObjectMap
	 */
	public $iTestFixtures;
	/**
	 * @var int
	 * The number of fixtures registered.
	 */
	public $length;
	/**
	 * @var Dispatcher
	 * Event object that monitors when the runner ends. This event takes into account async calls
	 * performed during the tests.
	 */
	public $onComplete;
	/**
	 * @var Dispatcher
	 * Event object that monitors when a handler has executed a test case, and
	 * is about to evaluate the results.  Useful for mocking certain
	 * custom asynchronouse behavior in order for certain tests to pass.
	 */
	public $onPrecheck;
	/**
	 * @var Dispatcher
	 * Event object that monitors the progress of the runner.
	 */
	public $onProgress;
	/**
	 * @var Dispatcher
	 * Event object that monitors when the runner starts.
	 */
	public $onStart;
	/**
	 * @var Dispatcher
	 * Event object that notifies when a handler has completed executing.
	 */
	public $onTestComplete;
	/**
	 * @var Dispatcher
	 * Event object that notifies when a handler is about to start executing.
	 */
	public $onTestStart;
	/**
	 * @var int
	 */
	public $pos;

	/**
	 * Instantiates a Runner onject.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:266: characters 30-31
		$this->executedFixtures = 0;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:265: characters 17-18
		$this->pos = 0;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:75: characters 61-65
		$this->globalPattern = null;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:31: characters 115-124
		$this->iTestFixtures = new ObjectMap();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:29: characters 54-56
		$this->fixtures = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:81: characters 5-34
		$this->onProgress = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:82: characters 5-34
		$this->onStart = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:83: characters 5-34
		$this->onComplete = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:84: characters 5-34
		$this->onPrecheck = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:85: characters 5-35
		$this->onTestStart = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:86: characters 5-38
		$this->onTestComplete = new Dispatcher();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:87: characters 5-15
		$this->length = 0;
	}

	/**
	 * Adds a new test case.
	 * @param test must be a not null object
	 * @param setup string name of the setup function (defaults to "setup")
	 * @param teardown string name of the teardown function (defaults to "teardown")
	 * @param prefix prefix for methods that are tests (defaults to "test")
	 * @param pattern a regular expression that discriminates the names of test
	 *       functions; when set,  the prefix parameter is meaningless
	 * @param setupAsync string name of the asynchronous setup function (defaults to "setupAsync")
	 * @param teardownAsync string name of the asynchronous teardown function (defaults to "teardownAsync")
	 * 
	 * @param mixed $test
	 * @param string $setup
	 * @param string $teardown
	 * @param string $prefix
	 * @param \EReg $pattern
	 * @param string $setupAsync
	 * @param string $teardownAsync
	 * 
	 * @return void
	 */
	public function addCase ($test, $setup = "setup", $teardown = "teardown", $prefix = "test", $pattern = null, $setupAsync = "setupAsync", $teardownAsync = "teardownAsync") {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:121: lines 121-125
		if ($setup === null) {
			$setup = "setup";
		}
		if ($teardown === null) {
			$teardown = "teardown";
		}
		if ($prefix === null) {
			$prefix = "test";
		}
		if ($setupAsync === null) {
			$setupAsync = "setupAsync";
		}
		if ($teardownAsync === null) {
			$teardownAsync = "teardownAsync";
		}
		if (($test instanceof ITest)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:122: characters 7-30
			$this->addITest($test, $pattern);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:124: characters 7-84
			$this->addCaseOld($test, $setup, $teardown, $prefix, $pattern, $setupAsync, $teardownAsync);
		}
	}

	/**
	 * @param mixed $test
	 * @param string $setup
	 * @param string $teardown
	 * @param string $prefix
	 * @param \EReg $pattern
	 * @param string $setupAsync
	 * @param string $teardownAsync
	 * 
	 * @return void
	 */
	public function addCaseOld ($test, $setup = "setup", $teardown = "teardown", $prefix = "test", $pattern = null, $setupAsync = "setupAsync", $teardownAsync = "teardownAsync") {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:160: lines 160-176
		if ($setup === null) {
			$setup = "setup";
		}
		if ($teardown === null) {
			$teardown = "teardown";
		}
		if ($prefix === null) {
			$prefix = "test";
		}
		if ($setupAsync === null) {
			$setupAsync = "setupAsync";
		}
		if ($teardownAsync === null) {
			$teardownAsync = "teardownAsync";
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:161: characters 5-38
		if (!\Reflect::isObject($test)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:161: characters 33-38
			throw new HxException("can't add a null object as a test case");
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:162: lines 162-163
		if (!$this->isMethod($test, $setup)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:163: characters 7-19
			$setup = null;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:164: lines 164-165
		if (!$this->isMethod($test, $setupAsync)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:165: characters 7-24
			$setupAsync = null;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:166: lines 166-167
		if (!$this->isMethod($test, $teardown)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:167: characters 7-22
			$teardown = null;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:168: lines 168-169
		if (!$this->isMethod($test, $teardownAsync)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:169: characters 7-27
			$teardownAsync = null;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:170: characters 5-62
		$fields = \Type::getInstanceFields(\Type::getClass($test));
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:171: lines 171-175
		$_g = 0;
		while ($_g < $fields->length) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:171: characters 12-17
			$field = ($fields->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:171: lines 171-175
			++$_g;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:172: characters 9-44
			if (!$this->isMethod($test, $field)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:172: characters 36-44
				continue;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:173: characters 9-81
			if (!$this->isTestFixtureName($field, \Array_hx::wrap([$prefix]), $pattern, $this->globalPattern)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:173: characters 73-81
				continue;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:174: characters 9-93
			$this->addFixture(new TestFixture($test, $field, $setup, $teardown, $setupAsync, $teardownAsync));
		}

	}

	/**
	 * @param TestFixture $fixture
	 * 
	 * @return void
	 */
	public function addFixture ($fixture) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:239: characters 5-27
		$_this = $this->fixtures;
		$_this->arr[$_this->length] = $fixture;
		++$_this->length;

		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:240: characters 5-13
		$this->length++;
	}

	/**
	 * @param ITest $testCase
	 * @param \EReg $pattern
	 * 
	 * @return void
	 */
	public function addITest ($testCase, $pattern) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:133: lines 133-135
		if ($this->iTestFixtures->exists($testCase)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:134: characters 7-12
			throw new HxException("Cannot add the same test twice.");
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:136: characters 5-23
		$fixtures = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:142: characters 5-100
		$init = $testCase->__initializeUtest__();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:144: lines 144-151
		$_g = 0;
		$_g1 = $init->tests;
		while ($_g < $_g1->length) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:144: characters 9-13
			$test = ($_g1->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:144: lines 144-151
			++$_g;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:145: lines 145-147
			if (!$this->isTestFixtureName($test->name, \Array_hx::wrap([
				"test",
				"spec",
			]), $pattern, $this->globalPattern)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:146: characters 9-17
				continue;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:148: characters 7-74
			$fixture = TestFixture::ofData($testCase, $test, $init->accessories);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:149: characters 7-26
			$this->addFixture($fixture);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:150: characters 7-29
			$fixtures->arr[$fixtures->length] = $fixture;
			++$fixtures->length;

		}

		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:152: lines 152-156
		$this->iTestFixtures->set($testCase, new HxAnon([
			"setupClass" => AccessoriesUtils::getSetupClass($init->accessories),
			"fixtures" => $fixtures,
			"teardownClass" => AccessoriesUtils::getTeardownClass($init->accessories),
		]));
	}

	/**
	 * @param int $index
	 * 
	 * @return TestFixture
	 */
	public function getFixture ($index) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:244: characters 5-27
		return ($this->fixtures->arr[$index] ?? null);
	}

	/**
	 * @param mixed $test
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function isMethod ($test, $name) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:248: lines 248-252
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:249: characters 14-59
			$f = \Reflect::field($test, $name);
			if (!($f instanceof \Closure)) {
				return ($f instanceof HxClosure);
			} else {
				return true;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:251: characters 7-19
			return false;
		}
	}

	/**
	 * @param string $name
	 * @param \Array_hx $prefixes
	 * @param \EReg $pattern
	 * @param \EReg $globalPattern
	 * 
	 * @return bool
	 */
	public function isTestFixtureName ($name, $prefixes, $pattern = null, $globalPattern = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:226: lines 226-233
		if (($pattern === null) && ($globalPattern === null)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:227: lines 227-231
			$_g = 0;
			while ($_g < $prefixes->length) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:228: lines 228-230
				if (\StringTools::startsWith($name, ($prefixes->arr[$_g++] ?? null))) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:229: characters 11-22
					return true;
				}
			}

			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:232: characters 7-19
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:234: characters 5-49
		if ($pattern === null) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:234: characters 26-49
			$pattern = $globalPattern;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:235: characters 5-31
		return $pattern->match($name);
	}

	/**
	 * @return void
	 */
	public function run () {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:256: characters 5-27
		$this->onStart->dispatch($this);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:259: characters 5-22
		(new ITestRunner($this))->run();
	}

	/**
	 * @param TestFixture $fixture
	 * 
	 * @return TestHandler
	 */
	public function runFixture ($fixture) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:284: characters 5-92
		$handler = ($fixture->isITest ? new ITestHandler($fixture) : new TestHandler($fixture));
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:288: characters 5-41
		$handler->onComplete->add(Boot::getInstanceClosure($this, 'testComplete'));
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:289: characters 5-53
		$handler->onPrecheck->add(Boot::getInstanceClosure($this->onPrecheck, 'dispatch'));
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:290: characters 5-34
		$this->onTestStart->dispatch($handler);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:291: characters 5-22
		$handler->execute();
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:292: characters 5-19
		return $handler;
	}

	/**
	 * @param TestHandler $finishedHandler
	 * 
	 * @return void
	 */
	public function runNext ($finishedHandler = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:268: lines 268-277
		$_g = $this->pos;
		$_g1 = $this->fixtures->length;
		while ($_g < $_g1) {
			++$_g;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:269: characters 7-37
			$fixture = ($this->fixtures->arr[$this->pos++] ?? null);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:270: characters 7-35
			if ($fixture->isITest) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:270: characters 27-35
				continue;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:271: characters 7-41
			$handler = $this->runFixture($fixture);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:272: lines 272-276
			if (!$handler->finished) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:273: characters 9-40
				$handler->onComplete->add(Boot::getInstanceClosure($this, 'runNext'));
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:275: characters 9-15
				return;
			}
		}

		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:278: characters 5-30
		$this->onComplete->dispatch($this);
	}

	/**
	 * @param TestHandler $h
	 * 
	 * @return void
	 */
	public function testComplete ($h) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:296: characters 5-23
		++$this->executedFixtures;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:297: characters 5-31
		$this->onTestComplete->dispatch($h);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:298: characters 5-15
		$tmp = $this->onProgress;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:298: characters 36-59
		$tmp1 = TestResult::ofHandler($h);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Runner.hx:298: characters 5-104
		$tmp->dispatch(new HxAnon([
			"result" => $tmp1,
			"done" => $this->executedFixtures,
			"totals" => $this->length,
		]));
	}
}

Boot::registerClass(Runner::class, 'utest.Runner');
