<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace utest;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\CallStack;
use \php\_Boot\HxString;
use \haxe\IMap;
use \php\_Boot\HxClosure;
use \haxe\ds\List_hx;
use \php\_Boot\HxException;
use \haxe\io\Bytes;

/**
 * This class contains only static members used to perform assertations inside a test method.
 * Its use is straight forward:
 * ```haxe
 * public function testObvious() {
 *   Assert.equals(1, 0); // fails
 *   Assert.isFalse(1 == 1, "guess what?"); // fails and returns the passed message
 *   Assert.isTrue(true); // successful
 * }
 * ```
 */
class Assert {
	/**
	 * @var \Closure
	 * Creates an asynchronous context for test execution. Assertions should be included
	 * in the passed function.
	 * ```haxe
	 * public function assertAsync() {
	 *   var async = Assert.createAsync(function() Assert.isTrue(true));
	 *   haxe.Timer.delay(async, 50);
	 * }
	 * ```
	 * @param f A function that contains other Assert tests
	 * @param timeout Optional timeout value in milliseconds.
	 */
	static public $createAsync;
	/**
	 * @var \Closure
	 * Creates an asynchronous context for test execution of an event like method.
	 * Assertions should be included in the passed function.
	 * It works the same way as Assert.createAsync() but accepts a function with one
	 * argument (usually some event data) instead of a function with no arguments
	 * @param f A function that contains other Assert tests
	 * @param timeout Optional timeout value in milliseconds.
	 */
	static public $createEvent;
	/**
	 * @var List_hx
	 * A stack of results for the current testing workflow. It is used internally
	 * by other classes of the utest library.
	 */
	static public $results;

	/**
	 * @param float $expected
	 * @param float $value
	 * @param float $approx
	 * 
	 * @return bool
	 */
	static public function _floatEquals ($expected, $value, $approx = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:157: lines 157-162
		if (is_nan($expected)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:158: characters 7-31
			return is_nan($value);
		} else if (is_nan($value)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:160: characters 7-19
			return false;
		} else if (!is_finite($expected) && !is_finite($value)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:162: characters 7-43
			return ($expected > 0) === ($value > 0);
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:163: lines 163-164
		if (null === $approx) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:164: characters 7-20
			$approx = 1e-5;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:165: characters 5-46
		return abs($value - $expected) <= $approx;
	}

	/**
	 * Checks that the test value matches at least one of the possibilities.
	 * @param possibility An array of possible matches
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param \Array_hx $possibilities
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function allows ($possibilities, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:572: lines 572-576
		if (\Lambda::has($possibilities, $value)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:573: characters 7-29
			Assert::isTrue(true, $msg, $pos);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:575: characters 7-119
			Assert::fail(($msg === null ? "value " . (Assert::q($value)??'null') . " not found in the expected possibilities " . (\Std::string($possibilities)??'null') : $msg), $pos);
		}
	}

	/**
	 * Checks that the test array contains the match parameter.
	 * @param match The element that must be included in the tested array
	 * @param values The values to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $match
	 * @param \Array_hx $values
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function contains ($match, $values, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:588: lines 588-592
		if (\Lambda::has($values, $match)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:589: characters 7-29
			Assert::isTrue(true, $msg, $pos);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:591: characters 7-85
			Assert::fail(($msg === null ? "values " . (Assert::q($values)??'null') . " do not contain " . (\Std::string($match)??'null') : $msg), $pos);
		}
	}

	/**
	 * Asserts successfully when the value parameter is equal to the expected one.
	 * ```haxe
	 * Assert.equals(10, age);
	 * ```
	 * @param expected The expected value to check against
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $expected
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function equals ($expected, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:120: characters 5-134
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if (Boot::equal($expected, $value)) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null')), $pos));
		}
	}

	/**
	 * Forces a failure.
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function fail ($msg = "failure expected", $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:683: characters 5-28
		if ($msg === null) {
			$msg = "failure expected";
		}
		Assert::isTrue(false, $msg, $pos);
	}

	/**
	 * Same as Assert.equals but considering an approximation error.
	 * ```haxe
	 * Assert.floatEquals(Math.PI, value);
	 * ```
	 * @param expected The expected value to check against
	 * @param value The value to test
	 * @param approx The approximation tollerance. Default is 1e-5
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * @todo test the approximation argument
	 * 
	 * @param float $expected
	 * @param float $value
	 * @param float $approx
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function floatEquals ($expected, $value, $approx = null, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:152: characters 5-154
		$cond = Assert::_floatEquals($expected, $value, $approx);
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($cond) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null')), $pos));
		}
	}

	/**
	 * @param mixed $v
	 * 
	 * @return string
	 */
	static public function getTypeName ($v) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:169: characters 12-26
		$_g = \Type::typeof($v);
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:171: characters 23-38
			return "`null`";
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:172: characters 23-35
			return "Int";
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:173: characters 23-37
			return "Float";
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:174: characters 23-36
			return "Bool";
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:178: characters 23-38
			return "Object";
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:175: characters 23-40
			return "function";
		} else if ($__hx__switch === 6) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:176: characters 23-50
			return \Type::getClassName($_g->params[0]);
		} else if ($__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:177: characters 23-49
			return \Type::getEnumName($_g->params[0]);
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:179: characters 23-41
			return "`Unknown`";
		}
	}

	/**
	 * Asserts successfully when the 'value' parameter is of the of the passed type 'type'.
	 * @param value The value to test
	 * @param type The type to test against
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $value
	 * @param mixed $type
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function is ($value, $type, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:90: characters 5-159
		$cond = Boot::is($value, $type);
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($cond) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected type " . (Assert::typeToString($type)??'null') . " but it is " . (Assert::typeToString($value)??'null')), $pos));
		}
	}

	/**
	 * Asserts successfully when the condition is false.
	 * @param cond The condition to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param bool $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function isFalse ($value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:56: characters 5-95
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($value === false) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected false"), $pos));
		}
	}

	/**
	 * @param mixed $v
	 * @param bool $isAnonym
	 * 
	 * @return bool
	 */
	static public function isIterable ($v, $isAnonym) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:185: characters 5-53
		if (!\Lambda::has(($isAnonym ? \Reflect::fields($v) : \Type::getInstanceFields(\Type::getClass($v))), "iterator")) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:185: characters 41-53
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:186: characters 12-60
		$f = \Reflect::field($v, "iterator");
		if (!($f instanceof \Closure)) {
			return ($f instanceof HxClosure);
		} else {
			return true;
		}
	}

	/**
	 * @param mixed $v
	 * @param bool $isAnonym
	 * 
	 * @return bool
	 */
	static public function isIterator ($v, $isAnonym) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:190: characters 5-90
		$fields = ($isAnonym ? \Reflect::fields($v) : \Type::getInstanceFields(\Type::getClass($v)));
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:191: characters 5-83
		if (!\Lambda::has($fields, "next") || !\Lambda::has($fields, "hasNext")) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:191: characters 71-83
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:192: characters 12-56
		$f = \Reflect::field($v, "next");
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:192: characters 12-107
		if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:192: characters 60-107
			$f1 = \Reflect::field($v, "hasNext");
			if (!($f1 instanceof \Closure)) {
				return ($f1 instanceof HxClosure);
			} else {
				return true;
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:192: characters 12-107
			return false;
		}
	}

	/**
	 * Asserts successfully when the value is null.
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function isNull ($value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:67: characters 5-115
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($value === null) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected null but it is " . (Assert::q($value)??'null')), $pos));
		}
	}

	/**
	 * Asserts successfully when the condition is true.
	 * @param cond The condition to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param bool $cond
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function isTrue ($cond, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:45: characters 5-84
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($cond) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected true"), $pos));
		}
	}

	/**
	 * Asserts successfully when the value parameter does match against the passed EReg instance.
	 * ```haxe
	 * Assert.match(~/x/i, "haXe");
	 * ```
	 * @param pattern The pattern to match against
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param \EReg $pattern
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function match ($pattern, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:135: characters 5-149
		$cond = $pattern->match($value);
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($cond) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "the value " . (Assert::q($value)??'null') . " does not match the provided pattern"), $pos));
		}
	}

	/**
	 * Checks that the test array does not contain the match parameter.
	 * @param match The element that must NOT be included in the tested array
	 * @param values The values to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $match
	 * @param \Array_hx $values
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function notContains ($match, $values, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:604: lines 604-608
		if (!\Lambda::has($values, $match)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:605: characters 7-29
			Assert::isTrue(true, $msg, $pos);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:607: characters 7-81
			Assert::fail(($msg === null ? "values " . (Assert::q($values)??'null') . " do contain " . (\Std::string($match)??'null') : $msg), $pos);
		}
	}

	/**
	 * Asserts successfully when the value parameter is not the same as the expected one.
	 * ```haxe
	 * Assert.notEquals(10, age);
	 * ```
	 * @param expected The expected value to check against
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $expected
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function notEquals ($expected, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:105: characters 5-164
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if (!Boot::equal($expected, $value)) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected " . (Assert::q($expected)??'null') . " and test value " . (Assert::q($value)??'null') . " should be different"), $pos));
		}
	}

	/**
	 * Asserts successfully when the value is not null.
	 * @param value The value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function notNull ($value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:78: characters 5-97
		if (Assert::$results === null) {
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if ($value !== null) {
			Assert::$results->add(Assertation::Success($pos));
		} else {
			Assert::$results->add(Assertation::Failure(($msg !== null ? $msg : "expected not null"), $pos));
		}
	}

	/**
	 * Adds a successful assertion for cases where there are no values to assert.
	 * @param msg An optional success message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function pass ($msg = "pass expected", $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:673: characters 5-27
		if ($msg === null) {
			$msg = "pass expected";
		}
		Assert::isTrue(true, $msg, $pos);
	}

	/**
	 * @param bool $cond
	 * @param \Closure $getMessage
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function processResult ($cond, $getMessage, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:28: lines 28-30
		if (Assert::$results === null) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:29: characters 7-12
			throw new HxException("Assert at " . ($pos->fileName??'null') . ":" . ($pos->lineNumber??'null') . " out of context. Most likely you are trying to assert after a test timeout.");
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:31: lines 31-34
		if ($cond) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:32: characters 7-32
			Assert::$results->add(Assertation::Success($pos));
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:34: characters 7-46
			Assert::$results->add(Assertation::Failure($getMessage(), $pos));
		}
	}

	/**
	 * @param mixed $v
	 * 
	 * @return string
	 */
	static public function q ($v) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:491: lines 491-494
		if (Boot::is($v, Boot::getClass('String'))) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:492: characters 7-60
			return "\"" . (\StringTools::replace($v, "\"", "\\\"")??'null') . "\"";
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:494: characters 7-27
			return \Std::string($v);
		}
	}

	/**
	 * It is used to test an application that under certain circumstances must
	 * react throwing an error. This assert guarantees that the error is of the
	 * correct type (or Dynamic if non is specified).
	 * ```haxe
	 * Assert.raises(function() { throw "Error!"; }, String);
	 * ```
	 * @param method A method that generates the exception.
	 * @param type The type of the expected error. Defaults to Dynamic (catch all).
	 * @param msgNotThrown An optional error message used when the function fails to raise the expected
	 *      exception. If not passed a default one will be used
	 * @param msgWrongType An optional error message used when the function raises the exception but it is
	 *      of a different type than the one expected. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param \Closure $method
	 * @param Class $type
	 * @param string $msgNotThrown
	 * @param string $msgWrongType
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function raises ($method, $type = null, $msgNotThrown = null, $msgWrongType = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:546: characters 5-67
		$name = ($type !== null ? \Type::getClassName($type) : "Dynamic");
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:547: lines 547-560
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:548: characters 7-15
			$method();
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:549: lines 549-550
			if (null === $msgNotThrown) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:550: characters 9-67
				$msgNotThrown = "exception of type " . ($name??'null') . " not raised";
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:551: characters 7-30
			Assert::fail($msgNotThrown, $pos);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$ex = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:553: lines 553-559
			if (null === $type) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:554: characters 9-18
				Assert::pass(null, $pos);
			} else {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:556: lines 556-557
				if (null === $msgWrongType) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:557: characters 11-80
					$msgWrongType = "expected throw of type " . ($name??'null') . " but it is " . (\Std::string($ex)??'null');
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:558: characters 9-52
				Assert::isTrue(Boot::is($ex, $type), $msgWrongType, $pos);
			}
		}
	}

	/**
	 * Check that value is an object with the same fields and values found in expected.
	 * The default behavior is to check nested objects in fields recursively.
	 * ```haxe
	 * Assert.same({ name : "utest"}, ob);
	 * ```
	 * @param expected The expected value to check against
	 * @param value The value to test
	 * @param recursive States whether or not the test will apply also to sub-objects.
	 * Defaults to true
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param approx The approximation tollerance. Default is 1e-5
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param mixed $expected
	 * @param mixed $value
	 * @param bool $recursive
	 * @param string $msg
	 * @param float $approx
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function same ($expected, $value, $recursive = null, $msg = null, $approx = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:513: lines 513-514
		if (null === $approx) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:514: characters 7-20
			$approx = 1e-5;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:515: lines 515-521
		$status = new HxAnon([
			"recursive" => (null === $recursive ? true : $recursive),
			"path" => "",
			"error" => null,
			"expectedValue" => $expected,
			"actualValue" => $value,
		]);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:522: lines 522-526
		if (Assert::sameAs($expected, $value, $status, $approx)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:523: characters 7-21
			Assert::pass($msg, $pos);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:525: characters 7-50
			Assert::fail(($msg === null ? $status->error : $msg), $pos);
		}
	}

	/**
	 * @param mixed $expected
	 * @param mixed $value
	 * @param object $status
	 * @param float $approx
	 * 
	 * @return bool
	 */
	static public function sameAs ($expected, $value, $status, $approx) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:196: characters 5-43
		$texpected = Assert::getTypeName($expected);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:197: characters 5-37
		$tvalue = Assert::getTypeName($value);
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:198: characters 5-36
		$status->expectedValue = $expected;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:199: characters 5-31
		$status->actualValue = $value;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:201: lines 201-205
		if (($texpected !== $tvalue) && !((($texpected === "Int") && ($tvalue === "Float")) || (($texpected === "Float") && ($tvalue === "Int")))) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:203: characters 7-132
			$status->error = "expected type " . ($texpected??'null') . " but it is " . ($tvalue??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:204: characters 7-19
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:206: characters 12-33
		$_g = \Type::typeof($expected);
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 1 || $__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:209: lines 209-213
			if (!Assert::_floatEquals($expected, $value, $approx)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:211: characters 11-133
				$status->error = "expected " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:212: characters 11-23
				return false;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:214: characters 9-20
			return true;
		} else if ($__hx__switch === 0 || $__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:216: lines 216-219
			if (!Boot::equal($expected, $value)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:217: characters 11-133
				$status->error = "expected " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:218: characters 11-23
				return false;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:220: characters 9-20
			return true;
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:409: lines 409-432
			if ($status->recursive || ($status->path === "")) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:410: characters 11-47
				$tfields = \Reflect::fields($value);
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:411: characters 11-49
				$fields = \Reflect::fields($expected);
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:412: characters 11-34
				$path = $status->path;
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:413: lines 413-426
				$_g1 = 0;
				while ($_g1 < $fields->length) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:413: characters 15-20
					$field = ($fields->arr[$_g1] ?? null);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:413: lines 413-426
					++$_g1;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:414: characters 13-34
					$tfields->remove($field);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:415: characters 13-62
					$status->path = ($path === "" ? $field : ($path??'null') . "." . ($field??'null'));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:416: lines 416-419
					if (!\Reflect::hasField($value, $field)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:417: characters 15-96
						$status->error = "expected field " . ($status->path??'null') . " does not exist in " . (Assert::q($value)??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:418: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:420: characters 13-52
					$e = \Reflect::field($expected, $field);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:421: lines 421-422
					if (($e instanceof \Closure) || ($e instanceof HxClosure)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:422: characters 15-23
						continue;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:424: lines 424-425
					if (!Assert::sameAs($e, \Reflect::field($value, $field), $status, $approx)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:425: characters 15-27
						return false;
					}
				}

				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:427: lines 427-431
				if ($tfields->length > 0) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:429: characters 13-129
					$status->error = "the tested object has extra field(s) (" . ($tfields->join(", ")??'null') . ") not included in the expected ones";
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:430: characters 13-25
					return false;
				}
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:435: lines 435-458
			if (Assert::isIterator($expected, true)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:436: lines 436-439
				if (!Assert::isIterator($value, true)) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:437: characters 13-117
					$status->error = "expected Iterable but it is not " . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:438: characters 13-25
					return false;
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:440: lines 440-456
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:441: characters 13-83
					$evalues = \Lambda::array(new HxAnon(["iterator" => function ()  use (&$expected) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:441: characters 64-79
						return $expected;
					}]));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:442: characters 13-80
					$vvalues = \Lambda::array(new HxAnon(["iterator" => function ()  use (&$value) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:442: characters 64-76
						return $value;
					}]));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:443: lines 443-446
					if ($evalues->length !== $vvalues->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:444: characters 15-162
						$status->error = "expected " . ($evalues->length??'null') . " values in Iterator but they are " . ($vvalues->length??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:445: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:447: characters 13-36
					$path1 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:448: lines 448-455
					$_g2 = 0;
					$_g11 = $evalues->length;
					while ($_g2 < $_g11) {
						$i = $_g2++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:449: characters 15-78
						$status->path = ($path1 === "" ? "iterator[" . ($i??'null') . "]" : ($path1??'null') . "[" . ($i??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:450: lines 450-454
						if (!Assert::sameAs(($evalues->arr[$i] ?? null), ($vvalues->arr[$i] ?? null), $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:452: characters 17-164
							$status->error = "expected " . (Assert::q($status->expectedValue)??'null') . " but it is " . (Assert::q($status->actualValue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:453: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:457: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:461: lines 461-481
			if (Assert::isIterable($expected, true)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:462: lines 462-465
				if (!Assert::isIterable($value, true)) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:463: characters 13-117
					$status->error = "expected Iterator but it is not " . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:464: characters 13-25
					return false;
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:466: lines 466-479
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:467: characters 13-50
					$evalues1 = \Lambda::array($expected);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:468: characters 13-47
					$vvalues1 = \Lambda::array($value);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:469: lines 469-472
					if ($evalues1->length !== $vvalues1->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:470: characters 15-162
						$status->error = "expected " . ($evalues1->length??'null') . " values in Iterable but they are " . ($vvalues1->length??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:471: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:473: characters 13-36
					$path2 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:474: lines 474-478
					$_g3 = 0;
					$_g12 = $evalues1->length;
					while ($_g3 < $_g12) {
						$i1 = $_g3++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:475: characters 15-78
						$status->path = ($path2 === "" ? "iterable[" . ($i1??'null') . "]" : ($path2??'null') . "[" . ($i1??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:476: lines 476-477
						if (!Assert::sameAs(($evalues1->arr[$i1] ?? null), ($vvalues1->arr[$i1] ?? null), $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:477: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:480: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:482: characters 9-20
			return true;
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:222: lines 222-226
			if (!\Reflect::compareMethods($expected, $value)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:224: characters 11-115
				$status->error = "expected same function reference" . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:225: characters 11-23
				return false;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:227: characters 9-20
			return true;
		} else if ($__hx__switch === 6) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:229: characters 9-46
			$cexpected = \Type::getClassName($_g->params[0]);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:230: characters 9-62
			$cvalue = \Type::getClassName(\Type::getClass($value));
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:236: lines 236-240
			if ($cexpected !== $cvalue) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:238: characters 11-147
				$status->error = "expected instance of " . (Assert::q($cexpected)??'null') . " but it is " . (Assert::q($cvalue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:239: characters 11-23
				return false;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:243: lines 243-250
			if (Boot::is($expected, Boot::getClass('String'))) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:244: lines 244-249
				if (Boot::equal($expected, $value)) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:245: characters 13-24
					return true;
				} else {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:247: characters 13-90
					$status->error = "expected string '" . (\Std::string($expected)??'null') . "' but it is '" . (\Std::string($value)??'null') . "'";
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:248: characters 13-25
					return false;
				}
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:253: lines 253-270
			if (($expected instanceof \Array_hx)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:254: lines 254-268
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:255: lines 255-258
					if (!Boot::equal(Boot::dynamicField($expected, 'length'), Boot::dynamicField($value, 'length'))) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:256: characters 15-151
						$status->error = "expected " . (\Std::string(Boot::dynamicField($expected, 'length'))??'null') . " elements but they are " . (\Std::string(Boot::dynamicField($value, 'length'))??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:257: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:259: characters 13-36
					$path3 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:260: lines 260-267
					$_g4 = 0;
					$_g13 = Boot::dynamicField($expected, 'length');
					while ($_g4 < $_g13) {
						$i2 = $_g4++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:261: characters 15-75
						$status->path = ($path3 === "" ? "array[" . ($i2??'null') . "]" : ($path3??'null') . "[" . ($i2??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:262: lines 262-266
						if (!Assert::sameAs($expected[$i2], $value[$i2], $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:264: characters 17-197
							$status->error = "expected array element at [" . ($i2??'null') . "] to have " . (Assert::q($status->expectedValue)??'null') . " but it is " . (Assert::q($status->actualValue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:265: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:269: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:273: lines 273-279
			if (($expected instanceof \Date)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:274: lines 274-277
				if (!Boot::equal($expected->getTime(), $value->getTime())) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:275: characters 13-135
					$status->error = "expected " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:276: characters 13-25
					return false;
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:278: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:282: lines 282-295
			if (($expected instanceof Bytes)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:283: lines 283-293
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:284: characters 13-43
					$ebytes = $expected;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:285: characters 13-40
					$vbytes = $value;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:286: characters 13-61
					if ($ebytes->length !== $vbytes->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:286: characters 49-61
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:287: lines 287-292
					$_g5 = 0;
					$_g14 = $ebytes->length;
					while ($_g5 < $_g14) {
						$i3 = $_g5++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:288: lines 288-292
						if (ord($ebytes->b->s[$i3]) !== ord($vbytes->b->s[$i3])) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:290: characters 17-151
							$status->error = "expected byte " . (ord($ebytes->b->s[$i3])??'null') . " but it is " . (ord($vbytes->b->s[$i3])??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:291: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:294: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:298: lines 298-320
			if (($expected instanceof IMap)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:299: lines 299-318
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:300: characters 13-61
					$map = Boot::typedCast(Boot::getClass(IMap::class), $expected);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:301: characters 13-59
					$vmap = Boot::typedCast(Boot::getClass(IMap::class), $value);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:302: characters 39-64
					$_g6 = new \Array_hx();
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:302: characters 50-60
					$k = $map->keys();
					while ($k->hasNext()) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:302: characters 40-63
						$k1 = $k->next();
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:302: characters 62-63
						$_g6->arr[$_g6->length] = $k1;
						++$_g6->length;
					}

					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:303: characters 40-66
					$_g15 = new \Array_hx();
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:303: characters 51-62
					$k2 = $vmap->keys();
					while ($k2->hasNext()) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:303: characters 41-65
						$k3 = $k2->next();
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:303: characters 64-65
						$_g15->arr[$_g15->length] = $k3;
						++$_g15->length;
					}

					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:305: lines 305-308
					if ($_g6->length !== $_g15->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:306: characters 15-143
						$status->error = "expected " . ($_g6->length??'null') . " keys but they are " . ($_g15->length??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:307: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:309: characters 13-36
					$path4 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:310: lines 310-317
					$_g21 = 0;
					while ($_g21 < $_g6->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:310: characters 17-20
						$key = ($_g6->arr[$_g21] ?? null);
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:310: lines 310-317
						++$_g21;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:311: characters 15-78
						$status->path = ($path4 === "" ? "hash[" . (\Std::string($key)??'null') . "]" : ($path4??'null') . "[" . (\Std::string($key)??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:312: lines 312-316
						if (!Assert::sameAs($map->get($key), $vmap->get($key), $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:314: characters 17-164
							$status->error = "expected " . (Assert::q($status->expectedValue)??'null') . " but it is " . (Assert::q($status->actualValue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:315: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:319: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:323: lines 323-342
			if (Assert::isIterator($expected, false)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:324: lines 324-340
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:325: characters 13-83
					$evalues2 = \Lambda::array(new HxAnon(["iterator" => function ()  use (&$expected) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:325: characters 64-79
						return $expected;
					}]));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:326: characters 13-80
					$vvalues2 = \Lambda::array(new HxAnon(["iterator" => function ()  use (&$value) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:326: characters 64-76
						return $value;
					}]));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:327: lines 327-330
					if ($evalues2->length !== $vvalues2->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:328: characters 15-162
						$status->error = "expected " . ($evalues2->length??'null') . " values in Iterator but they are " . ($vvalues2->length??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:329: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:331: characters 13-36
					$path5 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:332: lines 332-339
					$_g7 = 0;
					$_g16 = $evalues2->length;
					while ($_g7 < $_g16) {
						$i4 = $_g7++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:333: characters 15-78
						$status->path = ($path5 === "" ? "iterator[" . ($i4??'null') . "]" : ($path5??'null') . "[" . ($i4??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:334: lines 334-338
						if (!Assert::sameAs(($evalues2->arr[$i4] ?? null), ($vvalues2->arr[$i4] ?? null), $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:336: characters 17-164
							$status->error = "expected " . (Assert::q($status->expectedValue)??'null') . " but it is " . (Assert::q($status->actualValue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:337: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:341: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:345: lines 345-361
			if (Assert::isIterable($expected, false)) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:346: lines 346-359
				if ($status->recursive || ($status->path === "")) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:347: characters 13-50
					$evalues3 = \Lambda::array($expected);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:348: characters 13-47
					$vvalues3 = \Lambda::array($value);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:349: lines 349-352
					if ($evalues3->length !== $vvalues3->length) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:350: characters 15-162
						$status->error = "expected " . ($evalues3->length??'null') . " values in Iterable but they are " . ($vvalues3->length??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:351: characters 15-27
						return false;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:353: characters 13-36
					$path6 = $status->path;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:354: lines 354-358
					$_g8 = 0;
					$_g17 = $evalues3->length;
					while ($_g8 < $_g17) {
						$i5 = $_g8++;
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:355: characters 15-78
						$status->path = ($path6 === "" ? "iterable[" . ($i5??'null') . "]" : ($path6??'null') . "[" . ($i5??'null') . "]");
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:356: lines 356-357
						if (!Assert::sameAs(($evalues3->arr[$i5] ?? null), ($vvalues3->arr[$i5] ?? null), $status, $approx)) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:357: characters 17-29
							return false;
						}
					}

				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:360: characters 11-22
				return true;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:364: lines 364-375
			if ($status->recursive || ($status->path === "")) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:365: characters 11-72
				$fields1 = \Type::getInstanceFields(\Type::getClass($expected));
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:366: characters 11-34
				$path7 = $status->path;
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:367: lines 367-374
				$_g9 = 0;
				while ($_g9 < $fields1->length) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:367: characters 15-20
					$field1 = ($fields1->arr[$_g9] ?? null);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:367: lines 367-374
					++$_g9;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:368: characters 13-62
					$status->path = ($path7 === "" ? $field1 : ($path7??'null') . "." . ($field1??'null'));
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:369: characters 13-52
					$e1 = \Reflect::field($expected, $field1);
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:370: characters 13-47
					if (($e1 instanceof \Closure) || ($e1 instanceof HxClosure)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:370: characters 39-47
						continue;
					}
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:372: lines 372-373
					if (!Assert::sameAs($e1, \Reflect::field($value, $field1), $status, $approx)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:373: characters 15-27
						return false;
					}
				}

			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:377: characters 9-20
			return true;
		} else if ($__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:379: characters 9-45
			$eexpected = \Type::getEnumName($_g->params[0]);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:380: characters 9-60
			$evalue = \Type::getEnumName(\Type::getEnum($value));
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:381: lines 381-385
			if ($eexpected !== $evalue) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:383: characters 11-150
				$status->error = "expected enumeration of " . (Assert::q($eexpected)??'null') . " but it is " . (Assert::q($evalue)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:384: characters 11-23
				return false;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:386: lines 386-405
			if ($status->recursive || ($status->path === "")) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:388: lines 388-392
				if (Boot::dynamicField($expected, 'index') !== Boot::dynamicField($value, 'index')) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:390: characters 13-196
					$status->error = "expected enum constructor " . (Assert::q(\Type::enumConstructor($expected))??'null') . " but it is " . (Assert::q(\Type::enumConstructor($value))??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null');
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:391: characters 13-25
					return false;
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:393: characters 11-55
				$eparams = \Array_hx::wrap(Boot::dynamicField($expected, 'params'));
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:394: characters 11-52
				$vparams = \Array_hx::wrap(Boot::dynamicField($value, 'params'));
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:395: characters 11-34
				$path8 = $status->path;
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:396: lines 396-404
				$_g10 = 0;
				$_g18 = $eparams->length;
				while ($_g10 < $_g18) {
					$i6 = $_g10++;
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:398: characters 13-80
					$status->path = ($path8 === "" ? "enum[" . ($i6??'null') . "]" : ($path8??'null') . "[" . ($i6??'null') . "]");
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:399: lines 399-403
					if (!Assert::sameAs(($eparams->arr[$i6] ?? null), ($vparams->arr[$i6] ?? null), $status, $approx)) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:401: characters 15-176
						$status->error = "expected enum param " . (Assert::q($expected)??'null') . " but it is " . (Assert::q($value)??'null') . ((($status->path === "" ? "" : " for field " . ($status->path??'null')))??'null') . " with " . ($status->error??'null');
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:402: characters 15-27
						return false;
					}
				}

			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:406: characters 9-20
			return true;
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:484: characters 16-21
			throw new HxException("Unable to compare two unknown types");
		}
	}

	/**
	 * Checks that the expected values is contained in value.
	 * @param match the string value that must be contained in value
	 * @param value the value to test
	 * @param msg An optional error message. If not passed a default one will be used
	 * @param pos Code position where the Assert call has been executed.
	 * 
	 * @param string $match
	 * @param string $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function stringContains ($match, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:619: lines 619-623
		if (($value !== null) && (HxString::indexOf($value, $match) >= 0)) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:620: characters 7-29
			Assert::isTrue(true, $msg, $pos);
		} else {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:622: characters 7-91
			Assert::fail(($msg === null ? "value " . (Assert::q($value)??'null') . " does not contain " . (Assert::q($match)??'null') : $msg), $pos);
		}
	}

	/**
	 * Checks that the test string contains all the values in `sequence` in the order
	 * they are defined.
	 * @param sequence the values to match in the string
	 * @param value the value to test
	 * @param msg An optional error message. If not passed a default one is be used
	 * @param pos Code position where the Assert call has been executed.
	 * 
	 * @param \Array_hx $sequence
	 * @param string $value
	 * @param string $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	static public function stringSequence ($sequence, $value, $msg = null, $pos = null) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:635: lines 635-639
		if (null === $value) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:637: characters 7-59
			Assert::fail(($msg === null ? "null argument value" : $msg), $pos);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:638: characters 7-13
			return;
		}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:640: characters 5-15
		$p = 0;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:641: lines 641-662
		$_g = 0;
		while ($_g < $sequence->length) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:641: characters 10-11
			$s = ($sequence->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:641: lines 641-662
			++$_g;
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:643: characters 7-36
			$p2 = HxString::indexOf($value, $s, $p);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:644: lines 644-660
			if ($p2 < 0) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:646: lines 646-657
				if ($msg === null) {
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:648: characters 11-46
					$msg = "expected '" . ($s??'null') . "' after ";
					#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:649: lines 649-656
					if ($p > 0) {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:651: characters 13-42
						$cut = mb_substr($value, 0, $p);
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:652: lines 652-653
						if (mb_strlen($cut) > 30) {
							#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:653: characters 15-45
							$cut = "..." . (mb_substr($cut, -27, null)??'null');
						}
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:654: characters 13-36
						$msg = ($msg??'null') . " '" . ($cut??'null') . "'";
					} else {
						#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:656: characters 13-28
						$msg = ($msg??'null') . " begin";
					}
				}
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:658: characters 9-23
				Assert::fail($msg, $pos);
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:659: characters 9-15
				return;
			}
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:661: characters 7-24
			$p = $p2 + mb_strlen($s);
		}

		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:663: characters 5-27
		Assert::isTrue(true, $msg, $pos);
	}

	/**
	 * @param mixed $t
	 * 
	 * @return string
	 */
	static public function typeToString ($t) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:725: lines 725-729
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:726: characters 7-33
			$_t = \Type::getClass($t);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:727: lines 727-728
			if ($_t !== null) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:728: characters 9-15
				$t = $_t;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:730: characters 5-60
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:730: characters 9-36
			return \Type::getClassName($t);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e1 = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:731: lines 731-735
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:732: characters 7-32
			$_t1 = \Type::getEnum($t);
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:733: lines 733-734
			if ($_t1 !== null) {
				#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:734: characters 9-15
				$t = $_t1;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e2 = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:736: characters 5-57
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:736: characters 9-35
			return \Type::getEnumName($t);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e3 = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:737: characters 5-66
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:737: characters 9-42
			return \Std::string(\Type::typeof($t));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e4 = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:738: characters 5-53
		try {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:738: characters 9-29
			return \Std::string($t);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e5 = $__hx__real_e;
					}
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:739: characters 5-44
		return "<unable to retrieve type name>";
	}

	/**
	 * Creates a warning message.
	 * @param msg A mandatory message that justifies the warning.
	 * @param pos Code position where the Assert call has been executed. Don't fill it
	 * unless you know what you are doing.
	 * 
	 * @param string $msg
	 * 
	 * @return void
	 */
	static public function warn ($msg) {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:693: characters 5-30
		Assert::$results->add(Assertation::Warning($msg));
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$createAsync = function ($f = null, $timeout = null) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:709: characters 5-24
			return function () {
			};
		};
		self::$createEvent = function ($f, $timeout = null) {
			#/Users/ut/haxe/haxe_libraries/utest/1.9.5/github/031e6d47bf35ae55654eef5bd4dac8c07986ecfa/src/utest/Assert.hx:721: characters 5-25
			return function ($e) {
			};
		};
	}
}

Boot::registerClass(Assert::class, 'utest.Assert');
Assert::__hx__init();
