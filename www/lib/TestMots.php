<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Log;
use \utest\Assert;
use \utest\ITest;
use \utest\Async;
use \php\_Boot\HxString;
use \haxe\io\Path;

class TestMots implements ITest {
	/**
	 * @var string
	 */
	static public $fileName = "Caâpture d’écra🐠n 2019-02ù-04 à 17.27.05.pngCapâtuærèëe d’écrāan 2019-02-04 à 17.27.05.png";

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @return object
	 */
	public function __initializeUtest__ () {
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/haxelib/src/utest/utils/TestBuilder.hx:55: lines 55-56
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/haxelib/src/utest/utils/TestBuilder.hx:72: characters 25-28
		$init = new HxAnon([
			"tests" => new \Array_hx(),
			"accessories" => new HxAnon(),
		]);
		#tests/TestMots.hx:12: lines 12-15
		$_this = $init->tests;
		$_this->arr[$_this->length] = new HxAnon([
			"name" => "testtest",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testtest();
				return Async::getResolved();
			},
		]);
		++$_this->length;

		#tests/TestMots.hx:17: lines 17-20
		$_this1 = $init->tests;
		$_this1->arr[$_this1->length] = new HxAnon([
			"name" => "testUnderClean",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testUnderClean();
				return Async::getResolved();
			},
		]);
		++$_this1->length;

		#tests/TestMots.hx:22: lines 22-27
		$_this2 = $init->tests;
		$_this2->arr[$_this2->length] = new HxAnon([
			"name" => "testundercleanFile",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testundercleanFile();
				return Async::getResolved();
			},
		]);
		++$_this2->length;

		#tests/TestMots.hx:28: lines 28-31
		$_this3 = $init->tests;
		$_this3->arr[$_this3->length] = new HxAnon([
			"name" => "testCleanAccents",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testCleanAccents();
				return Async::getResolved();
			},
		]);
		++$_this3->length;

		#tests/TestMots.hx:34: lines 34-38
		$_this4 = $init->tests;
		$_this4->arr[$_this4->length] = new HxAnon([
			"name" => "testCapitalize",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testCapitalize();
				return Async::getResolved();
			},
		]);
		++$_this4->length;

		#tests/TestMots.hx:40: lines 40-44
		$_this5 = $init->tests;
		$_this5->arr[$_this5->length] = new HxAnon([
			"name" => "testCleanPath",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testCleanPath();
				return Async::getResolved();
			},
		]);
		++$_this5->length;

		#tests/TestMots.hx:46: lines 46-49
		$_this6 = $init->tests;
		$_this6->arr[$_this6->length] = new HxAnon([
			"name" => "testEndWith",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testEndWith();
				return Async::getResolved();
			},
		]);
		++$_this6->length;

		#tests/TestMots.hx:56: lines 56-61
		$_this7 = $init->tests;
		$_this7->arr[$_this7->length] = new HxAnon([
			"name" => "testCamel",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testCamel();
				return Async::getResolved();
			},
		]);
		++$_this7->length;

		#tests/TestMots.hx:63: lines 63-66
		$_this8 = $init->tests;
		$_this8->arr[$_this8->length] = new HxAnon([
			"name" => "testContain",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testContain();
				return Async::getResolved();
			},
		]);
		++$_this8->length;

		#tests/TestMots.hx:68: lines 68-76
		$_this9 = $init->tests;
		$_this9->arr[$_this9->length] = new HxAnon([
			"name" => "testExtension",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testExtension();
				return Async::getResolved();
			},
		]);
		++$_this9->length;

		#tests/TestMots.hx:78: lines 78-83
		$_this10 = $init->tests;
		$_this10->arr[$_this10->length] = new HxAnon([
			"name" => "testunCamel",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testunCamel();
				return Async::getResolved();
			},
		]);
		++$_this10->length;

		#tests/TestMots.hx:87: lines 87-91
		$_this11 = $init->tests;
		$_this11->arr[$_this11->length] = new HxAnon([
			"name" => "testMatchEmoj",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testMatchEmoj();
				return Async::getResolved();
			},
		]);
		++$_this11->length;

		#tests/TestMots.hx:93: lines 93-97
		$_this12 = $init->tests;
		$_this12->arr[$_this12->length] = new HxAnon([
			"name" => "testStripEmoj",
			"execute" => function ()  use (&$_gthis) {
				$_gthis->testStripEmoj();
				return Async::getResolved();
			},
		]);
		++$_this12->length;

		#/Users/ut/haxe/haxe_libraries/utest/1.9.5/haxelib/src/utest/utils/TestBuilder.hx:52: characters 24-35
		return $init;
	}

	/**
	 * @return void
	 */
	public function testCamel () {
		#tests/TestMots.hx:58: characters 6-35
		$str = "je suis une vache";
		#tests/TestMots.hx:59: characters 6-28
		$str = \Mots::camelize("je suis une vache");
		#tests/TestMots.hx:60: characters 6-41
		Assert::equals("jeSuisUneVache", $str, null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 60,
			"className" => "TestMots",
			"methodName" => "testCamel",
		]));
	}

	/**
	 * @return void
	 */
	public function testCapitalize () {
		#tests/TestMots.hx:37: characters 8-51
		Assert::equals("David", \Mots::capitalize("david"), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 37,
			"className" => "TestMots",
			"methodName" => "testCapitalize",
		]));
	}

	/**
	 * @return void
	 */
	public function testCleanAccents () {
		#tests/TestMots.hx:30: characters 3-116
		Assert::equals("Caapture d’ecra🐠n 2019-02u-04 a 17.27.05.pngCapatuaereee d’ecraan 2019-02-04 a 17.27.05.png", \Mots::cleanAccents(TestMots::$fileName), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 30,
			"className" => "TestMots",
			"methodName" => "testCleanAccents",
		]));
	}

	/**
	 * @return void
	 */
	public function testCleanPath () {
		#tests/TestMots.hx:43: characters 8-77
		Assert::equals("../david/Zelote/magali/lupin.jpg", \Mots::cleanPath("..//david/Zelote//magali/lupin.jpg//"), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 43,
			"className" => "TestMots",
			"methodName" => "testCleanPath",
		]));
	}

	/**
	 * @return void
	 */
	public function testContain () {
		#tests/TestMots.hx:65: characters 10-53
		Assert::isTrue(HxString::indexOf("bonjour", "j") >= 0, null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 65,
			"className" => "TestMots",
			"methodName" => "testContain",
		]));
	}

	/**
	 * @return void
	 */
	public function testEndWith () {
		#tests/TestMots.hx:48: characters 8-48
		Assert::isTrue(\Mots::endsWith("pur", "r"), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 48,
			"className" => "TestMots",
			"methodName" => "testEndWith",
		]));
	}

	/**
	 * @return void
	 */
	public function testExtension () {
		#tests/TestMots.hx:70: lines 70-75
		$result = [];
		$collection = (\Array_hx::wrap([
			"one.png",
			"two.tar.gz",
			".htaccess",
			"four.jpeg",
		]))->arr;
		foreach ($collection as $key => $value) {
			#tests/TestMots.hx:72: characters 17-70
			Assert::equals(Path::extension($value), \Mots::getExtension($value), null, new HxAnon([
				"fileName" => "tests/TestMots.hx",
				"lineNumber" => 72,
				"className" => "TestMots",
				"methodName" => "testExtension",
			]));
			#tests/TestMots.hx:70: lines 70-75
			$result[] = null;

		}

		\Array_hx::wrap($result);
	}

	/**
	 * @return void
	 */
	public function testMatchEmoj () {
		#tests/TestMots.hx:90: characters 9-45
		Assert::isTrue(\Mots::matchEmoj("👽😬hallowe🐬en"), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 90,
			"className" => "TestMots",
			"methodName" => "testMatchEmoj",
		]));
	}

	/**
	 * @return void
	 */
	public function testStripEmoj () {
		#tests/TestMots.hx:96: characters 8-56
		Assert::equals("halloween", \Mots::stripEmoj("👽😬hallowe🐬en"), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 96,
			"className" => "TestMots",
			"methodName" => "testStripEmoj",
		]));
	}

	/**
	 * @return void
	 */
	public function testUnderClean () {
		#tests/TestMots.hx:19: characters 3-116
		Assert::equals("Caapture_d_ecra_n_2019_02u_04_a_17_27_05_pngCapatuaereee_d_ecraan_2019_02_04_a_17_27_05_png", \Mots::underclean(TestMots::$fileName), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 19,
			"className" => "TestMots",
			"methodName" => "testUnderClean",
		]));
	}

	/**
	 * @return void
	 */
	public function testtest () {
		#tests/TestMots.hx:13: characters 3-8
		(Log::$trace)("yo", new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 13,
			"className" => "TestMots",
			"methodName" => "testtest",
		]));
		#tests/TestMots.hx:14: characters 3-30
		Assert::isTrue(true, null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 14,
			"className" => "TestMots",
			"methodName" => "testtest",
		]));
	}

	/**
	 * @return void
	 */
	public function testunCamel () {
		#tests/TestMots.hx:80: characters 8-34
		$str = "jeSuisUneVache";
		#tests/TestMots.hx:81: characters 9-30
		$str = \Mots::unCamel("jeSuisUneVache");
		#tests/TestMots.hx:82: characters 9-47
		Assert::equals("je suis une vache", $str, null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 82,
			"className" => "TestMots",
			"methodName" => "testunCamel",
		]));
	}

	/**
	 * @return void
	 */
	public function testundercleanFile () {
		#tests/TestMots.hx:23: characters 9-49
		$str = \Mots::undercleanFile(TestMots::$fileName);
		#tests/TestMots.hx:24: characters 1-6
		(Log::$trace)("strrrr" . ($str??'null'), new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 24,
			"className" => "TestMots",
			"methodName" => "testundercleanFile",
		]));
		#tests/TestMots.hx:25: characters 3-96
		Assert::equals("CaaptureDEcran201902u04A172705PngCapatuaereeeDEcraan20190204A172705.png", $str, null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 25,
			"className" => "TestMots",
			"methodName" => "testundercleanFile",
		]));
		#tests/TestMots.hx:26: characters 9-52
		Assert::equals("png", \Mots::getExtension($str), null, new HxAnon([
			"fileName" => "tests/TestMots.hx",
			"lineNumber" => 26,
			"className" => "TestMots",
			"methodName" => "testundercleanFile",
		]));
	}
}

Boot::registerClass(TestMots::class, 'TestMots');
