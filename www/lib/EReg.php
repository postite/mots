<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \php\Boot;

final /**
 * The EReg class represents regular expressions.
 * While basic usage and patterns consistently work across platforms, some more
 * complex operations may yield different results. This is a necessary trade-
 * off to retain a certain level of performance.
 * EReg instances can be created by calling the constructor, or with the
 * special syntax `~/pattern/modifier`
 * EReg instances maintain an internal state, which is affected by several of
 * its methods.
 * A detailed explanation of the supported operations is available at
 * <https://haxe.org/manual/std-regex.html>
 */
class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var string
	 */
	public $re;


	/**
	 * Creates a new regular expression with pattern `r` and modifiers `opt`.
	 * This is equivalent to the shorthand syntax `~/r/opt`
	 * If `r` or `opt` are null, the result is unspecified.
	 * 
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:37: characters 3-19
		$this->pattern = $r;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:38: characters 3-26
		$a = \Array_hx::wrap(explode("g", $opt));
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:39: characters 3-24
		$this->global = $a->length > 1;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:40: lines 40-42
		if ($this->global) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:41: characters 4-20
			$opt = $a->join("");
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:43: characters 3-21
		$this->options = $opt;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:44: characters 3-64
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($opt??'null');
	}


	/**
	 * Tells if `this` regular expression matches String `s`.
	 * This method modifies the internal state.
	 * If `s` is `null`, the result is unspecified.
	 * 
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:48: characters 3-78
		$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:50: lines 50-54
		if ($p > 0) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:51: characters 4-12
			$this->last = $s;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:53: characters 4-15
			$this->last = null;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/EReg.hx:55: characters 3-15
		return $p > 0;
	}
}


Boot::registerClass(EReg::class, 'EReg');
