<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxString;

class CallStack {
	/**
	 * @var mixed
	 */
	static public $lastExceptionTrace;
	/**
	 * @var \Closure
	 * If defined this function will be used to transform call stack entries.
	 * @param String - generated php file name.
	 * @param Int - Line number in generated file.
	 */
	static public $mapPosition;

	/**
	 * Return the call stack elements, or an empty array if not available.
	 * 
	 * @return \Array_hx
	 */
	static public function callStack () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:33: characters 3-78
		return CallStack::makeStack(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));
	}

	/**
	 * Return the exception stack : this is the stack elements between
	 * the place the last exception was thrown and the place it was
	 * caught, or an empty array if not available.
	 * 
	 * @return \Array_hx
	 */
	static public function exceptionStack () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:42: characters 3-95
		return CallStack::makeStack((CallStack::$lastExceptionTrace === null ? [] : CallStack::$lastExceptionTrace));
	}

	/**
	 * @param \StringBuf $b
	 * @param StackItem $s
	 * 
	 * @return void
	 */
	static public function itemToString ($b, $s) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:58: lines 58-79
		$__hx__switch = ($s->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:60: characters 5-26
			$b->add("a C function");
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:62: characters 5-21
			$b->add("module ");
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:63: characters 5-13
			$b->add($s->params[0]);
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:64: characters 17-18
			$s1 = $s->params[0];
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:65: lines 65-68
			if ($s1 !== null) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:66: characters 6-23
				CallStack::itemToString($b, $s1);
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:67: characters 6-17
				$b->add(" (");
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:69: characters 5-16
			$b->add($s->params[1]);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:70: characters 5-20
			$b->add(" line ");
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:71: characters 5-16
			$b->add($s->params[2]);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:72: characters 5-31
			if ($s1 !== null) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:72: characters 21-31
				$b->add(")");
			}

		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:74: characters 5-17
			$b->add($s->params[0]);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:75: characters 5-15
			$b->add(".");
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:76: characters 5-16
			$b->add($s->params[1]);
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:78: characters 5-28
			$b->add("local function");
		}
	}

	/**
	 * @param mixed $native
	 * 
	 * @return \Array_hx
	 */
	static public function makeStack ($native) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:118: characters 3-19
		$result = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:119: characters 3-36
		$count = count($native);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:121: lines 121-150
		$_g = 0;
		while ($_g < $count) {
			$i = $_g++;
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:122: characters 4-26
			$entry = $native[$i];
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:123: characters 4-20
			$item = null;
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:125: lines 125-137
			if (($i + 1) < $count) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:126: characters 5-30
				$next = $native[$i + 1];
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:128: characters 5-62
				if (!isset($next["function"])) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:128: characters 41-62
					$next["function"] = "";
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:129: characters 5-56
				if (!isset($next["class"])) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:129: characters 38-56
					$next["class"] = "";
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:131: lines 131-136
				if (HxString::indexOf($next["function"], "{closure}") >= 0) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:132: characters 6-28
					$item = StackItem::LocalFunction();
				} else if ((strlen($next["class"]) > 0) && (strlen($next["function"]) > 0)) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:134: characters 6-49
					$cls = Boot::getClassName($next["class"]);
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:135: characters 6-42
					$item = StackItem::Method($cls, $next["function"]);
				}
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:138: lines 138-149
			if (isset($entry["file"])) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:139: lines 139-145
				if (CallStack::$mapPosition !== null) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:140: characters 6-58
					$pos = (CallStack::$mapPosition)($entry["file"], $entry["line"]);
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:141: lines 141-144
					if (($pos !== null) && ($pos->source !== null) && ($pos->originalLine !== null)) {
						#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:142: characters 7-33
						$entry["file"] = $pos->source;
						#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:143: characters 7-39
						$entry["line"] = $pos->originalLine;
					}
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:146: characters 5-61
				$result->arr[$result->length] = StackItem::FilePos($item, $entry["file"], $entry["line"]);
				++$result->length;

			} else if ($item !== null) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:148: characters 5-22
				$result->arr[$result->length] = $item;
				++$result->length;
			}
		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:152: characters 3-16
		return $result;
	}

	/**
	 * @param \Throwable $e
	 * 
	 * @return void
	 */
	static public function saveExceptionTrace ($e) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:84: characters 3-36
		CallStack::$lastExceptionTrace = $e->getTrace();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:87: characters 3-80
		$currentTrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:90: lines 90-100
		$_g = -(count($currentTrace) - 1);
		while ($_g < 1) {
			$i = $_g++;
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:91: characters 4-82
			$exceptionEntry = end(CallStack::$lastExceptionTrace);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:93: lines 93-99
			if (!isset($exceptionEntry["file"]) || !isset($currentTrace[-$i]["file"])) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:94: characters 5-41
				array_pop(CallStack::$lastExceptionTrace);
			} else if (Boot::equal($currentTrace[-$i]["file"], $exceptionEntry["file"]) && Boot::equal($currentTrace[-$i]["line"], $exceptionEntry["line"])) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:96: characters 5-41
				array_pop(CallStack::$lastExceptionTrace);
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:98: characters 5-10
				break;
			}
		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:103: characters 3-48
		$count = count(CallStack::$lastExceptionTrace);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:104: lines 104-106
		$_g2 = 0;
		while ($_g2 < $count) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:105: characters 36-53
			$this1 = [];
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:105: characters 4-53
			CallStack::$lastExceptionTrace[$_g2++]["args"] = $this1;
		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:108: characters 3-50
		$thrownAt = [];
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:109: characters 3-28
		$thrownAt["function"] = "";
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:110: characters 3-33
		$thrownAt["line"] = $e->getLine();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:111: characters 3-33
		$thrownAt["file"] = $e->getFile();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:112: characters 3-25
		$thrownAt["class"] = "";
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:113: characters 3-39
		$thrownAt["args"] = [];
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:114: characters 3-53
		array_unshift(CallStack::$lastExceptionTrace, $thrownAt);
	}

	/**
	 * Returns a representation of the stack as a printable string.
	 * 
	 * @param \Array_hx $stack
	 * 
	 * @return string
	 */
	static public function toString ($stack) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:49: characters 3-27
		$b = new \StringBuf();
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:50: lines 50-53
		$_g = 0;
		while ($_g < $stack->length) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:50: characters 8-9
			$s = ($stack->arr[$_g++] ?? null);
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:51: characters 4-27
			$b->add("\x0ACalled from ");
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:52: characters 4-21
			CallStack::itemToString($b, $s);
		}

		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/CallStack.hx:54: characters 3-22
		return $b->b;
	}
}

Boot::registerClass(CallStack::class, 'haxe.CallStack');
