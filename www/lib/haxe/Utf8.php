<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe;

use \php\Boot;

/**
 * Since not all platforms guarantee that `String` always uses UTF-8 encoding, you
 * can use this cross-platform API to perform operations on such strings.
 */
class Utf8 {
	/**
	 * Returns the number of UTF8 chars of the String.
	 * 
	 * @param string $s
	 * 
	 * @return int
	 */
	static public function length ($s) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:76: characters 3-34
		return mb_strlen($s, "UTF-8");
	}

	/**
	 * This is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.
	 * 
	 * @param string $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function sub ($s, $pos, $len) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/php/_std/haxe/Utf8.hx:84: characters 3-44
		return mb_substr($s, $pos, $len, "UTF-8");
	}
}

Boot::registerClass(Utf8::class, 'haxe.Utf8');
