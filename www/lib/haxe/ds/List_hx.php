<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\ds\_List\ListIterator;
use \haxe\ds\_List\ListNode;

/**
 * A linked-list of elements. The list is composed of element container objects
 * that are chained together. It is optimized so that adding or removing an
 * element does not imply copying the whole list content every time.
 * @see https://haxe.org/manual/std-List.html
 */
class List_hx {
	/**
	 * @var ListNode
	 */
	public $h;
	/**
	 * @var int
	 * The length of `this` List.
	 */
	public $length;
	/**
	 * @var ListNode
	 */
	public $q;

	/**
	 * Creates a new empty list.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:45: characters 3-13
		$this->length = 0;
	}

	/**
	 * Adds element `item` at the end of `this` List.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function add ($item) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:54: characters 3-39
		$x = new ListNode($item, null);
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:55: lines 55-58
		if ($this->h === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:56: characters 4-9
			$this->h = $x;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:58: characters 4-14
			$this->q->next = $x;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:59: characters 3-8
		$this->q = $x;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:60: characters 3-11
		$this->length++;
	}

	/**
	 * Returns an iterator on the elements of the list.
	 * 
	 * @return ListIterator
	 */
	public function iterator () {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:162: characters 3-32
		return new ListIterator($this->h);
	}

	/**
	 * Removes the first occurrence of `v` in `this` List.
	 * If `v` is found by checking standard equality, it is removed from `this`
	 * List and the function returns true.
	 * Otherwise, false is returned.
	 * 
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function remove ($v) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:139: characters 3-31
		$prev = null;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:140: characters 3-13
		$l = $this->h;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:141: lines 141-154
		while ($l !== null) {
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:142: lines 142-151
			if (Boot::equal($l->item, $v)) {
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:143: lines 143-146
				if ($prev === null) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:144: characters 6-16
					$this->h = $l->next;
				} else {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:146: characters 6-24
					$prev->next = $l->next;
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:147: lines 147-148
				if ($this->q === $l) {
					#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:148: characters 6-14
					$this->q = $prev;
				}
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:149: characters 5-13
				$this->length--;
				#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:150: characters 5-16
				return true;
			}
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:152: characters 4-12
			$prev = $l;
			#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:153: characters 4-14
			$l = $l->next;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/haxe/ds/List.hx:155: characters 3-15
		return false;
	}
}

Boot::registerClass(List_hx::class, 'haxe.ds.List');
