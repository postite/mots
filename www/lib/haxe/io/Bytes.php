<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe\io;

use \php\Boot;
use \haxe\io\_BytesData\Container;

class Bytes {
	/**
	 * @var Container
	 */
	public $b;
	/**
	 * @var int
	 */
	public $length;


	/**
	 * @param int $length
	 * 
	 * @return Bytes
	 */
	static public function alloc ($length) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:187: characters 3-52
		return new Bytes($length, new Container(str_repeat(chr(0), $length)));
	}


	/**
	 * Read the most efficiently possible the n-th byte of the data.
	 * Behavior when reading outside of the available data is unspecified.
	 * 
	 * @param Container $b
	 * @param int $pos
	 * 
	 * @return int
	 */
	static public function fastGet ($b, $pos) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:203: characters 3-20
		return ord($b->s[$pos]);
	}


	/**
	 * @param Container $b
	 * 
	 * @return Bytes
	 */
	static public function ofData ($b) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:195: characters 3-32
		return new Bytes(strlen($b->s), $b);
	}


	/**
	 * @param string $s
	 * 
	 * @return Bytes
	 */
	static public function ofString ($s) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:191: characters 3-32
		return new Bytes(strlen($s), new Container($s));
	}


	/**
	 * @param int $length
	 * @param Container $b
	 * 
	 * @return void
	 */
	public function __construct ($length, $b) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:31: characters 3-23
		$this->length = $length;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:32: characters 3-13
		$this->b = $b;
	}
}


Boot::registerClass(Bytes::class, 'haxe.io.Bytes');
